<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内核tcp动态调整窗口</title>
    <link href="/2022/09/12/%E5%86%85%E6%A0%B8tcp%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/09/12/%E5%86%85%E6%A0%B8tcp%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="内核tcp自动调整窗口"><a href="#内核tcp自动调整窗口" class="headerlink" title="内核tcp自动调整窗口"></a>内核tcp自动调整窗口</h3><h3 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h3><h5 id="1、recvBuffer"><a href="#1、recvBuffer" class="headerlink" title="1、recvBuffer"></a>1、recvBuffer</h5><p>Linux在2.6.17以后增加了recvBuffer自动调节机制，recvbuffer的实际大小会自动在最小值和最大值之间浮动，以期找到性能和资源的平衡点，因此大多数情况下不建议将recvbuffer手工设置成固定值。</p><p>当net.ipv4.tcp_moderate_rcvbuf = 1时，自动调节机制生效，每个TCP连接的recvBuffer由下面的3元数组指定：net.ipv4.tcp_rmem = min default max, 默认情况下 net.ipv4.tcp_rmem = 4096    131072    6291456，分别为4K、128K、6M。最初recvbuffer被设置为default值，同时这个缺省值会覆盖net.core.rmem_default的设置。随后recvbuffer根据实际情况在最大值和最小值之间动态调节。在缓冲的动态调优机制开启的情况下，我们将net.ipv4.tcp_rmem的最大值设置为BDP。</p><p>当net.ipv4.tcp_moderate_rcvbuf被设置为0，或者设置了socket选项SO_RCVBUF，缓冲的动态调节机制被关闭。recvbuffer的缺省值由net.core.rmem_default设置，但如果设置了net.ipv4.tcp_rmem，缺省值则被覆盖。可以通过系统调用setsockopt()设置recvbuffer的最大值为net.core.rmem_max。在缓冲动态调节机制关闭的情况下，建议把缓冲的缺省值设置为BDP。</p><p>注意这里还有一个细节，缓冲除了保存接收的数据本身，还需要一部分空间保存socket数据结构等额外信息。因此上面讨论的recvbuffer最佳值仅仅等于BDP是不够的，还需要考虑保存socket等额外信息的开销。Linux根据参数<br>net.ipv4.tcp_adv_win_scale计算额外开销的大小。</p><h4 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h4><h5 id="1、sendBuffer"><a href="#1、sendBuffer" class="headerlink" title="1、sendBuffer"></a>1、sendBuffer</h5><p><a href="https://blog.csdn.net/zhangskd/article/details/48213479">其他可参考资料</a></p><p><a href="https://www.cnblogs.com/wanpengcoder/p/11752050.html">其他可参考资料</a></p><p>同recvBuffer类似，和sendBuffer有关的参数如下： net.ipv4.tcp_wmem = min default max, 发送端缓冲的自动调节机制很早就已经实现，并且是无条件开启，没有参数去设置。如果指定了tcp_wmem，则net.core.wmem_default被tcp_wmem的覆盖。sendBuffer在tcp_wmem的最小值和最大值之间自动调节。如果调用setsockopt()设置了socket选项SO_SNDBUF，将关闭发送端缓冲的自动调节机制，tcp_wmem将被忽略，SO_SNDBUF的最大值由net.core.wmem_max限制。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tex">在这些函数中可以找到 tcp<span class="hljs-built_in">_</span>rmem 的用法：<br>tcp<span class="hljs-built_in">_</span>output.c : tcp<span class="hljs-built_in">_</span>select<span class="hljs-built_in">_</span>initial<span class="hljs-built_in">_</span>window<br>tcp<span class="hljs-built_in">_</span>input.c : <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>tcp<span class="hljs-built_in">_</span>grow<span class="hljs-built_in">_</span>window tcp<span class="hljs-built_in">_</span>fixup<span class="hljs-built_in">_</span>rcvbuf tcp<span class="hljs-built_in">_</span>clamp<span class="hljs-built_in">_</span>window tcp<span class="hljs-built_in">_</span>rcv<span class="hljs-built_in">_</span>space<span class="hljs-built_in">_</span>adjust<br><br>在这些函数中可以找到 tcp<span class="hljs-built_in">_</span>wmem 的用法：<br>tcp.c : tcp<span class="hljs-built_in">_</span>init<span class="hljs-built_in">_</span>sock<br>tcp<span class="hljs-built_in">_</span>input.c : tcp<span class="hljs-built_in">_</span>sndbuf<span class="hljs-built_in">_</span>expand tcp<span class="hljs-built_in">_</span>should<span class="hljs-built_in">_</span>expand<span class="hljs-built_in">_</span>sndbuf<br><br>在所有用法中，此值用于在tcp established时动态控制接收窗口和/或套接字的接收缓冲区，这意味着它将考虑当前流量和系统参数。<br></code></pre></td></tr></table></figure><h5 id="注意：默认情况下Linux系统会自动调整这个buffer（net-ipv4-tcp-wmem）-也就是不推荐程序中主动去设置SO-SNDBUF，除非明确知道设置的值是最优的。"><a href="#注意：默认情况下Linux系统会自动调整这个buffer（net-ipv4-tcp-wmem）-也就是不推荐程序中主动去设置SO-SNDBUF，除非明确知道设置的值是最优的。" class="headerlink" title="注意：默认情况下Linux系统会自动调整这个buffer（net.ipv4.tcp_wmem）, 也就是不推荐程序中主动去设置SO_SNDBUF，除非明确知道设置的值是最优的。"></a>注意：默认情况下Linux系统会自动调整这个buffer（net.ipv4.tcp_wmem）, 也就是不推荐程序中主动去设置SO_SNDBUF，除非明确知道设置的值是最优的。</h5><h5 id="2、QDisc"><a href="#2、QDisc" class="headerlink" title="2、QDisc"></a>2、QDisc</h5><p>QDisc（queueing discipline ）位于IP层和网卡的ringbuffer之间。我们已经知道，ringbuffer是一个简单的FIFO队列，这种设计使网卡的驱动层保持简单和快速。而<strong>QDisc实现了流量管理的高级功能</strong>，包括流量分类，<strong>优先级</strong>和流量整形（rate-shaping）。可以使用tc命令配置QDisc。</p><p>QDisc的队列长度由txqueuelen设置，和接收数据包的队列长度由内核参数<br>net.core.netdev_max_backlog控制所不同，txqueuelen是和网卡关联，可以用ifconfig命令修改当前的大小，如ifconfig eth0 txqueuelen 2000。</p><h3 id="一些内核tcp相关参数"><a href="#一些内核tcp相关参数" class="headerlink" title="一些内核tcp相关参数"></a>一些内核tcp相关参数</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">net.ipv4.tcp_orphan_retries</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">net.ipv4.tcp_fin_timeout</span> = <span class="hljs-number">2</span><br><span class="hljs-attr">net.ipv4.tcp_tw_reuse</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_tw_recycle</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_syncookies</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_keepalive_time</span> = <span class="hljs-number">600</span><br><span class="hljs-attr">net.ipv4.tcp_keepalive_intvl</span> = <span class="hljs-number">75</span><br><span class="hljs-attr">net.ipv4.tcp_keepalive_probes</span> = <span class="hljs-number">9</span><br><span class="hljs-attr">net.ipv4.ip_local_port_range</span> = <span class="hljs-number">2000</span> <span class="hljs-number">65000</span><br><span class="hljs-attr">net.ipv4.tcp_max_syn_backlog</span> = <span class="hljs-number">16384</span><br><span class="hljs-attr">net.ipv4.tcp_max_tw_buckets</span> = <span class="hljs-number">36000</span><br><span class="hljs-attr">net.ipv4.route.gc_timeout</span> = <span class="hljs-number">100</span><br><span class="hljs-attr">net.ipv4.tcp_syn_retries</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_synack_retries</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_max_orphans</span> = <span class="hljs-number">16384</span><br><span class="hljs-attr">net.ipv4.tcp_fastopen</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">net.ipv4.tcp_moderate_rcvbuf</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.tcp_adv_win_scale</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.core.somaxconn</span> = <span class="hljs-number">16384</span><br><span class="hljs-attr">net.core.netdev_max_backlog</span> = <span class="hljs-number">16384</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_mem</span>整个TCP层的内存消耗(单位为页)<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_wmem</span>tcp发送缓冲区大小，包含min、default、max三个值，内核会控制发送缓冲区在min-max之间动态调整，可根据实际业务场景和服务器配置适当调大。<br><br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.wmem_max</span> socket发送缓冲区的最大值，需要设置值大于等于 net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_wmem</span> 的 max值。<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_rmem</span>tcp接收缓冲区大小，包含min、default、max三个值，内核会控制接收缓冲区在min-max之间动态调整，可根据实际业务场景和服务器配置适当调大。<br><br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rmem_max</span>socket接收缓冲区的最大值，需要设置值大于等于 net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_rmem</span> 的 max值<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_orphan_retries</span>tcp四次挥手时，fin_wait1状态下，发送FIN报文的重试次数，<span class="hljs-number">0</span>相当于<span class="hljs-number">8</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_fin_timeout</span>表示套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-<span class="hljs-number">2</span>状态的时间，默认值是<span class="hljs-number">60</span>秒<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_reuse</span>表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认值为<span class="hljs-number">0</span>，表示关闭<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_recycle</span>表示开启TCP连接中TIME-WAIT sockets的快速回收。默认为<span class="hljs-number">0</span>，表示关闭。提示：reuse和recycle这两个参数是为防止生产环境下Web、Squid等业务服务器time_wait网络状态数量过多设置的<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_syncookies</span>表示开启SYN Cookies功能。当出现SYN等待队列溢出时，启用Cookies来处理，可防范少量SYN攻击，这个参数也可以不添加。默认值为<span class="hljs-number">1</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_time</span>表示当keepalive启用时，TCP发送keepalive消息的频度。默认是<span class="hljs-number">2</span>小时，建议改为<span class="hljs-number">10</span>分钟。默认为<span class="hljs-number">7200</span>秒<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_intvl</span>处于活动tcp连接的探测包发送间隔，方便tcp快速回收<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_probes</span>探测包重试次数<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_local_port_range</span>该选项用来设定允许系统打开的端口范围，即用于向外连接的端口范围<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span>表示SYN队列的长度，即半连接队列长度，默认为<span class="hljs-number">1024</span>，建议加大队列的长度为<span class="hljs-number">8192</span>或更多，这样可以容纳更多等待连接的网络连接数。该参数为服务器端用于记录那些尚未收到客户端确认信息的连接请求最大值<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_tw_buckets</span>表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数值，TIME_WAIT套接字将立刻被清除并打印警告信息。默认为<span class="hljs-number">180000</span>，对于Apache、Nginx等服务器来说可以将其调低一点，如改为<span class="hljs-number">5000</span>~<span class="hljs-number">30000</span>，不通业务的服务器也可以给大一点，比如LVS、Squid。此项参数可以控制TIME_WAIT套接字的最大数量，避免Squid服务器被大量的TIME_WAIT套接字拖死<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_synack_retries</span>参数的值决定了内核放弃连接之前发送SYN+ACK包的数量。默认值为<span class="hljs-number">5</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_orphans</span>用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数值，孤立连接将被立即被复位并打印出警告信息。这个限制只有为了防止简单的DoS攻击。不能过分依靠这个限制甚至认为减少这个值，更多的情况是增加这个值。默认值<span class="hljs-number">8192</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_fastopen</span>起到tcp加快通信的作用，<span class="hljs-number">0</span>为关闭，<span class="hljs-number">1</span>为客户端时使用，<span class="hljs-number">2</span>为服务端时使用，<span class="hljs-number">3</span>为都使用<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_moderate_rcvbuf</span>自动调整内核网络缓存模式（默认打开）<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_window_scaling</span> 扩充滑动窗口，当网络传输比较流畅时，TCP会增加滑动窗口大小，以便加速网络传输（默认打开）<br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_adv_win_scale</span>用于调整tcp滑动窗口的，接收窗口与应用缓存<br><br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.somaxconn</span>同时发起的TCP的最大连接数，即全连接队列长度，在高并发请求中，可能会导致链接超时或重传，一般结合并发请求数来调大此值。默认值是<span class="hljs-number">128</span><br><br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.netdev_max_backlog</span>表示当每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包最大数。默认值为<span class="hljs-number">1000</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_syn_retries</span>表示在内核放弃建立连接之前发送SYN包的数量。默认值为<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BBR算法</title>
    <link href="/2022/09/11/BBR%E7%AE%97%E6%B3%95/"/>
    <url>/2022/09/11/BBR%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>BBR背后是一种自主的拥塞控制机制，与此相反，传统的拥塞控制算法则是相对盲目的基于事件的被动反馈。这两者之间的差异决定了它们在性能上的表现。</p><h3 id="浅显的道理"><a href="#浅显的道理" class="headerlink" title="浅显的道理"></a>浅显的道理</h3><p>先从显而易见的视角来解释一下。 如果你了解到的信息越多，你就越不容易被欺骗，相反，如果你被告知不允许了解任何信息，那么你唯一可以依靠的只有信任本身，如果这点不能保障，你就很容易被欺骗。</p><h3 id="BBR之前的拥塞控制算法"><a href="#BBR之前的拥塞控制算法" class="headerlink" title="BBR之前的拥塞控制算法"></a>BBR之前的拥塞控制算法</h3><p>所有传统拥塞控制算法大体思路基本一致： 针对“ACK的到来”试探性地增加发送量，针对“测量得到的RTT”，用此RTT估算出一个大致的间隔，即RTO，超过RTO会认为数据包丢失，重传之，将发送窗口减少到1。 在以上两点之间不断循环，这构成了一个典型的反馈系统，为保证公平性，AIMD是必然的，这“几乎”就是BBR算法之前TCP拥塞控制的全部了。</p><p>不管采用任何手段检测到了丢包，一定要大幅度降低数据的发送量，执行乘性减少！这套机制非常容易使TCP连接受到欺骗！</p><p>如果一次丢包是因为链路噪声的原因，比如信道信号干扰损耗导致的，而不是由于被路由器交换机丢弃的，执行乘性减无疑是自废武功啊！但传统拥塞控制算法对于区分这个场景无能为力！造成这个局面的根源是什么？ 信息不足！ </p><h3 id="BBR核心逻辑"><a href="#BBR核心逻辑" class="headerlink" title="BBR核心逻辑"></a>BBR核心逻辑</h3><p>BBR采用了不同的状态机，取消了异常状态。注意，取消异常状态是因为BBR已经不需要异常状态，它根本就不Care丢包。BBR的逻辑里，它会实时地检测当前的传输带宽，从而据此计算接下来的发送速率，这几乎就是BBR的全部。</p><p>BBR带宽测量：一个时间段内的RTT最小值替代了瞬时值(或者某种平均值…)</p><p>传输带宽采用连续10个的采样周期作为窗口大小，而最小RTT则采用10秒的时间作为窗口大小。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快手C++开发一面</title>
    <link href="/2022/09/09/%E5%BF%AB%E6%89%8BC++%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/"/>
    <url>/2022/09/09/%E5%BF%AB%E6%89%8BC++%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1、四级页表"><a href="#1、四级页表" class="headerlink" title="1、四级页表"></a>1、四级页表</h3><ul><li>PGD: Page Global Directory (页目录)</li><li>PUD: Page Upper Directory (页目录)</li><li>PMD: Page Middle Directory (页目录)</li><li>PTE: Page Table Entry (页表项)</li></ul><h3 id="2、page-fault时机"><a href="#2、page-fault时机" class="headerlink" title="2、page fault时机"></a>2、page fault时机</h3><p>在Linux中，进程和内核都是通过页表PTE访问一个物理页面的，如果无法访问到正确的地址，将产生page fault（缺页异常）。由于造成内核空间和用户空间的page fault的原因不尽相同，因此其处理流程也有所区别（以x86为例，代码位于”/arch/x86/x86-mm/fault.c”）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">void</span> __do_page_fault(...)<br>&#123;<br>    <span class="hljs-keyword">if</span> (unlikely(fault_in_kernel_space(address)))<br>        do_kern_addr_fault(regs, hw_error_code, address);<br>    <span class="hljs-keyword">else</span><br>        do_user_addr_fault(regs, hw_error_code, address);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，访问的内存地址必须是合法的，所谓「合法」，就是该地址一定是落在进程的某个VMA区间内。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> <span class="hljs-title">vma</span> =</span> find_vma(mm, address);<br><br><span class="hljs-keyword">if</span> (unlikely(!vma)) &#123;<br>    bad_area(regs, hw_error_code, address);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (likely(vma-&gt;vm_start &lt;= address))<br>    <span class="hljs-keyword">goto</span> good_area;<br></code></pre></td></tr></table></figure><p>地址落在进程的地址空间内，但对地址的访问权限不对（比如试图写入一个readonly的区域），也是非法的。访问了非法的地址，或者非法地访问了地址，就不是page fault那么简单了，将进一步上升到segmentation fault。</p><p>如果地址合法，权限也正确，那么还得分两种情况来讨论。</p><p><strong>第一种情况</strong>是PTE不存在，这会出现在：</p><ul><li>对于anonymous page（匿名页），用户空间使用malloc()进行内存申请时（对应底层的实现是mmap或者brk），内核并不会立刻为其分配物理内存，而只是为请求的进程的rbtree管理的vma信息中记录（添加或更改）诸如内存范围和标志之类的信息。只有当内存被真正使用，触发page fault，才会真正分配物理页面和对应的页表项，即demand alloction，对应的函数实现是**do_anonymous_page()**。通过mmap映射建立的heap和stack等内存区域，在初始未使用时，也适用于这样的规则。</li></ul><ul><li>对于<a href="https://zhuanlan.zhihu.com/p/68071761">page cache</a>（CPU如果要访问外部磁盘上的文件，需要首先将这些文件的内容拷贝到内存中，由于硬件的限制，从磁盘到内存的数据传输速度是很慢的，如果现在物理内存有空余，干嘛不用这些空闲内存来缓存一些磁盘的文件内容呢，这部分用作<strong>缓存磁盘文件</strong>的内存就叫做page cache）， 在发生内存回收后，部分text(code)段的页面会被discard，部分data段的页面会被writeback，之后再次访问这些页面，也将出现page fault。此时，需要从外部存储介质中，将页面内容调回内存，即demand paging，对应的函数实现是**do_fault()**。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">vm_fault_t</span> <span class="hljs-title">handle_pte_fault</span><span class="hljs-params">(struct vm_fault *vmf)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!vmf-&gt;pte) &#123;<br>        <span class="hljs-keyword">if</span> (vma_is_anonymous(vmf-&gt;vma))<br>            <span class="hljs-keyword">return</span> do_anonymous_page(vmf);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> do_fault(vmf);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种情况</strong>是PTE存在，但其中的”P(resent)”位为0，说明这是一个之前被swap out出去的anonymous page。现在PTE里存储的不是物理页面的编号PPN，而是外部swap area中slot的编号swp_entry_t，需要通过**do_swap_page()**，执行swap in操作将页面的内容拷贝回内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* orig_pte是指发生page fault时的PTE */</span><br><span class="hljs-keyword">if</span> (!pte_present(vmf-&gt;orig_pte))<br>    <span class="hljs-keyword">return</span> do_swap_page(vmf);<br></code></pre></td></tr></table></figure><p>发生page fault时，如果目标页面驻留在外部存储器，那么需要开销较大的I/O操作，这种page fault被称为”<strong>major</strong>“的。而如果目标页面就在内存中（比如<a href="https://zhuanlan.zhihu.com/p/98793444">swap cache</a>），只是缺少一个对该页面的引用而已，这种page fault不需要重新分配内存页面，代价较小，因此被称为”<strong>minor</strong>“的。</p><p>还是那个<a href="https://zhuanlan.zhihu.com/p/98793444">图书馆借书的例子</a>，前台相当于内存，书库相当于磁盘，从前台直接取走就是”minor page fault”，比如书到期了你还没有看完，可以在前台办完还书手续后马上再借（前提是这本书没有被其他读者预约），付出的代价就是多一次借书手续而已。</p><p>而如果你还了两个月再去借这本书，书已经被管理员上架了，你就需要自己去书架上按照类别寻找这本书，花费的时间自然较多，这就是”major page fault”。</p><h3 id="3、只要是非0地址那么用户态都可以使用吗"><a href="#3、只要是非0地址那么用户态都可以使用吗" class="headerlink" title="3、只要是非0地址那么用户态都可以使用吗"></a>3、只要是非0地址那么用户态都可以使用吗</h3><p>io空间、权限(只读段)</p><h3 id="4、共享内存是怎么实现的"><a href="#4、共享内存是怎么实现的" class="headerlink" title="4、共享内存是怎么实现的"></a>4、共享内存是怎么实现的</h3><p>进程页表转换到相同的物理地址</p><h3 id="5、实现一个内存池，保证每次调用分配内存的时候一定可用"><a href="#5、实现一个内存池，保证每次调用分配内存的时候一定可用" class="headerlink" title="5、实现一个内存池，保证每次调用分配内存的时候一定可用"></a>5、实现一个内存池，保证每次调用分配内存的时候一定可用</h3><h3 id="6、文件页和匿名页"><a href="#6、文件页和匿名页" class="headerlink" title="6、文件页和匿名页"></a>6、文件页和匿名页</h3><p>Linux中有后备文件支持的页称为文件页，如属于进程的代码段、数据段的页，内存回收的时候这些页面只需要做脏页的同步即可（干净的页面可以直接丢弃掉）。反之为匿名页，如进程的堆栈使用的页，内存回收的时候这些页面不能简单的丢弃掉，需要交换到交换分区或交换文件。</p><p>下面分析一个程序段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE (100*1024*1024)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 伪代码</span><br>system(<span class="hljs-string">&quot;free -m&quot;</span>);<br><br><span class="hljs-comment">// 匿名映射: MAP_ANONYMOUS, fd=-1</span><br>addr = mmap(<span class="hljs-literal">NULL</span>, SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>system(<span class="hljs-string">&quot;free -m&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++) val = addr[i];<br>system(<span class="hljs-string">&quot;free -m&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++) addr[i] = val;<br>system(<span class="hljs-string">&quot;free -m&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次提示执行free命令的时候，我们还没有开始通过mmap分配内存，此时free命令输出作为参考。</p><p>第二次提示执行free命令的时候，我们已经通过mmap分配了100M的内存，此时发现free命令输出内存消耗基本没有变化。</p><p>第三次提示执行free命令的时候，我们对于分配的匿名页面进行了读操作，此时发现free命令输出内存消耗页基本没有变化, <strong>这基本上会颠覆我们的认知</strong>。</p><p>第四次提示执行free命令的时候，我们对于分配的匿名页面进行了写操作，此时发现free命令输出内存消耗大概为100M。</p><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><h5 id="1、mmap的内存消耗"><a href="#1、mmap的内存消耗" class="headerlink" title="1、mmap的内存消耗"></a>1、mmap的内存消耗</h5><p>mmap申请匿名页的时候，只是申请了虚拟内存（通过vm_area_struct结构来描述，如描述虚拟内存区域的地址范围、访问权限等，以下简称vma），实际的物理内存并没有申请（除了用于管理虚拟内存区域的vma等结构内存的申请），当前虚拟内存和物理内存并没有建立页表映射关系，而真正的申请的匿名页所对应的物理页在实际访问的时候按需分配获得，所以此时我们看不到内存的消耗情况。</p><h5 id="2、第一次读匿名页的内存消耗"><a href="#2、第一次读匿名页的内存消耗" class="headerlink" title="2、第一次读匿名页的内存消耗"></a>2、第一次读匿名页的内存消耗</h5><p>通过mmap申请完虚拟内存之后，进程就可以按照之前申请vma的访问权限进行访问，第一发生读访问，这个时候由于虚拟内存和物理内存并没有建立页表映射关系，通过虚拟地址并不能查找到物理内存，所以会发生处理器的异常，最终分析是因为数据访问异常导致，就由处理器架构相关的代码进入了我们通用的缺页异常处理例程中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;mm/memory.c&quot;</span><br><br>处理器架构相关异常处理代码<br>-&gt; handle_mm_fault<br>    -&gt; __handle_mm_fault<br>        -&gt; handle_pte_fault<br>            -&gt;  <span class="hljs-keyword">if</span> (!vmf-&gt;pte) &#123;   ------------------- <span class="hljs-number">1</span><br>                     <span class="hljs-keyword">if</span> (vma_is_anonymous(vmf-&gt;vma))  ------------------- <span class="hljs-number">2</span><br>                             <span class="hljs-keyword">return</span> do_anonymous_page(vmf);   ------------------- <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>缺页异常进入handle_pte_fault后，在1标签代码处，来判断访问的虚拟内存页的页表项是否为空，为空说明这个这个虚拟页没有和物理页建立映射关系。然后在2标签代码处判断是否为匿名页缺页异常（实际上是判断是否为私有的匿名页，当前当前示例代码场景申请的为私有匿名页面**即MAP_PRIVATE(创建CopyOnWrite的私有匿名页)**）。在3标签代码处，进行真正的私有匿名页缺页异常处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">do_anonymous_page<br>-&gt;pte_alloc(vma-&gt;vm_mm, vmf-&gt;pmd)   ------------------- <span class="hljs-number">1</span><br>-&gt;<span class="hljs-comment">/* Use the zero-page for reads */</span><br><span class="hljs-keyword">if</span> (!(vmf-&gt;flags &amp; FAULT_FLAG_WRITE) &amp;&amp;     ------------------- <span class="hljs-number">2</span><br>                !mm_forbids_zeropage(vma-&gt;vm_mm)) &#123; ------------------- <span class="hljs-number">3</span><br>        entry = pte_mkspecial(pfn_pte(my_zero_pfn(vmf-&gt;address),<br>                                        vma-&gt;vm_page_prot));  ------------------- <span class="hljs-number">4</span><br>        vmf-&gt;pte = pte_offset_map_lock(vma-&gt;vm_mm, vmf-&gt;pmd,<br>                        vmf-&gt;address, &amp;vmf-&gt;ptl);  ------------------- <span class="hljs-number">5</span><br>      <br>         ...<br>        <span class="hljs-keyword">goto</span> setpte;<br>&#125;<br>-&gt;  page = alloc_zeroed_user_highpage_movable(vma, vmf-&gt;address); ------------------- <span class="hljs-number">6</span><br>-&gt; entry = mk_pte(page, vma-&gt;vm_page_prot);  ------------------- <span class="hljs-number">7</span><br> entry = pte_sw_mkyoung(entry); ------------------- <span class="hljs-number">8</span><br> <span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; VM_WRITE)<br>         entry = pte_mkwrite(pte_mkdirty(entry));  ------------------- <span class="hljs-number">9</span><br><br> vmf-&gt;pte = pte_offset_map_lock(vma-&gt;vm_mm, vmf-&gt;pmd, vmf-&gt;address,<br>                 &amp;vmf-&gt;ptl); ------------------- <span class="hljs-number">10</span><br>                 <br> -&gt;set_pte_at(vma-&gt;vm_mm, vmf-&gt;address, vmf-&gt;pte, entry);  ------------------- <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>1标签处：判断虚拟地址对应的pmd表项是否为空，为空来分配直接页表设置到pmd表项中。</p><p>2标签处：判断是否是进行读访问。</p><p>3标签处：判断是否没有禁止0页。</p><p>4标签处：就是对于没有禁止0页的匿名页读访问设置页表，这里通过0页的页帧号和mmap映射时指定的访问权限组合页表项的值。</p><p>5标签处：通过发生缺页的虚拟地址来计算出页表项的地址保存在 vmf-&gt;pte。</p><p>11标签处：将4标签初组合出的页表项的值写入到5标签初计算出的页表项中。</p><p>以上分析可知：<strong>对于私有的匿名页，第一次读访问的时候都会发生缺页异常，然后通过页表映射0页，这个0页没有什么特殊之处，只不过它是在系统启动过程中初始化好的一块内容全为0的页面，这样做可以为进程分配了内存只进行读访问节省大量物理内存。</strong></p><h5 id="3、第一次写匿名页的内存消耗"><a href="#3、第一次写匿名页的内存消耗" class="headerlink" title="3、第一次写匿名页的内存消耗"></a>3、第一次写匿名页的内存消耗</h5><p>大家可以将示例代码中，读访问屏蔽掉只进行写访问，观察内存消耗。</p><p>这个时候发生缺页异常时，不会在走2 3 4 5 便签处代码，而在6处分配了一个物理页面，在7 8 9组合页表项的值， 10处计算出页表项的地址，最后把组合的值设置到页表项中。</p><p>需要注意第9处，如果是<strong>写访问会设置页表项的可写标志位</strong>。</p><p>以上分析可知：对于私有的匿名页，第一次写访问的时候都会发生缺页异常，会真正分配一个物理页面，然后将虚拟页面通过页面映射到物理页面，所以我们能观察到写之后发生了大量内存消耗。</p><h5 id="4、第一次读然后写匿名页的内存消耗"><a href="#4、第一次读然后写匿名页的内存消耗" class="headerlink" title="4、第一次读然后写匿名页的内存消耗"></a>4、第一次读然后写匿名页的内存消耗</h5><p>这种场景就是示例代码中所做的实验，可以看到读的时候基本上没有内存消耗，写的时候发生了大量内存消耗。</p><p>关于第一次读，上面已经做过解释，下面主要看读完之后的页面发生写访问的情况。</p><p>实际上，对于一个私有的内存映射，在mmap的时候为页表映射准备访问权限的时候并不是给予所有的权限，而是<strong>把可写属性去掉</strong> 了。</p><p>我们可以从源代码找到答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;mm/mmap.c&quot;</span><br><br>do_mmap<br>-&gt;mmap_region<br>    -&gt;vma_set_page_prot(vma)<br>        -&gt;vm_page_prot = vm_pgprot_modify(vma-&gt;vm_page_prot, vm_flags);  --------<span class="hljs-number">-1</span><br>            -&gt;pgprot_modify(oldprot, vm_get_page_prot(vm_flags))<br>        -&gt;WRITE_ONCE(vma-&gt;vm_page_prot, vm_page_prot);  --------------<span class="hljs-number">-2</span><br>        <br>        <br> <span class="hljs-comment">/* description of effects of mapping type and prot in current implementation.</span><br><span class="hljs-comment">  * this is due to the limited x86 page protection hardware.  The expected</span><br><span class="hljs-comment">  * behavior is in parens:</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * map_type     prot</span><br><span class="hljs-comment">  *              PROT_NONE       PROT_READ       PROT_WRITE      PROT_EXEC</span><br><span class="hljs-comment">  * MAP_SHARED   r: (no) no      r: (yes) yes    r: (no) yes     r: (no) yes</span><br><span class="hljs-comment">  *              w: (no) no      w: (no) no      w: (yes) yes    w: (no) no</span><br><span class="hljs-comment">  *              x: (no) no      x: (no) yes     x: (no) yes     x: (yes) yes</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * MAP_PRIVATE  r: (no) no      r: (yes) yes    r: (no) yes     r: (no) yes</span><br><span class="hljs-comment">  *              w: (no) no      w: (no) no      w: (copy) copy  w: (no) no</span><br><span class="hljs-comment">  *              x: (no) no      x: (no) yes     x: (no) yes     x: (yes) yes</span><br><span class="hljs-comment">  */</span><br>-&gt;vm_get_page_prot   <br>  <span class="hljs-keyword">pgprot_t</span> protection_map[<span class="hljs-number">16</span>] __ro_after_init = &#123;<br>        __P000, __P001, __P010, __P011, __P100, __P101, __P110, __P111,<br>        __S000, __S001, __S010, __S011, __S100, __S101, __S110, __S111<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于__Pxxx， 最后一个x表示vma属性是否可读，倒数第二个x表示vma属性是否可写，P后面的x表示是否可执行。</p><p>1标签处根据mmap传递的访问权限来构造最终的访问权限标识。</p><p>2标签处将构造好的访问权限标识记录到vma-&gt;vm_page_prot中，供缺页异常设置页表使用。</p><p>注释中已经做了详细的解释，具体页表属性如何表示由各自的处理器架构相关代码来做（eg: 对于x86架构 #define __P111 PAGE_COPY_EXEC），我们只需要知道：<strong>无论我们想让vma具备那些属性组合，都会屏蔽掉写属性</strong>，具体可以查看相关的处理器架构实现。</p><p>所以，再次回到缺页异常处理代码中。在2中的4标签处，使用mmap设置好的页表访问权限设置页表属性，当前场景我们知道，mmap中指定为私有的可读可写属性，而页表中只是<strong>设置为了只读属性</strong>。</p><p><strong>触发写时复制：</strong>读访问将虚拟页以只读的方式映射到了0页，当再次发生写操作时，就会再次触发数据访问异常，最终进入缺页异常处理例程中。</p><p>下面给出调用链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;mm/memory.c&quot;</span><br><br>handle_pte_fault<br>-&gt;<span class="hljs-keyword">if</span> (vmf-&gt;flags &amp; FAULT_FLAG_WRITE) &#123;  ----------<span class="hljs-number">-1</span><br>        <span class="hljs-keyword">if</span> (!pte_write(entry)) ----------<span class="hljs-number">-2</span><br>                <span class="hljs-keyword">return</span> do_wp_page(vmf); ----------<span class="hljs-number">-3</span><br></code></pre></td></tr></table></figure><p>可以看到最终也是在handle_pte_fault中处理：在1标签处判断是否为写访问。在2标签处判断页表项的属性是否是只读。在3标签处进行实际的写时复制处理。</p><p>以上分析可知：发生写访问操作时，如果vma可写，但是页表属性标识不可写（只读），会发生写时复制缺页异常，对于当前场景的0页的写访问就是如此，在do_wp_page中会重新分配物理页面映射到虚拟页面，然后页表设置为可写属性，就完成了缺页处理。</p><h5 id="总结：【懒惰原则】"><a href="#总结：【懒惰原则】" class="headerlink" title="总结：【懒惰原则】"></a>总结：【懒惰原则】</h5><p>1）mmap分配私有匿名内存时，会设置vma的vm_page_prot成员，去除掉页表的写访问标识。</p><p>2）第一次读匿名页时，对于可读可写的vma，虚拟页会以只读的方式映射到0页。</p><p>3）第一次写匿名页时，对于可读可写的vma，会申请物理页面，虚拟页以可读可写的方式映射到此物理页。</p><p>4）第一次读匿名页后，然后写匿名页，先只读方式映射到0页，然后发生写时复制，分配物理页，虚拟页以可读可写的方式映射到此物理页。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IEG游戏技术运营-后台开发二面</title>
    <link href="/2022/09/07/IEG%E6%B8%B8%E6%88%8F%E6%8A%80%E6%9C%AF%E8%BF%90%E8%90%A5-%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/"/>
    <url>/2022/09/07/IEG%E6%B8%B8%E6%88%8F%E6%8A%80%E6%9C%AF%E8%BF%90%E8%90%A5-%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>1、不支持事务的数据库</p><p>MyISAM引擎的数据库</p><p>2、etcd分布式锁的原理</p><p>利用租约在etcd集群中创建一个key,这个key有两种形态,存在和不存在,而这两种形态就是互斥量</p><p>如果这个key不存在,那么线程创建key,成功则获取到锁</p><p>3、redis高并发集群的部署方式</p><p>1.主从复制；2.Sentinel哨兵机制；3.cluster集群。</p><p>第一种集群方式，部署简单，分为一主一从，或一主N从。数据分布是在所有节点通过replication复制全量的数据。如果主节点挂掉，需要手动把其中的一个从节点设置为主节点。</p><p>第二种集群方式：稍微比第一种复杂点，引入哨兵，此集群的原理还是主从复制。但是此集群中必须至少3个sentinel节点，来对一主两从的节点进行监控。因为sentinel里面存在一个Leader选举机制。必须是单数。此时sentinel(哨兵)其实就是一个Redis的特殊实例。此时的三个sentinel实例又组成了一个集群，两两互相监控，且这三个sentinel实例又分别都监控了所有的Redis节点。当一个主节点（Master）挂掉时，此集群方式会通过配置自动由对应的从节点（slave）变为主节点。如果一个主节点下有N个从节点，则进行选举机制来确定哪一个从节点变为主节点。此时所有节点的数据也都是全量的。</p><p>第三种集群方式：此集群是Redis从3.0版本开始支持，自带的一种集群方式。它的原理使用了分布的思想，其数据会均分到所有的主节点上。且有一个虚拟槽的概念。此部署方式，当数据量过大时，会让服务器均摊压力。在各个主节点上分配的数据都不是全量的。是分片存储的。目前此种部署方式在生产环境的较多。</p><p>4、什么时候不走索引</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上不计算，范围之后全失效；<br>LIKE百分写最右，覆盖索引不写 *；<br>不等空值还有or，索引失效要少用；<br>字符单引不可丢，SQL高级也不难 ；<br></code></pre></td></tr></table></figure><ul><li>在索引列上进行运算或使用函数会使索引失效</li><li>字符和整型隐式类型转换(等价于上一条，隐式转换等于使用了函数)</li><li>前导模糊查询不会使用索引</li><li>联合索引不满足最左匹配原则</li><li>否定条件不走索引(如!=、null、not exist、not in、not like)</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试反问环节</title>
    <link href="/2022/08/31/%E9%9D%A2%E8%AF%95%E5%8F%8D%E9%97%AE%E7%8E%AF%E8%8A%82/"/>
    <url>/2022/08/31/%E9%9D%A2%E8%AF%95%E5%8F%8D%E9%97%AE%E7%8E%AF%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h3 id="1、一面问技术"><a href="#1、一面问技术" class="headerlink" title="1、一面问技术"></a>1、一面问技术</h3><h3 id="2、二面问业务"><a href="#2、二面问业务" class="headerlink" title="2、二面问业务"></a>2、二面问业务</h3>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>screen和vim</title>
    <link href="/2022/08/20/screen%E5%92%8Cvim/"/>
    <url>/2022/08/20/screen%E5%92%8Cvim/</url>
    
    <content type="html"><![CDATA[<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><ul><li>配置文件</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-keyword">Set</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">encoding</span> <span class="hljs-keyword">using</span> utf8<br>defutf8 <span class="hljs-keyword">on</span><br><br><br>## 解决中文乱码,这个要按需配置<br>defencoding utf8<br><span class="hljs-keyword">encoding</span> utf8 utf8<br> <br><br>#兼容shell 使得.bashrc .profile /etc/profile等里面的别名等设置生效<br>shell -$SHELL<br><br><span class="hljs-meta">#set the startup message</span><br>startup_message <span class="hljs-keyword">off</span><br>term linux<br><br>## 解决无法滚动<br>termcapinfo xterm|xterms|xs ti@:te=\E[<span class="hljs-number">2</span>J<br> <br># 屏幕缓冲区行数<br>defscrollback <span class="hljs-number">10000</span><br> <br># 下标签设置<br>hardstatus <span class="hljs-keyword">on</span><br>caption <span class="hljs-keyword">always</span> &quot;%&#123;= kw&#125;%-w%&#123;= kG&#125;%&#123;+b&#125;[%n %t]%&#123;-b&#125;%&#123;= kw&#125;%+w %=%d %M %0c %&#123;g&#125;%H%&#123;-&#125;&quot;<br> <br>#关闭闪屏<br>vbell <span class="hljs-keyword">off</span><br> <br><span class="hljs-meta">#Keboard binding</span><br># bind Alt+z <span class="hljs-keyword">to</span> <span class="hljs-keyword">move</span> <span class="hljs-keyword">to</span> previous <span class="hljs-keyword">window</span><br>bindkey ^[z prev<br># bind Alt+x <span class="hljs-keyword">to</span> <span class="hljs-keyword">move</span> <span class="hljs-keyword">to</span> next <span class="hljs-keyword">window</span><br>bindkey ^[x next<br><br># bind Alt`~= <span class="hljs-keyword">to</span> screen0~<span class="hljs-number">12</span><br>bindkey &quot;^[`&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">0</span><br>bindkey &quot;^[1&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">1</span><br>bindkey &quot;^[2&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">2</span><br>bindkey &quot;^[3&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">3</span><br>bindkey &quot;^[4&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">4</span><br>bindkey &quot;^[5&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">5</span><br>bindkey &quot;^[6&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">6</span><br>bindkey &quot;^[7&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">7</span><br>bindkey &quot;^[8&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">8</span><br>bindkey &quot;^[9&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">9</span><br>bindkey &quot;^[0&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">10</span><br>bindkey &quot;^[-&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">11</span><br>bindkey &quot;^[=&quot; <span class="hljs-keyword">select</span> <span class="hljs-number">12</span><br># bind F5 <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> a <span class="hljs-built_in">new</span> screen<br>bindkey -k k5 screen<br># bind F6 <span class="hljs-keyword">to</span> detach screen <span class="hljs-keyword">session</span> (<span class="hljs-keyword">to</span> background)<br>bindkey -k k6 detach<br># bind F7 <span class="hljs-keyword">to</span> kill <span class="hljs-keyword">current</span> screen <span class="hljs-keyword">window</span><br>bindkey -k k7 kill<br># bind F8 <span class="hljs-keyword">to</span> <span class="hljs-keyword">rename</span> <span class="hljs-keyword">current</span> screen <span class="hljs-keyword">window</span><br>bindkey -k k8 title<br></code></pre></td></tr></table></figure><p>screen -S xx：创建</p><p>screen -r xx：恢复</p><p>screen -ls：列表</p><p>ctrl a ctrl d：detach</p><p>exit：退出窗口</p><p>screen -S xx -X quit：关闭</p><p>screen -x xx：共享screen</p><p>ctrl a ctrl c：创建窗口</p><p>ctrl a shift s：分屏</p><p>ctrl a tab：切换分屏</p><p>ctrl a ctrl a：上一个窗口</p><p>ctrl a num：num号窗口</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ul><li>配置文件</li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br> <br><span class="hljs-string">&quot; 显示相关  </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;set shortmess=atI   &quot; 启动的时候不显示那个援助乌干达儿童的提示  </span><br><span class="hljs-string">&quot;winpos 5 5          &quot; 设定窗口位置  </span><br><span class="hljs-string">&quot;set lines=40 columns=155    &quot; 设定窗口大小  </span><br><span class="hljs-string">&quot;set nu              &quot; 显示行号  </span><br><span class="hljs-string">set go=             &quot; 不要图形按钮  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;color asmanian2     &quot; 设置背景主题  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set guifont=Courier_New:h10:cANSI   &quot; 设置字体  </span><br><span class="hljs-string">&quot;syntax on           &quot; 语法高亮  </span><br><span class="hljs-string">autocmd InsertLeave * se nocul  &quot; 用浅色高亮当前行  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">autocmd InsertEnter * se cul    &quot; 用浅色高亮当前行  </span><br><span class="hljs-string">&quot;set ruler           &quot; 显示标尺  </span><br><span class="hljs-string">set showcmd         &quot; 输入的命令显示出来，看的清楚些  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;set cmdheight=1     &quot; 命令行（在状态行下）的高度，设置为1  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;set whichwrap+=&lt;,&gt;,h,l   &quot; 允许backspace和光标键跨越行边界(不建议)  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;set scrolloff=3     &quot; 光标移动到buffer的顶部和底部时保持3行距离  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set novisualbell    &quot; 不要闪烁(不明白)  </span><br><span class="hljs-string">set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\&quot;%d/%m/%y\ -\ %H:%M\&quot;)&#125;   &quot;状态行显示的内容  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set laststatus=1    &quot; 启动显示状态行(1),总是显示状态行(2)  </span><br><span class="hljs-string">set foldenable      &quot; 允许折叠  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set foldmethod=manual   &quot; 手动折叠  </span><br><span class="hljs-string">&quot;set background=dark &quot;背景使用黑色 </span><br><span class="hljs-string">set nocompatible  &quot;去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot; 显示中文帮助</span><br><span class="hljs-string">if version &gt;= 603</span><br><span class="hljs-string">    set helplang=cn</span><br><span class="hljs-string">    set encoding=utf-8</span><br><span class="hljs-string">endif</span><br><span class="hljs-string">&quot; 设置配色方案</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;colorscheme murphy</span><br><span class="hljs-string">&quot;字体 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;if (has(&quot;gui_running&quot;)) </span><br><span class="hljs-string">&quot;   set guifont=Bitstream\ Vera\ Sans\ Mono\ 10 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;endif </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span><br><span class="hljs-string">set termencoding=utf-8</span><br><span class="hljs-string">set encoding=utf-8</span><br><span class="hljs-string">set fileencodings=ucs-bom,utf-8,cp936</span><br><span class="hljs-string">set fileencoding=utf-8</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>新文件标题<span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;</span>:call SetTitle()<span class="hljs-string">&quot; </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;定义函数SetTitle，自动插入文件头 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">func SetTitle() </span><br><span class="hljs-string"> </span><br><span class="hljs-string">    &quot;</span>如果文件类型为.sh文件 <br>    <span class="hljs-keyword">if</span> &amp;filetype == <span class="hljs-string">&#x27;sh&#x27;</span> <br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\#########################################################################&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.expand(<span class="hljs-string">&quot;%&quot;</span>)) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: Gao Yusheng&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: gys1407@163.com&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.strftime(<span class="hljs-string">&quot;%c&quot;</span>)) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#########################################################################&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/bin/bash&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>) <br> <br>    <span class="hljs-keyword">else</span> <br> <br>        call setline(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;/*************************************************************************&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;    &gt; File Name: &quot;</span>.expand(<span class="hljs-string">&quot;%&quot;</span>)) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;    &gt; Author: Gao Yusheng&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;    &gt; Mail: gys1407@163.com &quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;    &gt; Created Time: &quot;</span>.strftime(<span class="hljs-string">&quot;%c&quot;</span>)) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot; ************************************************************************/&quot;</span>) <br> <br>        call append(line(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;&quot;</span>)<br> <br>    endif<br><br> <br>    <span class="hljs-string">&quot;新建文件后，自动定位到文件末尾</span><br><span class="hljs-string">    autocmd BufNewFile * normal G</span><br><span class="hljs-string">endfunc </span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;键盘命令</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> </span><br><span class="hljs-string"> </span><br><span class="hljs-string">nmap &lt;leader&gt;w :w!&lt;cr&gt;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">nmap &lt;leader&gt;f :find&lt;cr&gt;</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot; 映射全选+复制 ctrl+a</span><br><span class="hljs-string">map &lt;C-A&gt; ggVGY</span><br><span class="hljs-string">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span><br><span class="hljs-string">map &lt;F12&gt; gg=G</span><br><span class="hljs-string">&quot; 选中状态下 Ctrl+c 复制</span><br><span class="hljs-string"> </span><br><span class="hljs-string">vmap &lt;C-c&gt; &quot;+y</span><br><span class="hljs-string">&quot;去空行  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">nnoremap &lt;F2&gt; :g/^\s*$/d&lt;CR&gt; </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;比较文件  </span><br><span class="hljs-string">nnoremap &lt;C-F2&gt; :vert diffsplit </span><br><span class="hljs-string">&quot;新建标签  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">map &lt;M-F2&gt; :tabnew&lt;CR&gt;  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;列出当前目录文件  </span><br><span class="hljs-string">map &lt;F3&gt; :tabnew .&lt;CR&gt;  </span><br><span class="hljs-string">&quot;打开树状文件目录  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">map &lt;C-F3&gt; \be  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;C，C++ 按F5编译运行</span><br><span class="hljs-string">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span><br><span class="hljs-string">func! CompileRunGcc()</span><br><span class="hljs-string">    exec &quot;w&quot;</span><br><span class="hljs-string">    if &amp;filetype == &#x27;c&#x27;</span><br><span class="hljs-string">        exec &quot;!g++ % -o %&lt;&quot;</span><br><span class="hljs-string">        exec &quot;! ./%&lt;&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;cpp&#x27;</span><br><span class="hljs-string">        exec &quot;!g++ % -o %&lt;&quot;</span><br><span class="hljs-string">        exec &quot;! ./%&lt;&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;java&#x27; </span><br><span class="hljs-string">        exec &quot;!javac %&quot; </span><br><span class="hljs-string">        exec &quot;!java %&lt;&quot;</span><br><span class="hljs-string">    elseif &amp;filetype == &#x27;sh&#x27;</span><br><span class="hljs-string">        :!./%</span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">endfunc</span><br><span class="hljs-string">&quot;C,C++的调试</span><br><span class="hljs-string"> </span><br><span class="hljs-string">map &lt;F8&gt; :call Rungdb()&lt;CR&gt;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">func! Rungdb()</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    exec &quot;w&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    exec &quot;!g++ % -g -o %&lt;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    exec &quot;!gdb ./%&lt;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">endfunc</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;实用设置</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot; 设置当文件被改动时自动载入</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set autoread</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> quickfix模式<br>autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;<br><span class="hljs-string">&quot;代码补全 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set completeopt=preview,menu </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>允许插件  <br>filetype plugin on<br><span class="hljs-string">&quot;共享剪贴板  </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set clipboard+=unnamed </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>从不备份  <br>set nobackup<br><span class="hljs-string">&quot;make 运行</span><br><span class="hljs-string"> </span><br><span class="hljs-string">:set makeprg=g++\ -Wall\ \ %</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>自动保存<br>set autowrite<br>set ruler                   <span class="hljs-string">&quot; 打开状态栏标尺</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set cursorline              &quot;</span> 突出显示当前行<br>set magic                   <span class="hljs-string">&quot; 设置魔术</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set guioptions-=T           &quot;</span> 隐藏工具栏<br>set guioptions-=m           <span class="hljs-string">&quot; 隐藏菜单栏</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>set statusline=\ %&lt;%F[%<span class="hljs-number">1</span>*%M%*%n%R%H]%=\ %y\ %<span class="hljs-number">0</span>(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\<br><span class="hljs-string">&quot; 设置在状态行显示的信息</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set foldcolumn=0</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set foldmethod=indent </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set foldlevel=3 </span><br><span class="hljs-string"> </span><br><span class="hljs-string">set foldenable              &quot;</span> 开始折叠<br><span class="hljs-string">&quot; 不要使用vi的键盘模式，而是vim自己的</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set nocompatible</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> 语法高亮<br>set syntax=on<br><span class="hljs-string">&quot; 去掉输入错误的提示声音</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set noeb</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> 在处理未保存或只读文件的时候，弹出确认<br>set confirm<br><span class="hljs-string">&quot; 自动缩进</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set autoindent</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set cindent</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> Tab键的宽度<br>set tabstop=<span class="hljs-number">4</span><br><span class="hljs-string">&quot; 统一缩进为4</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set softtabstop=4</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set shiftwidth=4</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> 不要用空格代替制表符<br>set noexpandtab<br><span class="hljs-string">&quot; 在行和段开始处使用制表符</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set smarttab</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> 显示行号<br>set number<br><span class="hljs-string">&quot; 历史记录数</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set history=1000</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>禁止生成临时文件<br>set nobackup<br>set noswapfile<br><span class="hljs-string">&quot;搜索忽略大小写</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set ignorecase</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>搜索逐字符高亮<br>set hlsearch<br>set incsearch<br><span class="hljs-string">&quot;行内替换</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set gdefault</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span>编码设置<br>set enc=utf-<span class="hljs-number">8</span><br>set fencs=utf-<span class="hljs-number">8</span>,ucs-bom,shift-jis,gb<span class="hljs-number">18030</span>,gbk,gb<span class="hljs-number">2312</span>,cp<span class="hljs-number">936</span><br><span class="hljs-string">&quot;语言设置</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set langmenu=zh_CN.UTF-8</span><br><span class="hljs-string"> </span><br><span class="hljs-string">set helplang=cn</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;</span> 我的状态行显示的内容（包括文件类型和解码）<br><span class="hljs-string">&quot;set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\&quot;</span>%d/%m/%y\ -\ %H:%M\<span class="hljs-string">&quot;)&#125;</span><br><span class="hljs-string">&quot;</span>set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]<br> <br><span class="hljs-string">&quot; 总是显示状态行</span><br><span class="hljs-string">set laststatus=2</span><br><span class="hljs-string">&quot;</span> 命令行（在状态行下）的高度，默认为<span class="hljs-number">1</span>，这里是<span class="hljs-number">2</span><br> <br>set cmdheight=<span class="hljs-number">2</span><br> <br><span class="hljs-string">&quot; 侦测文件类型</span><br><span class="hljs-string">filetype on</span><br><span class="hljs-string">&quot;</span> 载入文件类型插件<br> <br>filetype plugin on<br> <br><span class="hljs-string">&quot; 为特定文件类型载入相关缩进文件</span><br><span class="hljs-string">filetype indent on</span><br><span class="hljs-string">&quot;</span> 保存全局变量<br> <br>set viminfo+=!<br> <br><span class="hljs-string">&quot; 带有如下符号的单词不要被换行分割</span><br><span class="hljs-string">set iskeyword+=_,$,@,%,#,-</span><br><span class="hljs-string">&quot;</span> 字符间插入的像素行数目<br> <br>set linespace=<span class="hljs-number">0</span><br> <br><span class="hljs-string">&quot; 增强模式中的命令行自动完成操作</span><br><span class="hljs-string">set wildmenu</span><br><span class="hljs-string">&quot;</span> 使回格键（backspace）正常处理indent, eol, start等<br> <br>set backspace=<span class="hljs-number">2</span><br> <br><span class="hljs-string">&quot; 允许backspace和光标键跨越行边界</span><br><span class="hljs-string">set whichwrap+=&lt;,&gt;,h,l</span><br><span class="hljs-string">&quot;</span> 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）<br> <br>set mouse=a<br> <br>set selection=exclusive<br> <br>set selectmode=mouse,key<br> <br><span class="hljs-string">&quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过</span><br><span class="hljs-string">set report=0</span><br><span class="hljs-string">&quot;</span> 在被分割的窗口间显示空白，便于阅读<br> <br>set fillchars=vert:\ ,stl:\ ,stlnc:\<br> <br><span class="hljs-string">&quot; 高亮显示匹配的括号</span><br><span class="hljs-string">set showmatch</span><br><span class="hljs-string">&quot;</span> 匹配括号高亮的时间（单位是十分之一秒）<br> <br>set matchtime=<span class="hljs-number">1</span><br> <br><span class="hljs-string">&quot; 光标移动到buffer的顶部和底部时保持3行距离</span><br><span class="hljs-string">set scrolloff=3</span><br><span class="hljs-string">&quot;</span> 为C程序提供自动缩进<br> <br>set smartindent<br> <br><span class="hljs-string">&quot; 高亮显示普通txt文件（需要txt.vim脚本）</span><br><span class="hljs-string">au BufRead,BufNewFile *  setfiletype txt</span><br><span class="hljs-string">&quot;</span>自动补全<br> <br>:inoremap ( ()&lt;ESC&gt;i<br> <br>:inoremap ) &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;)&#x27;</span>)&lt;CR&gt;<br> <br><span class="hljs-string">&quot; 数组则不换行</span><br><span class="hljs-string">inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class="hljs-string">&quot;</span> 函数左括号加回车则换行<br>inoremap &#123;&lt;CR&gt; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O<br><br>:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;&#125;&#x27;</span>)&lt;CR&gt;<br> <br>:inoremap [ []&lt;ESC&gt;i<br> <br>:inoremap ] &lt;c-r&gt;=ClosePair(<span class="hljs-string">&#x27;]&#x27;</span>)&lt;CR&gt;<br> <br>:inoremap <span class="hljs-string">&quot; &quot;</span><span class="hljs-string">&quot;&lt;ESC&gt;i</span><br><span class="hljs-string">:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span><br><span class="hljs-string">function! ClosePair(char)</span><br><span class="hljs-string">    if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char</span><br><span class="hljs-string">        return &quot;</span>\&lt;Right&gt;<span class="hljs-string">&quot;</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">        return a:char</span><br><span class="hljs-string">    endif</span><br><span class="hljs-string">endfunction</span><br><span class="hljs-string">filetype plugin indent on </span><br><span class="hljs-string">&quot;</span>打开文件类型检测, 加了这句才可以用智能补全<br> <br>set completeopt=longest,menu<br> <br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> CTags的设定  <br> <br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">let Tlist_Sort_Type = &quot;</span>name<span class="hljs-string">&quot;    &quot;</span> 按照名称排序  <br> <br><span class="hljs-keyword">let</span> Tlist<span class="hljs-number">_</span>Use<span class="hljs-number">_</span>Right<span class="hljs-number">_</span>Window = <span class="hljs-number">1</span>  <span class="hljs-string">&quot; 在右侧显示窗口  </span><br><span class="hljs-string">let Tlist_Compart_Format = 1    &quot;</span> 压缩方式  <br> <br><span class="hljs-keyword">let</span> Tlist<span class="hljs-number">_</span>Exist<span class="hljs-number">_</span>OnlyWindow = <span class="hljs-number">1</span>  <span class="hljs-string">&quot; 如果只有一个buffer，kill窗口也kill掉buffer  </span><br><span class="hljs-string">let Tlist_File_Fold_Auto_Close = 0  &quot;</span> 不要关闭其他文件的tags  <br> <br><span class="hljs-keyword">let</span> Tlist<span class="hljs-number">_</span>Enable<span class="hljs-number">_</span>Fold<span class="hljs-number">_</span>Column = <span class="hljs-number">0</span>    <span class="hljs-string">&quot; 不要显示折叠树  </span><br><span class="hljs-string">autocmd FileType java set tags+=D:\tools\java\tags  </span><br><span class="hljs-string">&quot;</span>autocmd FileType h,cpp,cc,c set tags+=D:\tools\cpp\tags  <br> <br><span class="hljs-string">&quot;let Tlist_Show_One_File=1            &quot;</span>不同时显示多个文件的tag，只显示当前文件的<br> <br><span class="hljs-string">&quot;设置tags  </span><br><span class="hljs-string">set tags=tags  </span><br><span class="hljs-string">&quot;</span>set autochdir <br> <br> <br> <br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><br> <br><span class="hljs-string">&quot;其他东东</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;默认打开Taglist </span><br><span class="hljs-string">let Tlist_Auto_Open=1 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">&quot; Tag list (ctags) </span><br><span class="hljs-string"> </span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;&quot;&quot;&quot; </span><br><span class="hljs-string"> </span><br><span class="hljs-string">let Tlist_Ctags_Cmd = &#x27;/usr/bin/ctags&#x27; </span><br><span class="hljs-string"> </span><br><span class="hljs-string">let Tlist_Show_One_File = 1 &quot;不同时显示多个文件的tag，只显示当前文件的 </span><br><span class="hljs-string">let Tlist_Exit_OnlyWindow = 1 &quot;如果taglist窗口是最后一个窗口，则退出vim </span><br><span class="hljs-string"> </span><br><span class="hljs-string">let Tlist_Use_Right_Window = 1 &quot;在右侧窗口中显示taglist窗口</span><br><span class="hljs-string">&quot; minibufexpl插件的一般设置</span><br><span class="hljs-string"> </span><br><span class="hljs-string">let g:miniBufExplMapWindowNavVim = 1</span><br><span class="hljs-string"> </span><br><span class="hljs-string">let g:miniBufExplMapWindowNavArrows = 1</span><br><span class="hljs-string"> </span><br><span class="hljs-string">let g:miniBufExplMapCTabSwitchBufs = 1</span><br><span class="hljs-string">let g:miniBufExplModSelTarget = 1</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="bashrc设置user-host风格"><a href="#bashrc设置user-host风格" class="headerlink" title=".bashrc设置user@host风格"></a>.bashrc设置user@host风格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不要更改原.bashrc文件</span><br><span class="hljs-comment"># 下面都是追加在原文件后面的（Ubuntu中去掉下面一行注释就行）</span><br><span class="hljs-comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> <span class="hljs-keyword">in</span><br>    xterm-color|*-256color) color_prompt=yes;;<br><span class="hljs-keyword">esac</span><br> <br><span class="hljs-comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span><br><span class="hljs-comment"># off by default to not distract the user: the focus in a terminal window</span><br><span class="hljs-comment"># should be on the output of commands, not on the prompt</span><br>force_color_prompt=yes   <span class="hljs-comment">#Ubuntu中将这行的注释去掉</span><br> <br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$force_color_prompt</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span><br>    <span class="hljs-comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span><br>    <span class="hljs-comment"># a case would tend to support setf rather than setaf.)</span><br>    color_prompt=yes<br>    <span class="hljs-keyword">else</span><br>    color_prompt=<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$color_prompt</span>&quot;</span> = yes ]; <span class="hljs-keyword">then</span><br>    PS1=<span class="hljs-string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\][\u@\h]\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span><br><span class="hljs-keyword">else</span><br>    PS1=<span class="hljs-string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;[\u@\h]:\w\$ &#x27;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> color_prompt force_color_prompt<br></code></pre></td></tr></table></figure><ul><li>打开双屏显示另一个文件（水平切割split，垂直切割vsplit）</li></ul><p>vsp another/file</p><ul><li>窗口之间切换（只开两个窗口，多了太乱）</li></ul><p>ctrl+w+w 循环切换窗口</p><p>ctrl+w+←/h 左边一个窗口</p><p>ctrl+w+→/l 右边一个窗口</p><p>ctrl+w+↑/k 上面一个窗口</p><p>ctrl+w+↓/j 下面一个窗口</p><ul><li>关闭所有窗口</li></ul><p>qall</p><ul><li>只留下当前窗口，其他窗口关闭</li></ul><p>only</p><ul><li>高亮显示当前光标所在单词</li></ul><p>g+d</p><p>n 跳到下方一个高亮的位置</p><p>N 跳到上方一个高亮的位置</p><ul><li>代码跳转</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1</span>、安装ctags <span class="hljs-comment">(sudo apt install ctags)</span><br><span class="hljs-number">2</span>、在项目工程目录下<span class="hljs-comment">(即源文件目录)</span>执行命令: ctags -R * <span class="hljs-comment">(此命令会生成一个tags文件)</span><br></code></pre></td></tr></table></figure><p>ctrl+]  跳转到函数定义处</p><p>ctrl+o 跳转到函数调用处</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">注: 如果 ctrl+] 显示 : E433: <span class="hljs-literal">No</span> tags file<br>则在 ~/.vimrc 文件中添加：<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">tags</span>=./tags,./TAGS,tags;,TAGS;<br><span class="hljs-builtin-name">set</span> autochdir<br>最后 source ~/.vimrc即可<br></code></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>1、远程创建仓库</p><p>2、本地初始化仓库(可能要先设置用户名邮箱啥的git config -l) git init</p><p>3、关联远端 git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;</a>:账号名/仓库名.git</p><p>4、设置上游 git branch –set-upstream-to=origin/master</p><p>5、拉取远端 git pull –rebase （–rebase本地变基）</p><p>6、push本地</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查询symbol</title>
    <link href="/2022/08/20/%E6%9F%A5%E8%AF%A2symbol/"/>
    <url>/2022/08/20/%E6%9F%A5%E8%AF%A2symbol/</url>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>nm obj/path <strong>全称name</strong></p><p>grep -nri xxx dir/path</p><p>readelf -s obj/path</p><p>strings obj/path</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算</title>
    <link href="/2022/05/24/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/05/24/%E4%BA%91%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>云计算把许多<strong>计算资源集合</strong>起来，通过<strong>软件实现自动化管理</strong>，只需要很少的人参与，就能让资源被快速提供。也就是说，<strong>计算能力作为一种商品</strong>，可以在互联网上流通</p><h3 id="一、云计算的三种服务模式-类型-以菜品为例"><a href="#一、云计算的三种服务模式-类型-以菜品为例" class="headerlink" title="一、云计算的三种服务模式/类型(以菜品为例)"></a>一、云计算的三种服务模式/类型(以菜品为例)</h3><h4 id="1、IaaS（Infrastructure-as-a-service）"><a href="#1、IaaS（Infrastructure-as-a-service）" class="headerlink" title="1、IaaS（Infrastructure as-a-service）"></a>1、IaaS（Infrastructure as-a-service）</h4><p>提供锅、燃气灶、电、水等基础设施，用户需要自己利用这些设施来做出这道菜</p><p><strong>【只提供硬件设施】</strong></p><h4 id="2、PaaS（Platform-as-a-service）"><a href="#2、PaaS（Platform-as-a-service）" class="headerlink" title="2、PaaS（Platform as-a-service）"></a>2、PaaS（Platform as-a-service）</h4><p>不仅提供了锅、燃气灶、电、水等基础设施，还提供了做这道菜需要的材料和步骤，用户只需要给菜品调味即可。</p><p><strong>【提供硬件设施，操作系统，数据库，中间件，运行时库等】</strong></p><h4 id="3、SaaS（Software-as-a-service）"><a href="#3、SaaS（Software-as-a-service）" class="headerlink" title="3、SaaS（Software as-a-service）"></a>3、SaaS（Software as-a-service）</h4><p>直接提供了这道菜品，用户可以直接吃或者再卖出去</p><p><strong>【提供应用层软件】</strong></p><h3 id="二、云计算的优点"><a href="#二、云计算的优点" class="headerlink" title="二、云计算的优点"></a>二、云计算的优点</h3><h4 id="1、敏捷性"><a href="#1、敏捷性" class="headerlink" title="1、敏捷性"></a>1、敏捷性</h4><p>云使您可以轻松使用各种技术，从而可以更快地进行创新，并构建几乎任何可以想象的东西。您可以根据需要快速启动资源，从云服务器、存储和数据库等基础设施服务到物联网、机器学习、数据湖和分析等。</p><p>您可以在<strong>几分钟内部署技术服务</strong>，并且从构思到实施的速度比以前快了几个数量级。这使您可以自由地进行试验，测试新想法，以打造独特的客户体验并实现业务转型。</p><h4 id="2、扩展性和弹性"><a href="#2、扩展性和弹性" class="headerlink" title="2、扩展性和弹性"></a>2、扩展性和弹性</h4><p>借助云计算，您无需为日后处理业务活动高峰而预先<strong>过度预置资源</strong>。相反，您可以根据实际需求预置资源量。您可以根据业务需求的变化立即扩展或缩减这些资源，以扩大或缩小容量。</p><h4 id="3、节省成本"><a href="#3、节省成本" class="headerlink" title="3、节省成本"></a>3、节省成本</h4><p>云技术将您的固定资本支出（如数据中心和本地服务器）转变为可变支出，并且只需<strong>按实际用量付费</strong>。此外，由于规模经济的效益，可变费用比您自行部署时低得多。</p><h4 id="4、提高数据的可靠性"><a href="#4、提高数据的可靠性" class="headerlink" title="4、提高数据的可靠性"></a>4、提高数据的可靠性</h4><p>您不再需要连接到单个计算机或网络，同时多个用户可以轻松协作文档和项目。如果您的个人计算机崩溃，您的所有数据在云中都是安全的，仍然可以访问。</p><h4 id="5、在几分钟内进行全局部署"><a href="#5、在几分钟内进行全局部署" class="headerlink" title="5、在几分钟内进行全局部署"></a>5、在几分钟内进行全局部署</h4><p>借助云，您可以<strong>扩展到新的地理区域，并在几分钟内进行全局部署</strong>。例如，AWS 的基础设施遍布全球各地，因此您只需单击几下即可在多个物理位置部署应用程序。将应用程序部署在离最终用户更近的位置可以减少延迟并改善他们的体验。</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微机原理与接口技术</title>
    <link href="/2022/04/23/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
    <url>/2022/04/23/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="微机原理与接口技术"><a href="#微机原理与接口技术" class="headerlink" title="微机原理与接口技术"></a>微机原理与接口技术</h3><p>【西安电子科技大学 周佳社】</p><p><a href="https://blog.csdn.net/weixin_46716100/article/details/122245695">DMA可参考博客</a></p><p><a href="https://blog.csdn.net/qq_43475285/article/details/109849156">DMAC 8237A介绍</a></p><p>三总线：数据总线，地址总线，控制总线</p><p>通过系统总线形成电路来复用CPU引脚</p><p>硬件都是挂在三总线上的</p><p>任何io设备都不能直接与CPU通信，通过接口电路来通信！</p><p>CPU要访问接口电路那么就要给接口电路分配地址，这个地址就被称为IO接口地址。</p><p>什么是io接口？如主板上的usb口，网口等。什么是io设备？插在io接口上的设备称为io设备。</p><p>CPU与设备的通信就转化为了CPU系统总线与接口电路的通信。</p><p>io端口是一个寄存器，用来实现CPU和设备之间的信息交换</p><p>例如，设备状态端口(寄存器)用来标识当前设备的状态。设备往该寄存器中报告自己的状态，CPU通过读该寄存器来获得设备的状态。控制端口(寄存器)用来传递控制信息，CPU往控制端口中传递控制指令，设备通过读取寄存器来获取指令。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">IO接口：主机和外设之间的交接界面，通过接口可以实现主机和外设之间的信息交换。<br>IO端口：接口电路中可被<span class="hljs-meta">CPU</span>直接访问的寄存器。<br>扩展知识：<br><br>IO端口分为：数据端口，状态端口，控制端口<br>若干个端口加上相应的控制逻辑电路组成接口<br></code></pre></td></tr></table></figure><p>X86的IO地址采用独立编址</p><p>地址总线上的信号通过io地址译码电路后，就可以片选接口电路</p><p>当然，存储器也有属于存储器的地址译码电路。</p><p>那么，地址译码电路是如何直到当前地址是io地址还是存储器地址呢？这是通过控制总线来片选io地址译码电路和存储器地址译码电路。</p><p>存储器单元是按照字节来组织的。</p>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DPDK理解</title>
    <link href="/2022/04/21/DPDK%E7%90%86%E8%A7%A3/"/>
    <url>/2022/04/21/DPDK%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="DPDK理解"><a href="#DPDK理解" class="headerlink" title="DPDK理解"></a>DPDK理解</h3><p>网络模块，传统Linux网络层数据包流程：硬件中断—&gt;向内核线程分发数据包—&gt;<a href="https://yingsheng.elecfans.com/app">软件</a>中断—&gt;线程在协议栈中处理数据包—&gt;通知用户层—&gt;用户层接收数据包—&gt;网络层—&gt;逻辑层—&gt;业务层。</p><p>DPDK网络层数据包流程：硬件中断—&gt;放弃中断—&gt;用户层通过设备映射接收数据包—&gt;用户层协议栈—&gt;网络层—&gt;逻辑层—&gt;业务层。</p><p>DPDK拦截中断机制，不触发后续中断和流程流程，绕过协议栈直接从网卡驱动获取到数据包，把包提交给用户空间，减去了中断和内核中内存拷贝消耗的时间，加快了数据包的处理速度。</p><p>核心技术：</p><p>1）将协议栈上移到用户态，利用UIO技术直接将设备数据映射拷贝到用户态</p><p>2）利用大页技术，降低TLB cache miss，提高TLB访问命中率</p><p>3）通过CPU亲和性，绑定网卡和线程到固定的core，减少cpu任务切换</p><p>4）通过无锁队列，减少资源的竞争</p><p>优势：</p><p>1）减少中断次数；</p><p>2）减少内存拷贝次数</p><p>3）绕过linux的协议栈，用户获得协议栈的控制权，能够定制化协议栈以降低复杂度；</p><p>劣势：</p><p>1）内核栈转移至用户层增加了开发成本</p><p>2）低负荷服务器不实用，会造成cpu空转</p><p>dpdk绑定网卡和igb_uio驱动过程中的kernel part会通过uio_register_device 注册对应的uio设备，获取pcie的配置空间BAR信息包括addr、name、size、offset填充到map/map0中，这些在用户态会将其读出，并mmap至用户态进程空间，这样用户态便可直接操作设备的内存空间。</p><p><a href="https://blog.csdn.net/weixin_48006170/article/details/123242414">PCI</a></p><p><a href="https://zhuanlan.zhihu.com/p/394524478">PCIe空间配置</a></p><p><a href="https://www.jianshu.com/p/138887e448fd">PCIe空间配置、地址、访问方法</a></p><p><a href="https://www.icode9.com/content-3-735889.html">PCIE的mmio内存映射访问机制+ 配置空间</a></p><p><a href="https://www.sohu.com/a/300238384_505795">PCI的dfs序扫描过程</a></p><p><a href="http://www.ssdfans.com/?p=8213">PCIe的Root Complex</a></p><p>PCIE应用程序编程，首先就要理清PCIE BAR空间到底说的是什么。在PCIE配置空间里，0x10开始后面有6个32位的BAR寄存器，BAR寄存器中存储的数据是表示PCIE设备在PCIE地址空间中的基地址，注意这里不是表示PCIE设备内存在CPU内存中的映射地址，关于这两者的关系以及两者如何转换后面会有介绍。</p><pre><code>1、BAR寄存器的数据格式，BAR寄存器表示的设备存储类型有memory space BAR和IO space BAR两种，      对于memory space BAR，数组格式如下面所示       31-----------------------------------4 |        3     |     2-1     |       0      16-Byte aligned Base Adress               prefetchable       Type           always 0       对于IO space BAR，数组格式如下所示       31-----------------------------------2 |      1      |     0       4-Byte Aligned Base Address                  reserve       always 0       对于memory space BAR的16-Byte aligned Base Address 这里的Base Address代表的是16个byte数据的地址。      对于IO space BAR的4-Byte aligned Base Address这里的BaseAddress代表的是4个byte数据的地址。2、BAR寄存器数据的初始化      BAR寄存器的数据是怎么初始化，由谁进行初始化的？因为初始化的数据是PCIE设备所在的总线域的地址空间，所以肯定不会是EP(endpoint device)自己进行初始化，因为如果这样EP是不知道其他PCIE设备对应的总线地址空间的，所以可能会引起总线地址空间的冲突，所以BAR寄存器的初始化是由内核进行初始化的，在系统开机时，内核会遍历查找哥哥PCIE设备，然后为PCIE设备分配对应的总线地址空间。3、BAR寄存器存储的总线地址和应用程序内存地址的关系      BAR寄存器存储的总线地址，应用程序是不能直接利用的，应用程序首先要做的就是读出BAR寄存器的值，然后用mmap函数建立应用程序内存空间和总线地址空间的映射关系。这样应用程序往PCIE设备内存读写数据的时候，直接利用PCIE设备映射到应用程序中的内存地址即可。但是应用程序的内存地址该由谁解析到PCIE设备对应的总线空间给EP呢，这个工作是由北桥或者是RC(root complex)来完成的，解析到总线地址空间之后，EP会把总线的地址空间解析成PCIE设备对应的设备内存地址。</code></pre><p>首先，考虑linux中一切皆文件的概念。当主机上插入了一个外设后，我们需要安装相应的驱动程序，才能使用这个外设。对于常用的外设，系统中已经提供了通用的默认驱动程序。假设当前设备是一个新设备，系统中并没有相应的驱动程序，那么显然该设备无法正常工作。此时，我们需要编写一个设备驱动程序，注册该驱动<code>module_init(cur_device_init)</code>，编译好之后最后通过<code>insmod</code>安装这个驱动程序。在初始化函数<code>cur_device_init</code>中我们使用<code>mkdev(主从设备号)</code>来在<code>/dev</code>目录下创建一个设备文件，然后，把设备文件相关的文件操作函数手动实现，例如<code>mmap、read、open、close、write、ioctl</code>等等。即使是这样，我们目前仍然未可知如何读取设备中的数据，即我们在实现<code>read</code>函数时，怎么读取设备的数据。</p><p>以上是对于字符设备和块设备而言的，再回到网络设备，__网络设备从来不出现在 <code>/dev</code> 中__。<code>tun</code>是虚拟网卡对应的字符设备。</p><p>网卡工作在物理层和数据链路层，主要由<code>PHY/MAC</code>芯片、<code>Tx/Rx FIFO</code>、<code>DMA</code>等组成，其中网线通过变压器接PHY芯片、<code>PHY</code>芯片通过<code>MII</code>接<code>MAC</code>芯片、<code>MAC</code>芯片接<code>PCI</code>总线。</p><h5 id="网卡驱动ixgbe初始化"><a href="#网卡驱动ixgbe初始化" class="headerlink" title="网卡驱动ixgbe初始化"></a>网卡驱动ixgbe初始化</h5><p>网卡驱动为每个新的接口在一个全局的网络设备列表里插入一个数据结构，每个接口由一个结构 <code>net_device</code> 项来描述, 它在<code>&lt;linux/netdevice.h&gt;</code>里定义。该结构必须动态分配。</p><p>每个网卡，无论是物理还是虚拟的网卡，都必须有一个：<code>net_device</code>，这个<code>struct</code>是在网卡驱动中分配创建的，不同的网卡，对应厂商不同的驱动，那么看看<code>ixgbe</code>的驱动初始化; 创建<code>net_device</code> 的函数是: <code>alloc_etherdev</code>, 或者： <code>alloc_etherdev_mq</code>。</p><h5 id="pci设备："><a href="#pci设备：" class="headerlink" title="pci设备："></a>pci设备：</h5><p>在内核中，一个<code>PCI</code>设备，使用<code>struct pci_driver</code>结构来描述, 因为在系统引导的时候，<code>PCI</code>设备已经被识别，当内核发现一个已经检测到的设备和驱动注册的<code>id_table</code>中的信息相匹配时，它就会触发驱动的<code>probe</code>函数,比如，看看<code>ixgbe</code> 驱动：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pci_driver</span> <span class="hljs-title">ixgb_driver</span> =</span> &#123;<br>    .name     = ixgb_driver_name,<br>    .id_table = ixgb_pci_tbl,<br>    .probe    = ixgb_probe,<br>    .remove   = ixgb_remove,<br>    .err_handler = &amp;ixgb_err_handler<br>&#125;;<br><span class="hljs-meta">#vim drivers/net/ethernet/intel/ixgbe/ixgbe_main.c</span><br><br>module_init<br>    ixgbe_init_module<br>        pci_register_driver<br></code></pre></td></tr></table></figure><p>当<code>probe</code>函数被调用，证明已经发现了我们所支持的网卡，这样，就可以调用<code>register_netdev</code>函数向内核注册网络设备了，注册之前，一般会调用<code>alloc_etherdev</code>分配一个<code>net_device</code>，然后初始化它的重要成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ixgbe_probe  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">netdev</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pci_dev</span> *<span class="hljs-title">pdev</span>;</span><br>    <span class="hljs-built_in">pci_enable_device_mem</span>(pdev);<br>    <span class="hljs-built_in">pci_request_mem_regions</span>(pdev, ixgbe_driver_name);<br>    <span class="hljs-built_in">pci_set_master</span>(pdev);<br>    <span class="hljs-built_in">pci_save_state</span>(pdev);<br>    netdev = <span class="hljs-built_in">alloc_etherdev_mq</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct ixgbe_adapter), indices);<span class="hljs-comment">// 这里分配struct net_device</span><br>    <span class="hljs-function">alloc_etherdev_mqs</span><br><span class="hljs-function">    <span class="hljs-title">alloc_netdev_mqs</span><span class="hljs-params">(sizeof_priv, <span class="hljs-string">&quot;eth%d&quot;</span>, NET_NAME_UNKNOWN, ether_setup, txqs, rxqs)</span></span>;<br>    ether_setup  <span class="hljs-comment">// Initial struct net_device</span><br>    <br>    <span class="hljs-built_in">SET_NETDEV_DEV</span>(netdev, &amp;pdev-&gt;dev);<br>    adapter = <span class="hljs-built_in">netdev_priv</span>(netdev);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">alloc_etherdev_mqs</span>() -&gt; <span class="hljs-built_in">ether_setup</span>()<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ether_setup</span><span class="hljs-params">(struct net_device *dev)</span></span><br><span class="hljs-function"></span>&#123;<br>    dev-&gt;header_ops     = &amp;eth_header_ops;<br>    dev-&gt;type       = ARPHRD_ETHER;<br>    dev-&gt;hard_header_len    = ETH_HLEN;<br>    dev-&gt;min_header_len = ETH_HLEN;<br>    dev-&gt;mtu        = ETH_DATA_LEN;<br>    dev-&gt;addr_len       = ETH_ALEN;<br>    dev-&gt;tx_queue_len   = <span class="hljs-number">1000</span>; <span class="hljs-comment">/* Ethernet wants good queues */</span><br>    dev-&gt;flags      = IFF_BROADCAST|IFF_MULTICAST;<br>    dev-&gt;priv_flags     |= IFF_TX_SKB_SHARING;<br><br>    <span class="hljs-built_in">eth_broadcast_addr</span>(dev-&gt;broadcast);<br><br>&#125;<br><span class="hljs-built_in">EXPORT_SYMBOL</span>(ether_setup);<br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pci_driver</span> <span class="hljs-title">ixgbe_driver</span> =</span> &#123;<br>.name     = ixgbe_driver_name,<br>.id_table = ixgbe_pci_tbl,<br>.probe    = ixgbe_probe, <span class="hljs-comment">// 系统探测到ixgbe网卡后调用ixgbe_probe()</span><br>.remove   = ixgbe_remove,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_PM</span><br>.suspend  = ixgbe_suspend,<br>.resume   = ixgbe_resume,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>.shutdown = ixgbe_shutdown,<br>.sriov_configure = ixgbe_pci_sriov_configure,<br>.err_handler = &amp;ixgbe_err_handler<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">ixgbe_init_module</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>...<br>ret = <span class="hljs-built_in">pci_register_driver</span>(&amp;ixgbe_driver); <span class="hljs-comment">// 注册ixgbe_driver</span><br>...<br>&#125;<br><br><span class="hljs-built_in">module_init</span>(ixgbe_init_module);<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">ixgbe_exit_module</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>...<br><span class="hljs-built_in">pci_unregister_driver</span>(&amp;ixgbe_driver); <span class="hljs-comment">// 注销ixgbe_driver</span><br>...<br>&#125;<br><br><span class="hljs-built_in">module_exit</span>(ixgbe_exit_module);<br></code></pre></td></tr></table></figure><h5 id="中断注册"><a href="#中断注册" class="headerlink" title="中断注册"></a>中断注册</h5><p>内核初始化期间，<code>softirq_init</code>会注册<code>TASKLET_SOFTIRQ</code>以及<code>HI_SOFTIRQ</code>相关联的处理函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> __init <span class="hljs-title">softirq_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    ......<br> <br>    <span class="hljs-built_in">open_softirq</span>(TASKLET_SOFTIRQ, tasklet_action);<br>    <span class="hljs-built_in">open_softirq</span>(HI_SOFTIRQ, tasklet_hi_action);<br>&#125;<br></code></pre></td></tr></table></figure><p>网络子系统分两种soft IRQ。<code>NET_TX_SOFTIRQ</code>和<code>NET_RX_SOFTIRQ</code>，分别处理发送数据包和接收数据包。这两个soft IRQ在<code>net_dev_init</code>函数（<code>net/core/dev.c</code>）中注册：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">open_softirq</span>(NET_TX_SOFTIRQ, net_tx_action);<br>    <span class="hljs-built_in">open_softirq</span>(NET_RX_SOFTIRQ, net_rx_action);<br></code></pre></td></tr></table></figure><p>收发数据包的软中断处理函数被注册为<code>net_rx_action</code>和<code>net_tx_action</code>。<br>其中<code>open_softirq</code>实现为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open_softirq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nr, <span class="hljs-keyword">void</span> (*action)(struct softirq_action *))</span></span><br><span class="hljs-function"></span>&#123;<br>    softirq_vec[nr].action = action;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="重要结构体初始化"><a href="#重要结构体初始化" class="headerlink" title="重要结构体初始化"></a>重要结构体初始化</h5><h5 id="一致性DMA和流式DMA"><a href="#一致性DMA和流式DMA" class="headerlink" title="一致性DMA和流式DMA"></a>一致性DMA和流式DMA</h5><p>一致性DMA映射可以理解为简单粗暴地关闭了cache，以此保证数据一致性；<br>而流式DMA映射是怎么保证数据一致性的呢，它的方式更加复杂，让我们从数据的两个方向来分析：</p><ul><li>DMA_TO_DEVICE<br>CPU将数据写入cache，然后同步cache与RAM(映射区域)，同步操作完成后设备再从RAM(映射区域)获取数据</li><li>DMA_FROM_DEVICE<br>CPU标记RAM(映射区域)对应的cache line为无效状态，以避免设备将数据写入RAM(映射区域)后，CPU从cache中获得”脏数据”</li></ul><p>从上述分析总结来看，流式DMA映射根据数据方向对cache进行”flush/invalid”，既保证了数据一致性，也避免了完全关闭cache带来的性能影响。</p><p>既如此，为什么不抛弃一致性DMA映射，全面拥抱“更强大”的流式DMA映射呢？<br>我想到了一个场景来解释这个问题：<br>假设有一段内存空间，范围小且有被频繁访问的需求，在这种场景下，因为内存空间小，开/关cache对性能影响微乎其微，如果采用流式DMA映射反而带来了等同访问频次的”cache flush/invalid”操作，莫不如完全关闭cache，采用一致性DMA映射。</p><p>bar寄存器保存了当前设备的pci地址的基址。</p><p>mmap利用给定的逻辑地址来和物理地址建立映射，ioremap利用给定的物理地址来和逻辑地址建立映射。他们建立的都是逻辑地址到物理地址的映射。</p><p>没有dpdk时，设备将数据发送到</p><p>使用dpdk时，设备直接将数据发送到mbuf中，pmd轮询访问mbuf是否收到数据，若收到数据进行处理。</p><p><code>igb_uio</code>驱动主要做的就是注册一个<code>pci</code>设备。但是<code>igbuio_pci_driver</code>对应的保存<code>pci</code>设备信息的<code>id_table</code>指针为空，这样在内核注册此<code>pci</code>设备时，会找不到匹配的设备，就不会调用<code>igb_uio</code>驱动中的探测<code>probe</code>函数，只会在<code>/sys</code>目录下创建<code>igb_uio</code>相应的目录。</p><p>将<code>eth1</code>网卡绑定到<code>igb_uio_module</code>后查看<code>dmesg</code>就会看到<code>igb_uio_module</code>的<code>probe</code>函数执行了，也就是意味着扫描到了匹配的<code>pci</code>设备。</p><p>解绑的动作就是将igb模块信息和此pci设备Dev去关联。将dev-&gt;driver指针置为空，这个很重要。在内核处理pci设备注册的函数中，就算驱动的vendor ID和device ID与设备的都匹配上了，如果此设备的dev-&gt;driver指针不为空，也不会调用probe函数的。</p><p>igb_uio记录设备的资源</p><p>igb_uio模块遍历此PCI设备BAR空间，对应于类型为存储器空间IORESOURCE_MEM的BAR，将其物理地址、大小等信息保存到uio_info结构的mem数组中之中；类型为寄存器空间IORESOURCE_IO的BAR，将其物理地址、大小等信息保存到uio_info结构的port数组中。</p><p>igb驱动也会遍历BAR空间，但是它不会记录空间的物理地址，而是调用ioremap函数将物理地址映射为虚拟地址，驱动在内核态读写操作映射出来的虚拟地址。</p><p>Linux上的驱动设备一般都是运行在内核态的，提供接口函数给用户态函数调用即可。而新引入的UIO技术，则是将驱动的大部分事情移到了用户态。前面讲到probe函数会记录设备的资源，具体而言就是PCI设备BAR空间的物理地址、大小等信息记录下来传给用户态。除了记录BAR空间资源信息，uio框架还会在内核态实现中断处理相关的初始化工作。</p><p>注册的uio设备名为igb_uio，内核态中断处理函数为igbuio_pci_irqhandler，中断控制函数igbuio_pci_irqcontrol。这两个函数有什么用呢？</p><p>1、 初始化uio_device结构体指针idev，主要包括等待队列wait、中断事件计数event、</p><p>次设备号minor等。</p><p>2、在/dev目录下创建了一个uio设备，设备名为uio%d，%d对应的就是次设备号minor。</p><p>3、接着就是调用uio_dev_add_attributes函数在/sys/class/uio/uioX/目录下创建maps和portio接口。前面讲到会遍历此PCI设备的BAR空间，将存储器空间类型的BAR的物理地址等信息存储在uio_info的mem数组中，这里就会根据此mem数组在maps目录下为每个寄存器类型的BAR创建一个目录<br>4、最后就是注册中断了，中断的中断号、中断标志等在前面有讲到，这里看下注册的中断处理函数uio_interrupt。此函数首先调用igb_uio驱动中设置的中断处理函数igbuio_pci_irqhandler来检查中断是不是此设备的中断，如果是就返回IRQ_HANDLED表示需要处理，接着调用函数uio_event_notify来唤醒等待队列wait上进程来处理中断事宜。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列化反序列化</title>
    <link href="/2022/04/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/04/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><h5 id="首先谈谈自己的理解，也作为一次记录。"><a href="#首先谈谈自己的理解，也作为一次记录。" class="headerlink" title="首先谈谈自己的理解，也作为一次记录。"></a>首先谈谈自己的理解，也作为一次记录。</h5><p>因为之前自己有写过一个RPC框架，当时自己要实现对象的序列化和反序列化，从简单性出发，直接假定通信双方都处于C++14环境下，并且操作系统和处理器架构都是一致的。这样一来，我在序列化时可以直接发送对象内存数据，并在发送内存数据之前增加数据大小字段即可完成序列化过程！服务器端通过在编译时确定了函数的参数类型，从而去尝试反序列化收到的数据，如果反序列化成功，则调用该函数，否则本次RPC调用失败。</p><p>当然，以上场景只是假想的，真是情况不可能各台主机的操作系统和处理器架构都是一模一样的，于是乎，我们需要更加适用的序列化反序列化手段！</p><p>把对象序列化到底是序列化什么？序列化结果就是内存数据？序列化结果就是一个字符串，该字符串描述了一个对象？序列化结果既包含了对象描述信息也包含了对象内存数据？以上都不是？</p><p>考虑一：我们只发送内存数据。很显然反序列化端收到的是比特流，它无法通过比特流知晓原发送的对象到底是什么类型。</p><p>考虑二：我们只发送描述信息。这样的话，反序列化端收到了比特流就知道这是一个字符串，该字符串是某个对象的描述信息。通过描述信息，我们就知道了本次要反序列化的对象是什么类型，于是，我们尝试通过这个描述信息来还原对象。如果反序列化端不知道该类型，那么它如何无中生有new出对象？如果反序列化端知道该类型，那么为啥序列化不直接发送<code>类名+内存数据</code>，反序列化端只要根据工厂模式通过类名生成新对象，最后将内存数据拷贝至新对象的内存区域？__这样做是显然不行的，其原因我已经说过了，因为同一个对象在不同机器上的内存数据未必是一致的，所以简单的内存拷贝是无法在真实情况中使用的！同时也说明了一点，我们永远也不要指望发送一个对象的内存数据到RPC的对端，因为这些内存数据只在本机上具有意义，在其他主机上没有任何意义！__这也告诉我们只需要发送描述信息即可，因此序列化的结果就是描述信息字符串。诚然我们可以通过工厂模式获得一个对象实例，但是我们怎么知道该对象各属性字段的值呢？因为描述信息是字符串，我们可以从中获得类似于<code>key = value</code>这种字符串键值对，但是我们并不知道这个对象是否具有该字段。因为这个对象是工厂产生的，程序在编译时甚至不知道当前反序列化是哪种类型的对象，自然也不会知道该类型是否存在描述信息中给出的对应属性。此时，我们需要一种功能，该功能可以让我们查询一个类对象具有哪些属性，可以让我们通过属性字段名来给对象的相应字段赋值。__这就是反射！__服务器端需要反序列化的类都要具有反射功能。</p><h5 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h5><p>为什么要使用字段编号？因为类中某个字段的名称可能太长，我们序列化时直接序列化字段名将使用更多的空间，而序列化一些小数字只需要几个bit这是比较好的。</p><p>为什么使用类型编号？首先这在框架层面可以检测对端是否传输了正确的类型，仅仅是字段编号无法确定对端传来的是自己想要的数据类型。类型也决定着它使用<code>key-value</code>还是<code>key-length-value</code>编码。</p><p>通过自定义编码方式来减少占用空间。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http2抓包结构</title>
    <link href="/2022/04/16/http2%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%84/"/>
    <url>/2022/04/16/http2%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="http2头部"><a href="#http2头部" class="headerlink" title="http2头部"></a>http2头部</h3><p>【样例一】</p><p><img src="http2%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%84/image-20220416130309851.png" alt="image-20220416130309851"></p><p>【样例二】</p><p><img src="http2%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%84/image-20220416130741949.png" alt="image-20220416130741949"></p><p>如图<code>:</code>开头的为保留头信息，http2要求保留头信息出现在其他头信息之前。</p><h5 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h5><p>HTTP/1.1 通过纯文本形式传输数据，使用 Wireshark、Tcpdump 抓包工具就可以非常方便的抓包调试。但 HTTP/2 不再使用明文而全部采用二进制格式。 这样虽然对人类阅读不友好，但却方便了计算机的解析与代码的编写。HTTP/2 把原来的头部与消息体分割为数个二进制帧（Frame），并定义了多种帧类型，用 HEADERS 帧存放头数据、DATA 帧存放请求正文数据。</p><h5 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h5><p><img src="http2%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%84/image-20220416132220033.png" alt="image-20220416132220033"></p><p>Length：3 个字节，表示该帧的数据长度（但不包括头的 9 个字节）。</p><p>Type：1 个字节，表示该帧后续的内容的类型（总共定义了 10 种类型的帧，大体上可以分为数据帧和控制帧两类）。</p><p>Flags：1 个字节，在 Type 不同的情况下有不同的定义。</p><p>R：一位保留位，目前未定义，且必须是 0。</p><p>Stream Identifier：流标识符 ID，也就是帧所属的“流”，接收方使用该 ID 可以从乱序的帧里识别出具有相同流 ID 的帧序列，并按照顺序重新组装起来，就实现了虚拟的“流”。</p><p>Frame Payload：该帧的载荷。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gRPC</title>
    <link href="/2022/04/13/gRPC/"/>
    <url>/2022/04/13/gRPC/</url>
    
    <content type="html"><![CDATA[<h3 id="一、gRPC与其他RPC对比"><a href="#一、gRPC与其他RPC对比" class="headerlink" title="一、gRPC与其他RPC对比"></a>一、gRPC与其他RPC对比</h3><h5 id="需要IDL来生成代理"><a href="#需要IDL来生成代理" class="headerlink" title="需要IDL来生成代理"></a>需要IDL来生成代理</h5><p>1、gRPC需要使用<code>IDL(Interface Define Language)</code>接口定义语言来编写<code>proto</code>文件，该文件定义了消息的数据类型和服务，也就是说一个<code>proto</code>文件定义了一个消息传输的协议。通过相同的IDL，服务端生成服务端代理<code>pb.h</code>，客户端生成客户端代理<code>pb.h</code>。服务端要实现代理生成的接口函数<code>(纯虚函数)</code>，客户端要通过客户端代理来调用服务端方法，传输数据。</p><p>2、而有些RPC框架并不使用IDL来生成代理。代理的本质在我理解来就是一个安全检查的作用，让客户端知道如何以正确的方式来调用服务端的函数，因为客户端代理指定了调用时的参数类型，所以gRPC是一种强类型RPC框架，当传输参数类型不匹配时在编译器即可检测到错误。不使用IDL时，那么我们就要定义一个<code>普适的消息传输协议</code>，所有的RPC调用都要遵守这一协议。</p><h5 id="序列化协议protobuf"><a href="#序列化协议protobuf" class="headerlink" title="序列化协议protobuf"></a>序列化协议protobuf</h5><p>1、gRPC使用<code>protocol buffers</code>来序列化传输数据，序列化效率高，占用空间小。并通过<code>http2.0 POST</code>发送序列化后的数据。客户端代理会在http的请求头增加要调用的服务端方法信息，如下示例http2.0的头部。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">:authority : gys.com<br>:method : POST<br>:scheme : https<br>:path : /ServiceName/MethodName<br>te : trailers<br>grpc-timeout : 2S<br>content-type : application/grpc<br>grpc-encoding : gzip<br><br>[注]:以&quot;:&quot;开头的头信息称为保留头信息，http2.0要求保留头信息必须出现在其他头信息之前！<br></code></pre></td></tr></table></figure><p>序列化后的数据放在请求体中，之后将该http请求发送给服务端。</p><p>2、而有些RPC框架则直接使用了json来序列化传输数据，比如Java的原生序列化。序列化效率低，占用空间大。</p><h5 id="支持多语言"><a href="#支持多语言" class="headerlink" title="支持多语言"></a>支持多语言</h5><p>1、gRPC使用的<code>protobuf</code>序列化是语言中立的，在编译<code>proto</code>文件时，可以调整参数来生成的各种常见语言的服务端代理和客户端代理。</p><h5 id="支持全双工流通信"><a href="#支持全双工流通信" class="headerlink" title="支持全双工流通信"></a>支持全双工流通信</h5><p>1、gRPC提供了对流的原生支持。</p><h3 id="二、gRPC的通信模式"><a href="#二、gRPC的通信模式" class="headerlink" title="二、gRPC的通信模式"></a>二、gRPC的通信模式</h3><h5 id="一元RPC模式"><a href="#一元RPC模式" class="headerlink" title="一元RPC模式"></a>一元RPC模式</h5><p>一次PRC调用过程中，客户端仅发送一个请求，服务器端对于这个请求仅发送一个响应。随这个响应一起发送<code>(该响应额外包含)</code>的还有状态细节、trailer元数据。</p><h5 id="服务器端流RPC模式"><a href="#服务器端流RPC模式" class="headerlink" title="服务器端流RPC模式"></a>服务器端流RPC模式</h5><p>一次RPC调用过程中，客户端仅发送一个请求，服务器端对于这个请求会发送一系列的响应。这一系列响应所组成的响应序列就被称为<code>流</code>，流提供了<code>Send和Recv</code>方法。当服务器端的响应序列全部发送完毕之后，服务器端最后会以trailer元数据的形式将流的状态发送给客户端，凭借状态来标识这个流已经结束了。</p><p><code>rpc searchOrders(KeyWord) returns (stream Order);</code></p><p>比如服务器端提供了订单搜索功能，客户端调用该服务时提供了搜索词参数，客户端调用该服务会返回一个流对象，客户端通过这个流对象<code>stream.Recv()</code>来获得服务器的响应。 服务器端实现方法时，搜索词和流都是该方法的参数，服务器端也并不是查询到所有满足条件的订单结果后一次性返回查询结果，而是在查询时每碰到一个满足条件的订单便向客户端发送一个响应<code>stream.Send(cur_order)</code>。当查询结束后再向客户端发送结束标识<code>stream.SendAndClose()</code>。</p><h5 id="客户端流RPC模式"><a href="#客户端流RPC模式" class="headerlink" title="客户端流RPC模式"></a>客户端流RPC模式</h5><p>一次RPC调用过程中，客户端会发送一系列的请求，服务器端对于这一系列的请求仅会发送一个响应。当客户端的请求序列全部发送完毕之后，客户端最后会以trailer元数据的形式将流的状态发送给服务器端，凭借状态来标识这个流已经结束了。</p><p><code>rpc updateGoods(stream Goods) returns (GoodsSet)</code></p><p>比如服务器端提供了商品更新功能，客户端调用时该服务时会返回一个流对象。客户端通过这个流对象<code>stream.Send(Goods)</code>来向服务器发送请求，请求序列全部发送完毕后通过<code>stream.Recv()</code>来接收服务器端的响应。服务器端实现方法时，流都是该方法的参数，服务器端通过<code>stream.Recv()</code>来接收客户端的一个更新请求，然后执行更新过程，若更新成功则往响应消息中插入该商品的id。当服务器端接受完客户端的请求之后，便将响应消息通过流<code>stream.SendAndClose(GoodsSet)</code>发送给客户端。</p><h5 id="双向流RPC模式"><a href="#双向流RPC模式" class="headerlink" title="双向流RPC模式"></a>双向流RPC模式</h5><p>一次RPC调用过程中，客户端会发送一系列的请求，服务器端对于这一系列的请求会发送一系列的响应。调用必须由客户端发起，但之后的通信流程完全由客户端和服务器端的程序逻辑决定。</p><p><code>rpc orderCombined(stream Order) returns (stream CombinedOrders)</code></p><p>比如服务器端提供了一个订单打包功能(相同的收货地址打包为一个大订单)，客户端调用该服务时会返回一个流对象。客户端通过这个流对象<code>stream.Send(Order)</code>来向服务器发送请求，请服务器端通过<code>stream.Recv()</code>来接收客户端的一个请求，然后执行处理过程，之后将处理结果通过<code>stream.Send(CombinedOrders)</code>将打包结果发送给客户端，客户端通过<code>stream.Recv()</code>获取处理后的结果。</p><h3 id="三、gRPC的原理"><a href="#三、gRPC的原理" class="headerlink" title="三、gRPC的原理"></a>三、gRPC的原理</h3><h5 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h5><p><code>protoc</code>程序实际上可以理解为一个编译器，它编译<code>.proto</code>文件，生成对应语言的源文件，该源文件定义了服务和方法。</p><h5 id="编码技术"><a href="#编码技术" class="headerlink" title="编码技术"></a>编码技术</h5><p>__整数__通过变长编码来序列化，对于类型<code>int32、int64、uint32、uint64、bool、enum</code>采用varint编码，varint编码每个字节的最高位表示该数后面是否还存在有效字节，如<code>0b [0]000 0100 [1]011 1111</code>表示正常补码数<code>0b 0000 0010 0011 1111</code>。很显然这种编码方式对于小整数具有优势，但对于负数的编码则要比正常补码数多一个字节。考虑到这种情况，对于特定声明的类型<code>sint32、sint64</code>采用zigzag编码，zigzag编码先将负数映射为正数，然后再使用varint编码。</p><p>当然，gRPC也支持原生的固定字节数量的补码数表示，如类型<code>fixed32、sfixed32、float、fixed64、sfixed64、double</code>就是采用正常补码数的编码方式。</p><p>__字符串__通过基于<code>长度-数据</code>来序列化。首先通过varint编码表示字符串的长度，接下来该长度的字节数就是原来的字符串。</p><h5 id="长度前缀分帧"><a href="#长度前缀分帧" class="headerlink" title="长度前缀分帧"></a>长度前缀分帧</h5><p>发送序列化数据之前先发送该序列化数据的长度，也即在序列化数据之前增加(比如)4个字节来表示本次传输的序列化数据的长度。</p><p>对于一元RPC模式时的简单消息，只需要处理一条带前缀的消息；而对于流RPC模式时的流消息，则要处理多条带前缀的消息。</p><h3 id="四、gRPC的拦截器"><a href="#四、gRPC的拦截器" class="headerlink" title="四、gRPC的拦截器"></a>四、gRPC的拦截器</h3><h3 id="五、gRPC的截止时间"><a href="#五、gRPC的截止时间" class="headerlink" title="五、gRPC的截止时间"></a>五、gRPC的截止时间</h3><h3 id="六、gRPC的强制取消"><a href="#六、gRPC的强制取消" class="headerlink" title="六、gRPC的强制取消"></a>六、gRPC的强制取消</h3><h3 id="七、gRPC的错误处理"><a href="#七、gRPC的错误处理" class="headerlink" title="七、gRPC的错误处理"></a>七、gRPC的错误处理</h3>]]></content>
    
    
    <categories>
      
      <category>RPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go的内存分配</title>
    <link href="/2022/04/11/Go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <url>/2022/04/11/Go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="Go的内存分配"><a href="#Go的内存分配" class="headerlink" title="Go的内存分配"></a>Go的内存分配</h3><h5 id="mcache"><a href="#mcache" class="headerlink" title="mcache"></a>mcache</h5><p>线程本地内存</p><h5 id="mcentral"><a href="#mcentral" class="headerlink" title="mcentral"></a>mcentral</h5><p>中央内存</p><h5 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h5><p>堆</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>X86-32CPU的寄存器</title>
    <link href="/2022/04/08/X86-32CPU%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2022/04/08/X86-32CPU%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="X86-32CPU的寄存器"><a href="#X86-32CPU的寄存器" class="headerlink" title="X86-32CPU的寄存器"></a>X86-32CPU的寄存器</h3><p>【注意：X86-64在寄存器名称前面加字符R，用以区分X86-32在寄存器名称前面的字符E。】</p><h5 id="4个数据寄存器"><a href="#4个数据寄存器" class="headerlink" title="4个数据寄存器"></a>4个数据寄存器</h5><p>EAX：累加寄存器【也是默认存储函数返回值的寄存器】</p><p>EBX：基址寄存器</p><p>ECX：计数寄存器</p><p>EDX：数据寄存器</p><h5 id="2个指针寄存器"><a href="#2个指针寄存器" class="headerlink" title="2个指针寄存器"></a>2个指针寄存器</h5><p>EBP：基指针寄存器【用来配合SS访问栈中的数据，因为SP始终是栈顶到SS的偏移量，我们不能修改SP，故要额外使用BP来访问栈中数据。SS+EBP就是栈中对应数据的内存地址。EBP是逻辑栈的栈底，SS是真栈底】</p><p>ESP：栈指针寄存器</p><h5 id="1个指令指针寄存器"><a href="#1个指令指针寄存器" class="headerlink" title="1个指令指针寄存器"></a>1个指令指针寄存器</h5><p>EIP：指令指针寄存器【CS+EIP就是指令内存地址】</p><h5 id="1个标志寄存器"><a href="#1个标志寄存器" class="headerlink" title="1个标志寄存器"></a>1个标志寄存器</h5><p>EFlags：标志寄存器</p><h5 id="6个段寄存器"><a href="#6个段寄存器" class="headerlink" title="6个段寄存器"></a>6个段寄存器</h5><p>CS：代码段寄存器【CPL进程特权级保存在CS中的最低两位，而DPL段描述符特权级位于GDT/IDT中。两者比较就能确定当前进程能否对当前段进行操作。】</p><p>DS：数据段寄存器</p><p>SS：堆栈段寄存器【指向用户地址空间时即为用户栈，指向内核空间时即为内核栈。】</p><p>ES：附加段寄存器</p><p>FS：</p><p>GS：</p><h5 id="2个变址寄存器"><a href="#2个变址寄存器" class="headerlink" title="2个变址寄存器"></a>2个变址寄存器</h5><p>ESI：源变址寄存器</p><p>EDI：目的变址寄存器</p><h3 id="额外注意事项"><a href="#额外注意事项" class="headerlink" title="额外注意事项"></a>额外注意事项</h3><h5 id="用户态内核态切换可以参考"><a href="#用户态内核态切换可以参考" class="headerlink" title="用户态内核态切换可以参考"></a>用户态内核态切换<a href="https://blog.csdn.net/weixin_38278993/article/details/105645068">可以参考</a></h5><p>实模式【使用物理地址】下的段寄存器在保护模式【使用逻辑地址】下叫段选择子<code>Segment Selector</code>，用来存放段选择符。段选择子包括三部分：<code>描述符索引index、TI、请求特权级RPL</code>。</p><p>当线程的特权级小于要访问的段【代码段或数据段】的特权级时，就从用户态切换到内核态。内核态切换的本质就是切换堆栈指针指向内核空间，我们称此刻就处于了内核态。切换时把用户堆栈指针压入内核堆栈中，从而在返回用户态时复原用户堆栈。</p><h5 id="嵌入汇编语法"><a href="#嵌入汇编语法" class="headerlink" title="嵌入汇编语法"></a>嵌入汇编语法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> val1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> val2 = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> val3 = <span class="hljs-number">0</span>;<br><br>__asm__ __volatile__ (<br><span class="hljs-comment">// 汇编语句模板:</span><br><span class="hljs-string">&quot;movl $0, %%eax\n\t&quot;</span><br><span class="hljs-string">&quot;addl %1, %%eax\n\t&quot;</span><br><span class="hljs-string">&quot;addl %2, %%eax\n\t&quot;</span><br><span class="hljs-string">&quot;movl %%eax, %0\n\t&quot;</span><br><span class="hljs-comment">// :输出部分</span><br>:<span class="hljs-string">&quot;=m&quot;</span> (val3)<br><span class="hljs-comment">// :输入部分</span><br>:<span class="hljs-string">&quot;c&quot;</span> (val1), <span class="hljs-string">&quot;d&quot;</span> (val2)<br><span class="hljs-comment">// :破坏描述部分【没有可以省略】</span><br>);<br></code></pre></td></tr></table></figure><p>以上代码汇编相当于执行 <code>val3 = val1 + val2</code>。<code>%数字</code>表示输出部分输入部分破坏描述部分的编号。<code>$数字</code>表示立即数。所以<code>%0表示 &quot;=m&quot; (val3); $0表示立即数0</code>。寄存器使用<code>%%</code>表示用来区分<code>%数字</code>。<code>m</code>意思是内存变量，<code>&quot;c&quot;</code>意思是寄存器<code>ecx</code>，<code>&quot;d&quot;</code>意思是寄存器<code>edx</code>。输入部分指将变量val1放在寄存器ecx中，将变量val2放在edx中，val3是内存变量。<code>=</code>意思是只写的，<code>&quot;+&quot;</code>意思是读写的。破坏描述符用于通知编译器我们使用了哪些寄存器或内存，由逗号格开的字符串组成，每个字符串描述一种情况，一般是寄存器名。</p><p>【注】：默认使用eax存放系统调用号，当<code>int $0x80</code>中断时，中断号参数放在了<code>eax</code>寄存器中。</p><h5 id="内嵌汇编常用限定修饰符"><a href="#内嵌汇编常用限定修饰符" class="headerlink" title="内嵌汇编常用限定修饰符"></a>内嵌汇编常用限定修饰符</h5><p><img src="/2022/04/08/X86-32CPU%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8/image-20220416184646523.png" alt="image-20220416184646523"></p><p><img src="/2022/04/08/X86-32CPU%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8/image-20220416184740569.png" alt="image-20220416184740569"></p>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目标文件的链接</title>
    <link href="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/"/>
    <url>/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="程序从源文件到可执行文件的步骤"><a href="#程序从源文件到可执行文件的步骤" class="headerlink" title="程序从源文件到可执行文件的步骤"></a>程序从源文件到可执行文件的步骤</h3><p>我们知道一个C/C++源文件要经历预编译<code>gcc -E</code>、编译<code>gcc -S</code>、汇编<code>gcc -c</code>、链接<code>ld</code>这四个步骤才形成了最后的可执行文件。</p><p>现在，我将探讨这些阶段究竟发生了什么，就让我用经典的helloworld程序来示例吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h5><p><code>gcc -E helloworld.cc -o helloworld.i</code></p><p>预编译展开所有的宏<code>#define</code>，展开所有包含的其他头文件<code>#include</code>，处理条件编译<code>#if系列</code>，删除注释，添加行号和文件名标识<code>如# 2 &quot;helloworld.cc&quot; 2</code>。</p><p>经过预编译后的文件任然是文本文件，只是内容经过替换之后文本将膨胀<code>如下可以看到helloworld程序预编译后差不多有900行代码</code>。</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407103014120.png" alt="image-20220407103014120"></p><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p><code>gcc -S helloworld.cc -o helloworld.s</code></p><p>编译将膨胀后的文本文件进行一系列词法分析<code>将语句分割成一系列记号</code>、语法分析<code>对记号进行语法分析产生语法树(表达式树)</code>、语义分析<code>对语法树中的操作进行语义分析(比如两个指针做乘法运算就是不合法的)</code>、并进行优化后产生相应汇编代码。</p><p>经过编译后的文件变成了汇编文件，里面都是汇编指令。<code>注意以.开头的名称并不是指令的助记符，不会被翻译成机器指令，而是给汇编器一些特殊指示，称为汇编指示（Assembler Directive）或伪操作（Pseudo-operation），由于它不是真正的指令所以加个“伪”字。这些都是在链接阶段时编译器需要的辅助信息</code>。</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407104409166.png" alt="image-20220407104409166"></p><h5 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h5><p><code>gcc -c helloworld.cc -o helloworld.o</code></p><p>汇编是将编译后得到的汇编指令<code>翻译</code>成机器指令。</p><p>使用<code>readelf</code>查看目标文件。<code>注意.o目标文件与最终的可执行文件在Linux下都是ELF = &#39;Executable Linkable Format&#39;格式, 在windos下都为PE = &#39;Portable Executable&#39;格式</code>。注意elf文件含有各种段，如下图显示了0~30共31个段，其中就包含有我们熟知的<code>.text .data .rodata .bss段</code>。内核装载ELF文件通过fork和exec系统调用来完成一个程序的装载。</p><p>看<code>.symtab</code>就是我们说的符号表，表项的Ndx字段<code>Ndx == UND</code>为未定义的说明该符号是在其他模块定义，如果链接时在其他模块也找不到该符号就会产生链接错误。</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407154425527.png" alt="image-20220407154425527"></p><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p><code>ld helloworld.o -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2  -o helloworld -e main</code>。</p><p>其中-lc链接libc.so.6，还要使用到动态链接器<code>/lib64/ld-linux-x86-64.so.2</code>，-e是指定入口函数为main<code>(默认是指定为_start函数, 但调用那个函数还要链接其他模块)</code>。</p><p>运行helloworld报段错误，猜测与_start函数有关。</p><p>【helloworld】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407155058442.png" alt="image-20220407155058442"></p><h3 id="链接的重定向"><a href="#链接的重定向" class="headerlink" title="链接的重定向"></a>链接的重定向</h3><p>用下面的几个文件做演示。</p><p><code>注意include和extern的区别！假设在头文件a.h中定义了全局变量后，若用include导入全局变量，则链接时c.o包含该符号，同时a.o也包含了该符号，最终导致链接时出现符号重复定义错误。这里我将a.h的全局变量定义为extern类型，并且在a.cc中真正定义该全局变量。由此一来，链接时仅有a.o包含该符号</code>。</p><p>为什么b.h中的全局变量没加extern关键字？因为我是在c.cc中用extern声明了要使用的b中的符号，并没有使用include包含b.h，而最后将b.cc一起进行编译链接。链接时c.o会在b.o中找到外部符号。</p><h5 id="a-h和a-cc"><a href="#a-h和a-cc" class="headerlink" title="a.h和a.cc"></a>a.h和a.cc</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// a.h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LINK_A_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LINK_A_H</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> a_global_int_uninit;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> a_global_int_init;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">// a.cc</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;a.h&quot;</span></span><br><br><span class="hljs-keyword">int</span> a_global_int_uninit = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> a_global_int_init = <span class="hljs-number">333</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s(%d)\n&quot;</span>, __FUNCTION__, x);<br>    <span class="hljs-keyword">return</span> a_global_int_init;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-h和b-cc"><a href="#b-h和b-cc" class="headerlink" title="b.h和b.cc"></a>b.h和b.cc</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// b.h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LINK_B_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LINK_B_H</span><br><br><span class="hljs-keyword">int</span> b_global_int_uninit = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> b_global_int_init = <span class="hljs-number">22</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">b_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">// b.cc</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;b.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">b_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s(%d)\n&quot;</span>, __FUNCTION__, x);<br>    <span class="hljs-keyword">return</span> b_global_int_init;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-cc"><a href="#c-cc" class="headerlink" title="c.cc"></a>c.cc</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// c.cc</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;a.h&quot;</span></span><br><br><span class="hljs-keyword">int</span> c_global_int_uninit = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> c_global_int_init = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> b_global_int_init;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">b_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">c_global_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s(%d)\n&quot;</span>, __FUNCTION__, x);<br>    <span class="hljs-keyword">return</span> c_global_int_init;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    a_global_func(a_global_int_init);<br>    b_global_func(b_global_int_init);<br>    c_global_func(c_global_int_init);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h5 id="编译出每个模块的目标文件"><a href="#编译出每个模块的目标文件" class="headerlink" title="编译出每个模块的目标文件"></a>编译出每个模块的目标文件</h5><p><code>gcc -c c.cc b.cc a.cc</code></p><p>该命令会产生所有模块的目标文件c.o、b.o、a.o。这些目标文件中的代码不是地址无关代码，因此不能用这类.o文件创建动态库。</p><p>使用<code>-fPIC参数</code>来生成<code>Position Independent Code</code>地址无关代码，加了该参数后得到的.o文件才能创建动态库。</p><p><code>gcc -c -fPIC c.cc b.cc a.cc</code></p><h5 id="静态链接【链接时重定位，链接该段时知道符号的地址，从而直接修改文件中的符号地址】"><a href="#静态链接【链接时重定位，链接该段时知道符号的地址，从而直接修改文件中的符号地址】" class="headerlink" title="静态链接【链接时重定位，链接该段时知道符号的地址，从而直接修改文件中的符号地址】"></a>静态链接【链接时重定位，链接该段时知道符号的地址，从而直接修改文件中的符号地址】</h5><p>所谓的静态库实际上就是打包一堆.o目标文件，最终形成一个.a文件称为静态库。</p><p>使用<code>ar -r libab.a a.o b.o</code>将a.o和b.o打包成静态库ab。一般打包后的静态库我们用名字libxxx.a表示一个静态库xxx，从而与普通的.o文件区分开。</p><p>静态链接时链接器如何知道哪些符号需要重定位呢？静态链接包含两个步骤(分配合并后的地址空间，合并时要重定位符号)。 显然连接器在分配好地址空间后就已经知道各符号在什么地址，比如<code>.text</code>代码段有要重定位的地方，那么就会有一个<code>.rel.text段</code>，该段包含了代码段的重定位表，该表每个表项指定了在<code>.text段中偏移量为x的地方，使用什么重定位修正方法(绝对寻址修正/相对寻址修正)，该符号为y</code>。同样的，如果<code>.data</code>数据段有要重定位的地方，那么就会有一个<code>.rel.data段</code>，该段包含了数据段的重定位表。</p><p>【a.o】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407141832992.png" alt="image-20220407141832992"></p><p>【b.o】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407141939350.png" alt="image-20220407141939350"></p><p>【libab.a】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407142133364.png" alt="image-20220407142133364"></p><p>明显可以看到libab.a就是将a.o和b.o放到同一个文件中而已！</p><p>接下来我用<code>ld</code>链接静态库libab.o和目标文件c.o。</p><p><code>ld c.o libab.a -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2  -o static_link_c -e main</code>。其中-lc链接libc.so.6，还要使用到动态链接器<code>/lib64/ld-linux-x86-64.so.2</code>，-e是指定入口函数为main<code>(默认是指定为_start函数, 但调用那个函数还要链接其他模块)</code>。</p><p>【执行结果】</p><p>可以分析一下为啥出现了段错误，应该与_start函数有关！</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407144744642.png" alt="image-20220407144744642"></p><p>【static_link_c】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407144547276.png" alt="image-20220407144547276"></p><h5 id="动态链接【装载时链接，边装载边链接。装载时重定位，装载该段时才知道符号的地址，使全局偏移量表GOT获取符号地址】"><a href="#动态链接【装载时链接，边装载边链接。装载时重定位，装载该段时才知道符号的地址，使全局偏移量表GOT获取符号地址】" class="headerlink" title="动态链接【装载时链接，边装载边链接。装载时重定位，装载该段时才知道符号的地址，使全局偏移量表GOT获取符号地址】"></a>动态链接【装载时链接，边装载边链接。装载时重定位，装载该段时才知道符号的地址，使全局偏移量表GOT获取符号地址】</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">需要注意的是使用dlopen是运行时链接，在运行时重定位。<br></code></pre></td></tr></table></figure><p>所谓的动态库实际上就是打包一堆.o目标文件，最终形成一个.so文件称为动态库。</p><p>使用<code>gcc -shared -fPIC libab.so a.o b.o</code>将a.o和b.o打包成动态库ab。一般打包后的动态库我们用名字libxxx.so表示一个动态库xxx，从而与普通的.o文件区分开。</p><p>【a.o】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407150028637.png" alt="image-20220407150028637"></p><p>【b.o】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407150116650.png" alt="image-20220407150116650"></p><p>【libab.so】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407150218268.png" alt="image-20220407150218268"></p><p>接下来我用<code>ld</code>链接动态库libab.so和目标文件c.o。</p><p><code>ld c.o libab.so -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2  -o dynamic_link_c -e main</code>。其中-lc链接libc.so.6，还要使用动态链接器<code>/lib64/ld-linux-x86-64.so.2</code>，-e是指定入口函数为main<code>(默认是指定为_start函数, 但调用那个函数还要链接其他模块)</code>。</p><p>【执行结果】</p><p>可以分析一下为啥出现了段错误，应该与_start函数有关！</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407150931567.png" alt="image-20220407150931567"></p><p>【dynamic_link_c】</p><p><img src="/2022/04/07/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/image-20220407151343556.png" alt="image-20220407151343556"></p><h3 id="全局偏移表GOT和过程链接表PLT"><a href="#全局偏移表GOT和过程链接表PLT" class="headerlink" title="全局偏移表GOT和过程链接表PLT"></a>全局偏移表GOT和过程链接表PLT</h3><h3 id="ELF文件的装载过程"><a href="#ELF文件的装载过程" class="headerlink" title="ELF文件的装载过程"></a>ELF文件的装载过程</h3><p>大致流程：首先在用户层面,bash进程会调用 fork系统调用创建一个新的进程, 然后新的进程调用execve()系统调用执行指定的ELF文件, 原先的bash进程 返回继续等待过程启动的新进程结束, 然后继续等待用户输入命令。</p><p>使用execve()要包含头文件unistd.h。</p><p>在进入execve系统调用后, Linux内核开始进入真正的装载工作。</p><h5 id="execve-过程"><a href="#execve-过程" class="headerlink" title="execve()过程"></a>execve()过程</h5><p>1、在内核中,execve系统调用相应的入口是sys_execve()</p><p>2、在进行一些参数的复制后, 调用do_execve()</p><p>3、do_execve()会先查找被执行的文件, 如果找到了, 读前128个字节,</p><p>4、因为linux支持的可执行文件不止一种, a.out、java等</p><p>5、我们通过魔数来判断究竟是哪种可执行文件</p><p>6、当do_execve()读取了128个byte后, 调用search_binary_handle()去搜索和匹配 合适的 可执行文件装载处理过程</p><p>7、比如ELF可执行文件对应的装载过程的函数 名叫 load_elf_binary</p><p>8、a.out叫 load_aout_binary</p><p>9、脚本类叫 load_script_binary</p><p>10、load_elf_binary</p><ul><li><p>10.1、检查文件有效性 比如魔数, segment数量</p></li><li><p>10.2、寻找.interp段, 设置动态链接器路径</p></li><li><p>10.3、根据ELF文件程序头表的描述 ,对ELF文件进行映射, 比如代码, 数据,只读数据</p></li><li><p>10.4、初始化ELF进程环境,</p></li><li><p>10.5、将系统调用的返回地址修改成ELF文件可执行文件的入口点</p><p>对于静态链接而言入口点是e_entry所指的地址</p><p>对于动态链接而言入口点是动态链接器</p></li></ul><p>11、当load_elf_binary()执行完成后,系统调用的返回地址已经修改成被装载的ELF文件的入口地址了, sys_execve()系统调用从内核态返回到用户态的时候, EIP寄存器直接跳转到了 ELF程序的入口地址。</p><p>12、至此, 新的程序开始执行, ELF可执行文件装载完成。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换根DP</title>
    <link href="/2022/04/06/%E6%8D%A2%E6%A0%B9DP/"/>
    <url>/2022/04/06/%E6%8D%A2%E6%A0%B9DP/</url>
    
    <content type="html"><![CDATA[<h3 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h3><p><a href="https://www.acwing.com/problem/content/4384/">题目链接1</a></p><p><img src="/2022/04/06/%E6%8D%A2%E6%A0%B9DP/image-20220406144930124.png" alt="image-20220406144930124"></p><p><img src="/2022/04/06/%E6%8D%A2%E6%A0%B9DP/image-20220406144951127.png" alt="image-20220406144951127"></p><p><img src="/2022/04/06/%E6%8D%A2%E6%A0%B9DP/image-20220406145007742.png" alt="image-20220406145007742"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">// 树形DP之换根DP</span><br><span class="hljs-comment">// 假设我们已知以当前节点u为根的代价为f[u]</span><br><span class="hljs-comment">// 则以当前节点的邻接点v为根的代价为 f[v] = f[u] + (is_edge[u][v]?1:-1);</span><br><br><span class="hljs-comment">// 先以任意一个节点u为根节点计算出f[u]</span><br><span class="hljs-comment">// 之后利用换根DP求出所有f。</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">200010</span>, M = <span class="hljs-number">2</span>*N;<br><span class="hljs-keyword">int</span> h[N], e[M], w[M], ne[M], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    e[tot] = v, w[tot] = c, ne[tot] = h[u], h[u] = tot ++;<br>&#125;<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> father)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; ~i; i = ne[i])&#123;<br>        <span class="hljs-keyword">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span>(v == father) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        f[u] += f[v] + (w[i] == <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);  <span class="hljs-comment">// 是uv边则代价加0，vu边则代价加1 </span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> father)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; ~i; i = ne[i])&#123;<br>        <span class="hljs-keyword">int</span> v = e[i];<br>        <span class="hljs-keyword">if</span>(v == father) <span class="hljs-keyword">continue</span>;<br>        <br>        f[v] = f[u] + (w[i] == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>); <span class="hljs-comment">// 是uv边则代价加1，vu边则代价减1</span><br>        <span class="hljs-built_in">dfs2</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i ++)&#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-built_in">add</span>(u, v, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">add</span>(v, u, <span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    <span class="hljs-comment">// 此时f[1]就是以1为根的代价</span><br> <br>    <span class="hljs-comment">// 换根DP</span><br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    <br>    <br>    <span class="hljs-keyword">int</span> min_cost = *<span class="hljs-built_in">min_element</span>(f+<span class="hljs-number">1</span>, f+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min_cost);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-keyword">if</span>(f[i] == min_cost)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c库的signal使用</title>
    <link href="/2022/03/28/c%E5%BA%93%E7%9A%84signal%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/28/c%E5%BA%93%E7%9A%84signal%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="c库的signal使用"><a href="#c库的signal使用" class="headerlink" title="c库的signal使用"></a>c库的signal使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span>  <span class="hljs-comment">// 加上动态库 -lrt</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br><br><br><br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><br>thread td1, td2;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">signal_handle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signo)</span></span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;signal processing&quot;</span>);<br><br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;exit signal_handle&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">t1</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">timer_t</span> tid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigevent</span> <span class="hljs-title">sigev</span>;</span><br>    sigev.sigev_value.sival_int = <span class="hljs-number">666</span>;                <span class="hljs-comment">//也是标识定时器的，回调函数可以获得 </span><br>    sigev.sigev_signo = SIGINT;<br>    sigev.sigev_notify = SIGEV_SIGNAL;                <span class="hljs-comment">//线程通知的方式</span><br>    <span class="hljs-comment">// SIGEV_NONE：空的提醒，事件发生时不做任何事情</span><br>    <span class="hljs-comment">// SIGEV_SIGNAL：向进程发送sigev_signo中指定的信号，具体详细的状况参照上面的文档，这涉及到sigaction的使用</span><br>    <span class="hljs-comment">// SIGEV_THREAD：通知进程在一个新的线程中启动sigev_notify_function函数，函数的实参是sigev_value，系统API自动启动一个线程，我们不用显式启动。</span><br><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == <span class="hljs-built_in">timer_create</span>(CLOCK_MONOTONIC, &amp;sigev, &amp;tid))&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;timer_create failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">itimerspec</span> <span class="hljs-title">ts</span>;</span>               <span class="hljs-comment">// 定时器详细说明</span><br>    ts.it_interval.tv_sec = <span class="hljs-number">0</span>;<br>    ts.it_interval.tv_nsec = <span class="hljs-number">0</span>;<br>    ts.it_value.tv_sec = <span class="hljs-number">2</span>;<br>    ts.it_value.tv_nsec = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">timer_settime</span>(tid, <span class="hljs-number">0</span>, &amp;ts, <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">signal</span>(SIGINT, signal_handle);  <span class="hljs-comment">// 内核时钟的回调函数</span><br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;exit t1&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">t2</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    thread &#123;t1&#125;.<span class="hljs-built_in">swap</span>(td1);<br>    thread &#123;t2&#125;.<span class="hljs-built_in">swap</span>(td2);<br><br>    td1.<span class="hljs-built_in">join</span>();<br>    td2.<span class="hljs-built_in">join</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书籍学习</title>
    <link href="/2022/03/27/%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/27/%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="go学习"><a href="#go学习" class="headerlink" title="go学习"></a>go学习</h3><h5 id="1、《Go语言学习笔记》雨痕-著"><a href="#1、《Go语言学习笔记》雨痕-著" class="headerlink" title="1、《Go语言学习笔记》雨痕/著"></a>1、《Go语言学习笔记》雨痕/著</h5><h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><h3 id="RPC学习"><a href="#RPC学习" class="headerlink" title="RPC学习"></a>RPC学习</h3><h5 id="1、《gRPC与云原生应用开发》卡山·因德拉西里-著-张卫滨-译"><a href="#1、《gRPC与云原生应用开发》卡山·因德拉西里-著-张卫滨-译" class="headerlink" title="1、《gRPC与云原生应用开发》卡山·因德拉西里/著 张卫滨/译"></a>1、《gRPC与云原生应用开发》卡山·因德拉西里/著 张卫滨/译</h5><h5 id="2、《深入理解序列化与反序列化》洪潘安-著"><a href="#2、《深入理解序列化与反序列化》洪潘安-著" class="headerlink" title="2、《深入理解序列化与反序列化》洪潘安/著"></a>2、《深入理解序列化与反序列化》洪潘安/著</h5><h3 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h3><h5 id="1、《深入理解Linux内核》"><a href="#1、《深入理解Linux内核》" class="headerlink" title="1、《深入理解Linux内核》"></a>1、《深入理解Linux内核》</h5><h5 id="2、《Linux内核分析及应用》-陈科-著"><a href="#2、《Linux内核分析及应用》-陈科-著" class="headerlink" title="2、《Linux内核分析及应用》 陈科/著"></a>2、《Linux内核分析及应用》 陈科/著</h5><h5 id="3、《庖丁解牛Linux内核分析》-孟宁-娄嘉鹏-刘宇栋-著"><a href="#3、《庖丁解牛Linux内核分析》-孟宁-娄嘉鹏-刘宇栋-著" class="headerlink" title="3、《庖丁解牛Linux内核分析》 孟宁 娄嘉鹏 刘宇栋/著"></a>3、《庖丁解牛Linux内核分析》 孟宁 娄嘉鹏 刘宇栋/著</h5><h3 id="其他书籍"><a href="#其他书籍" class="headerlink" title="其他书籍"></a>其他书籍</h3><h5 id="1、《深入浅出DPDK》"><a href="#1、《深入浅出DPDK》" class="headerlink" title="1、《深入浅出DPDK》"></a>1、《深入浅出DPDK》</h5><h5 id="2、《程序员的自我修养-链接、装载与库》-俞甲子-石凡-潘爱民-著"><a href="#2、《程序员的自我修养-链接、装载与库》-俞甲子-石凡-潘爱民-著" class="headerlink" title="2、《程序员的自我修养-链接、装载与库》 俞甲子 石凡 潘爱民/著"></a>2、《程序员的自我修养-链接、装载与库》 俞甲子 石凡 潘爱民/著</h5>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>倍增法求LCA</title>
    <link href="/2022/03/27/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82LCA/"/>
    <url>/2022/03/27/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82LCA/</url>
    
    <content type="html"><![CDATA[<h3 id="倍增法求LCA模板题"><a href="#倍增法求LCA模板题" class="headerlink" title="倍增法求LCA模板题"></a>倍增法求LCA模板题</h3><p><a href="https://www.luogu.com.cn/problem/P3379">题目链接</a></p><p><img src="/2022/03/27/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82LCA/image-20220327145624546.png" alt="image-20220327145624546"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500010</span>, M = <span class="hljs-number">2</span>*N;<br><br><br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    e[tot] = y, ne[tot] = h[x], h[x] = tot ++;<br>&#125;<br><br><span class="hljs-comment">// 记录每个节点的深度</span><br><span class="hljs-keyword">int</span> deep[N];<br><span class="hljs-comment">// 记录每个节点的第2^j个祖先</span><br><span class="hljs-keyword">int</span> father[N][<span class="hljs-number">20</span>];  <span class="hljs-comment">// 最大高度为N，则最多是第2^log(N)个祖先</span><br><span class="hljs-comment">// 用来保存log值，方便计算对应高度处于的下标</span><br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; height2idx;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal_deep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[root]; ~i; i = ne[i])&#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span>(deep[j] == <span class="hljs-number">-1</span>)&#123;<br>            father[j][<span class="hljs-number">0</span>] = root;   <span class="hljs-comment">// 顺便初始化一下父亲节点</span><br>            deep[j] = deep[root] + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">cal_deep</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal_father</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">// 类似区间dp的思想</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">20</span>; ++j)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)&#123;  <span class="hljs-comment">// 如果是从0开始编号则遍历[0, n)</span><br>            <span class="hljs-keyword">if</span>(father[i][j<span class="hljs-number">-1</span>] != <span class="hljs-number">-1</span>)&#123;<br>                father[i][j] = father[father[i][j<span class="hljs-number">-1</span>]][j<span class="hljs-number">-1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;-x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-comment">// 假定x是更深的节点</span><br>    <span class="hljs-keyword">if</span>(deep[x] &lt; deep[y]) <span class="hljs-built_in">swap</span>(x, y);<br><br>    <span class="hljs-comment">// x跳到和y同一深度</span><br>    <span class="hljs-keyword">int</span> delta = deep[x] - deep[y];<br>    <span class="hljs-keyword">while</span>(delta)&#123;<br>        <span class="hljs-keyword">int</span> height = <span class="hljs-built_in">lowbit</span>(delta);<br>        x = father[x][height2idx[height]];<br>        delta -= height;<br>    &#125;<br><br>    <span class="hljs-comment">// 直接重合了</span><br>    <span class="hljs-keyword">if</span>(x == y) <span class="hljs-keyword">return</span> x;<br><br>    <span class="hljs-comment">// x和y一起上跳, 最远可以跳log(deep[x]),取最高位的1作为father[x][idx]的最后一个不为-1的跳跃距离</span><br>    <span class="hljs-keyword">int</span> height = deep[x];<br>    <span class="hljs-keyword">while</span>(height != <span class="hljs-built_in">lowbit</span>(height)) height -= <span class="hljs-built_in">lowbit</span>(height);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height2idx[height]; i &gt;= <span class="hljs-number">0</span>; i --)&#123;<br>        <span class="hljs-keyword">int</span> fx = father[x][i], fy = father[y][i];<br>        <span class="hljs-keyword">if</span>(fx != fy)&#123;  <span class="hljs-comment">// 还未到公共祖先</span><br>            x = fx;<br>            y = fy;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// x和y的父节点必然重合</span><br>    <span class="hljs-keyword">return</span> father[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n, q, root;<br>    cin &gt;&gt; n &gt;&gt; q &gt;&gt; root;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>    <span class="hljs-built_in">memset</span>(deep, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(deep));<br>    <span class="hljs-built_in">memset</span>(father, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(father));<br>    <span class="hljs-comment">// 输入n-1条边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)&#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-built_in">add</span>(x, y);<br>        <span class="hljs-built_in">add</span>(y, x);<br>    &#125;<br>    <br>    deep[root] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cal_deep</span>(root);<br>    <span class="hljs-built_in">cal_father</span>(n);<br><br>    <span class="hljs-comment">// 预处理一些log值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i)&#123;<br>        height2idx[<span class="hljs-number">1</span>&lt;&lt;i] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(q --)&#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        cout &lt;&lt; <span class="hljs-built_in">LCA</span>(x, y) &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动后端开发hr面</title>
    <link href="/2022/03/25/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91hr%E9%9D%A2/"/>
    <url>/2022/03/25/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91hr%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="字节跳动后端开发hr面"><a href="#字节跳动后端开发hr面" class="headerlink" title="字节跳动后端开发hr面"></a>字节跳动后端开发hr面</h3><p>1、跨专业</p><p>2、优势</p><p>3、沟通方面</p><p>4、介绍项目</p><p>5、性格</p><p>6、优缺点</p><p>7、意向地</p><p>8、哪些offer</p><p>9、考虑转正吗</p><p>10、如果同时接到offer，会来字节吗？</p><p>11、最快下周三通知offer</p><p>12、工作时间早上10点到晚上7点</p><p>13、前面几面的面评都挺好的</p><p>14、有没有什么压力特别大的时候</p><p>15、压力特别大的时候你会怎么做？</p><p>16、非科班实习会碰到什么难点，挑战？</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动后端开发三面</title>
    <link href="/2022/03/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%89%E9%9D%A2/"/>
    <url>/2022/03/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%89%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="字节跳动后端开发三面"><a href="#字节跳动后端开发三面" class="headerlink" title="字节跳动后端开发三面"></a>字节跳动后端开发三面</h3><p>1、序列化模块</p><p>2、描述信息导致后续字段溢出</p><p>3、零拷贝</p><p>4、客户端集群RPC调用服务器集群时，某个方法出现大规模的超时错误，怎么实现熔断？</p><p>5、客户端的异步调用</p><p>线程+回调</p><p>6、为什么基类析构要是虚函数？</p><p>7、怎么调试coredump文件</p><p>ulimit打开core文件保存，编译时加-g选项，gdb ./helloworld core。</p><p>8、gdb查看线程</p><p>info threads</p><p>thread 1</p><p>9、了解grpc怎么实现熔断的</p><p>【下游是提供服务的一方，而上游是调用服务的一方】</p><p>下游设置接口调用时间，上游调用下游接口时，若在规定时间内没有返回结果下游就认为本次调用下游接口失败。上游会统计规定时间内该下游接口调用失败的次数，若超出一定阈值后，便触发了熔断保护机制关闭该接口一定时间。关闭接口后，客户对上游的调用会直接快速返回失败，避免因下游故障导致并发请求下游时整个系统的故障。</p><p>熔断时间到期后，上游允许一次真正调用下游接口，如果调用成功，则关闭熔断器，恢复该下游接口的正常调用，否则将继续触发熔断保护机制关闭该接口一定时间。</p><p>10、服务降级</p><p>在服务压力过大时，关闭非核心功能，避免核心功能被拖垮。</p><h3 id="调用方做服务熔断，被调用方做服务降级"><a href="#调用方做服务熔断，被调用方做服务降级" class="headerlink" title="调用方做服务熔断，被调用方做服务降级"></a>调用方做服务熔断，被调用方做服务降级</h3><p>算法题：滑动窗口</p><p>技术栈：golang，kafka</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动后端开发二面</title>
    <link href="/2022/03/18/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/"/>
    <url>/2022/03/18/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="字节跳动后端开发二面"><a href="#字节跳动后端开发二面" class="headerlink" title="字节跳动后端开发二面"></a>字节跳动后端开发二面</h3><p>1、zookeeper、etcd服务发现</p><p>2、CAP。【一致性和可用性是矛盾的，因为一致性要同步，那么就必然不能保证随时可用。】</p><ul><li><p>一致性：在分布式系统中的所有数据备份，在同一时刻是否同样的值。</p></li><li><p>可用性：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。</p></li><li><p>分区容错性：系统能够容忍节点之间的网络通信的故障。</p></li></ul><p>3、获取分布式锁是强一致性的吗</p><p>是</p><p>4、select和epoll</p><p>5、MySQL的explain(执行计划)</p><p>type(【该字段显示了MySQL如何查找表中记录】const常量扫描，system系统表扫描<code>表中只有一行记录，是const的特例</code>，all全表扫描，range范围查询，index索引查询等等)、key(实际使用的索引)、possible_keys(可能用到的索引)、rows(扫描的行数)</p><p>6、MySQL查询优化</p><p>7、b+树和红黑树</p><p>8、b+树和b树</p><p>9、PCB包含哪些东西</p><p>进程标识符，进程调度信息，进程上下文(如程序状态字寄存器、进程栈指针等等)</p><p>10、四层负载均衡和七层负载均衡的区别</p><p>11、企业中更常用哪种策略</p><p>七层负载均衡</p><p>12、new和malloc区别</p><p>13、go的defer、panic</p><p>panic</p><p>14、进程调度算法</p><p>15、批处理操作系统、实时操作系统、分时操作系统</p><p>16、STL的线程安全</p><p>17、SQL的join</p><p>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录</p><p>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</p><p>inner join(等值连接) 只返回两个表中联结字段相等的行</p><p>outer join(等值连接) 返回左右两表的所有记录</p><p>字节跳动-国际支付</p><p>两块木板能获得的最大容积</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里存储基础技术hr面</title>
    <link href="/2022/03/16/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AFhr%E9%9D%A2/"/>
    <url>/2022/03/16/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AFhr%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="阿里存储基础技术hr面"><a href="#阿里存储基础技术hr面" class="headerlink" title="阿里存储基础技术hr面"></a>阿里存储基础技术hr面</h3><p>1、为什么跨专业</p><p>2、非科班的你有啥优势</p><p>3、为什么选择阿里巴巴</p><p>4、职业规划</p><p>5、介绍项目</p><p>6、为什么之前没有奖学金</p><p>7、为什么不喜欢北京上海</p><h5 id="夸父"><a href="#夸父" class="headerlink" title="夸父"></a>夸父</h5><p>负责阿里云自研飞天操作系统内核的夸父模块，为阿里巴巴经济体尤其是存储产品提供高性能、高可用的系统和网络服务。</p><blockquote><h5 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h5><ul><li>负责高性能系统的设计、实现相关工作，包括任务调度、内存管理等； </li><li>负责数据中心内高性能网络的设计、实现相关工作，以满足低延迟、高吞吐的性能需求 </li><li>负责网络性能调优、高质量基础库的设计与实现； </li><li>负责系统框架监控、运维系统的设计与实现<br>加分项<br>a. 熟悉DPDK、grpc、seastar等框架<br>b. 熟悉TCP、RDMA、QUIC等网络协议</li></ul></blockquote><h5 id="女娲"><a href="#女娲" class="headerlink" title="女娲"></a>女娲</h5><p>阿里云自研飞天操作系统的分布式协同基础服务，产品支持着阿里云的计算、存储、网络等几乎所有云产品，支持从单地域到全球化各个规模下的数据协同。</p><blockquote><h5 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h5><ul><li>负责基于Paxos、Raft等分布式一致性算法打造分布式协调、分布式存储、分布式锁、消息队列等基础服务 </li><li>负责支持着阿里云的计算、存储、网络等几乎所有云产品 </li><li>负责打造分布式一致性技术中台，探索EPaxos等无主的分布式一致性算法的应用与落地 </li><li>负责支持从单地域到全球化各个规模下的数据协同。</li></ul></blockquote><h5 id="谛听"><a href="#谛听" class="headerlink" title="谛听"></a>谛听</h5><p>负责建设阿里云内核的Tracing设施。现已服务多个主流云产品，跟踪百万+规模的机器，日产PB级别数据。通过对海量trace数据的分析，可以掌握真实业务负载在大规模云环境中的脉络轨迹，是提高系统性能、稳定性以及用户终端体验的第一线</p><blockquote><h5 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h5><ul><li>负责分析海量trace数据，包括但不限于异常检测、预测、定位，软件故障发现，关键路径学习等 </li><li>负责设计和实现适合Trace数据特点的高效存储和SQL查询引擎，优化、提升现有系统，降低成本 </li><li>负责从操作系统内核、CPU、专用协处理器提取新的跟踪数据，通过对各种同步原语的语义、实现的了解，构建超高性能Tracing基础设施</li></ul></blockquote><p><img src="/2022/03/16/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AFhr%E9%9D%A2/C25138A38448347F53A54E99B58FB01C.png" alt="2023届应届生招聘.png"></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动后端开发一面</title>
    <link href="/2022/03/14/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/"/>
    <url>/2022/03/14/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="字节跳动后端开发一面"><a href="#字节跳动后端开发一面" class="headerlink" title="字节跳动后端开发一面"></a>字节跳动后端开发一面</h3><p>1、RPC项目流程介绍</p><p>2、select poll epoll</p><p>3、最大路径和(动态规划)，排列最大数(排序)</p><p>4、http状态码，长连接和短连接，一个tcp连接可以发送多条http报文吗？</p><p>5、poll的语义</p><p>轮询</p><p>6、http和tcp的keepalive</p><p>http的Keep-Alive是长连接的意思，在用户态实现，表示一次http通信之后不立即关闭本次的tcp连接，使得接下来的http请求能够复用这一条tcp连接。</p><p>tcp的keepalive是tcp连接的保活机制，在内核态实现，表示在一段时间内(一般是两个小时)对端没有回复探测报文时直接关闭tcp连接。因为没有保活时，当对端处理数据较慢时，可能会导致本次通信超时，从而关闭连接。</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS序</title>
    <link href="/2022/03/07/DFS%E5%BA%8F/"/>
    <url>/2022/03/07/DFS%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="DFS序"><a href="#DFS序" class="headerlink" title="DFS序"></a>DFS序</h3><h5 id="注意-使用dfs序将对子树的操作转化为对区间的操作"><a href="#注意-使用dfs序将对子树的操作转化为对区间的操作" class="headerlink" title="注意: 使用dfs序将对子树的操作转化为对区间的操作"></a>注意: 使用dfs序将对子树的操作转化为对区间的操作</h5><p>应用：DFS序将树形结构转换为线性结构，然后用线段树或树状数组维护区间。</p><p><a href="https://www.acwing.com/problem/content/description/4313/">题目链接1</a></p><p><img src="/2022/03/07/DFS%E5%BA%8F/image-20220307120833839.png" alt="image-20220307120833839"></p><p><img src="/2022/03/07/DFS%E5%BA%8F/image-20220307120851901.png" alt="image-20220307120851901"></p><p><img src="/2022/03/07/DFS%E5%BA%8F/image-20220307120908365.png" alt="image-20220307120908365"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">200010</span>;<br><br><span class="hljs-keyword">int</span> n, q;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; g[N];<br><br><span class="hljs-keyword">int</span> in[N];  <span class="hljs-comment">// DFS入序</span><br><span class="hljs-keyword">int</span> out[N]; <span class="hljs-comment">// DFS出序</span><br><br><span class="hljs-keyword">int</span> in_seq_to_node[N];  <span class="hljs-comment">// 由入序检索节点</span><br><br><span class="hljs-comment">// 序号</span><br><span class="hljs-keyword">int</span> seq;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br>    seq ++;<br>    in[root] = seq;<br>    in_seq_to_node[seq] = root;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next_root: g[root])&#123;<br>        <span class="hljs-built_in">dfs</span>(next_root);<br>    &#125;<br>    out[root] = seq;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">int</span> a, b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>        g[a].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br><br>    seq = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">while</span>(q --)&#123;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-comment">// a的入序为in[a]</span><br>        <span class="hljs-comment">// a的第b个节点的入序应该是in[a]+b-1，对应节点k是in_seq_to_node[in[a]+b-1]</span><br>        <span class="hljs-comment">// 对应节点k的出序应该要小于等于a的出序</span><br>        <span class="hljs-keyword">if</span>(in[a]+b<span class="hljs-number">-1</span> &gt; n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> k = in_seq_to_node[in[a]+b<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>(out[k] &gt; out[a]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, k);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux命令</title>
    <link href="/2022/03/02/linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/02/linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css">ps -T<br><span class="hljs-attribute">top</span> -H<br>查看线程组中包含哪些线程，使用-<span class="hljs-selector-tag">p</span>指定线程组的进程id<br><br>nm<br>查看可执行文件的符号表信息<br><br>ldd<br>查看可执行文件链接的动态库<br><br><span class="hljs-attribute">top</span><br>cpu、内存、中断等等<br><br>free<br>内存、磁盘的交换分区<br><br>fdisk<br>所有磁盘(包括未挂载的)<br><br>df<br>挂载磁盘的使用量<br><br>du<br>文件大小<br><br>netstat<br>查看网络相关信息<br><br>vmstat<br>查看虚拟内存相关信息<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mmap原理</title>
    <link href="/2022/03/02/mmap%E5%8E%9F%E7%90%86/"/>
    <url>/2022/03/02/mmap%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="先说现象"><a href="#先说现象" class="headerlink" title="先说现象"></a>先说现象</h3><p>mmap是file_operations中的成员，open文件时进程获得了文件描述符，发起read系统调用，内核read磁盘，copy_to_user到用户内存中。而采用了mmap之后，建立了内存到磁盘物理地址的映射【页表是逻辑地址到物理地址的映射】，我们此时不采用read而是直接去访问内存，然后触发缺页中断，此时再将磁盘数据直接拷贝到用户内存。若我们直接修改了这一片内存的数据，那么这片内存就打上了脏标签，之后页面置换或定时刷新时将写回脏页。</p><h3 id="mmap原理"><a href="#mmap原理" class="headerlink" title="mmap原理"></a>mmap原理</h3><p>mmap就是建立虚拟地址和物理地址的映射。</p><p>当在用户态调用mmap后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mmap</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *__addr, <span class="hljs-keyword">size_t</span> __len, <span class="hljs-keyword">int</span> __port,<span class="hljs-keyword">int</span> __flags,<span class="hljs-keyword">int</span> __fd <span class="hljs-keyword">__off_t</span> __offset)</span></span>;<br></code></pre></td></tr></table></figure><p>将会转移到调用内核态的设备驱动中定义的mmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);<br></code></pre></td></tr></table></figure><p>而驱动中mmap又是调用了一个函数remap_pfn_range来实现磁盘物理地址的映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">remap_pfn_range</span><span class="hljs-params">(struct vm_area_struct *, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> addr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> pfn, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> size, <span class="hljs-keyword">pgprot_t</span>)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>大致流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rst">### 映射过程<br>1、用户态调用mmap<br>用户态mmap在进程的虚拟地址空间中划分出来一块连续的空间，用一个虚拟地址描述结构体保存该空间的相关信息。然后将这个结构体插入到进程的内存描述符链表中。<br>**如果不是匿名页面**<br>2、在内核中已打开文件集合中找到通过待映射fd的文件结构体struct file<br>通过文件结构体找到了对应的file_operations模块，通过file_operations模块找到mmap函数的地址。<br>3、调用内核态的mmap<br>内核态mmap函数通过虚拟文件系统的inode模块定位到文件磁盘物理地址。<br>4、调用remap_pfn_range函数建立页表<br>即实现了文件地址和虚拟地址区域的映射关系。【此时，这片虚拟地址并没有任何数据关联到主存中。】<br><br>### 访问过程<br>1、进程的读或写操作访问虚拟地址空间，通过查询页表，发现这一段地址并不在内存中。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。<br>2、内核发起请求调页过程。<br>3、调页过程先在页缓存中寻找需要访问的物理页，如果没有则把所缺的页从磁盘读取到mmap映射的内存中。<br>4、如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。<br><br>注：修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。<br></code></pre></td></tr></table></figure><h3 id="普通读写和mmap读写"><a href="#普通读写和mmap读写" class="headerlink" title="普通读写和mmap读写"></a>普通读写和mmap读写</h3><p>在说mmap之前我们先说一下普通的读写文件的原理，进程调用read或是write后会陷入内核，因为这两个函数都是系统调用，进入系统调用后，内核开始读写文件，假设内核在读取文件，内核首先把文件读入自己的内核空间(页缓存)，读完之后进程在内核回归用户态，内核把读入内核内存的数据再copy_to_user拷贝到进程的用户态内存空间。实际上我们同一份文件内容相当于读了两次，先读入内核空间(页缓存)，再从内核空间读入用户空间。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">1、进程发起读文件请求。<br>2、内核通过查找进程文件符表，定位到内核已打开文件集上的文件信息，从而找到此文件的inode。<br>3、inode在address<span class="hljs-built_in">_</span>space上查找要请求的文件页是否已经缓存在页缓存中。如果存在，则直接返回这片文件页的内容。<br>4、如果不存在，则通过inode定位到文件磁盘地址，将数据从磁盘复制到页缓存。之后再次发起读页面过程，进而将页缓存中的数据发给用户进程。<br><br>总结来说，常规文件操作为了提高读写效率和保护磁盘，使用了页缓存机制【比如在驱动中申请一个32个Page的缓冲区，安装磁盘驱动后所有磁盘数据都经过这个页缓冲区来中转】。这样造成读文件时需要先将文件页从磁盘拷贝到页缓存中，由于页缓存处在内核空间，不能被用户进程直接寻址，所以还需要将页缓存中数据页再通过copy<span class="hljs-built_in">_</span>to<span class="hljs-built_in">_</span>user拷贝到内存对应的用户空间中。这样，通过了两次数据拷贝过程，才能完成进程对文件内容的获取任务。写操作也是一样，r在内核空间中不能直接访问用户态的数据(内核空间访问用户空间)，必须要先用copy<span class="hljs-built_in">_</span>from<span class="hljs-built_in">_</span>user拷贝至内核空间，再写回磁盘中（延迟写回），也是需要两次数据拷贝。<br></code></pre></td></tr></table></figure><p>mmap是系统调用，mmap的作用是将进程的虚拟地址空间和文件在磁盘的位置做映射，做映射之后，读写文件虽然同样是调用read和write但是触发的机制已经不一样了（mmap是file_operations中的成员，没mmap之前驱动是将磁盘数据拷贝到内核页缓存空间，mmap之后驱动将磁盘数据拷贝到用户空间）。首先read会改写为读内存操作，读内存的时候，系统查找页表发现该逻辑地址对应的物理地址不在内存中，就触发缺页机制，缺页机制先在交换分区寻找对应的页面，发现没有然后再去通过mmap建立的映射关系，从硬盘上将文件读入物理内存。也就是说mmap把文件直接映射到了用户空间，没有经历内核空间。</p><p>而使用mmap操作文件中，创建新的虚拟内存区域和建立文件磁盘地址和虚拟内存区域映射这两步，没有任何文件拷贝操作。而之后访问数据时发现内存中并无数据而发起的缺页异常过程，可以通过已经建立好的映射关系，只使用一次数据拷贝，就从磁盘中将数据传入内存的用户空间中，供进程使用。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里存储基础技术三面</title>
    <link href="/2022/03/02/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%B8%89%E9%9D%A2/"/>
    <url>/2022/03/02/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%B8%89%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="阿里存储基础技术三面"><a href="#阿里存储基础技术三面" class="headerlink" title="阿里存储基础技术三面"></a>阿里存储基础技术三面</h3><p>1、聊天</p><p>2、动态数组</p><p>3、docker原理</p><p>linux内核的命名空间来隔离容器。本质上是通过不同目录下的文件来隔离。</p><p>4、go的继承(接口继承)的原理</p><p>本质上，Go使用interface实现的功能叫组合，Go是使用组合来实现的继承，说的更精确一点，是使用组合来代替的继承。</p><p>5、程序的编译过程和链接过程</p><p>6、遇到过哪些链接错误</p><h5 id="在头文件声明的函数要全部实现（符号未定义）"><a href="#在头文件声明的函数要全部实现（符号未定义）" class="headerlink" title="在头文件声明的函数要全部实现（符号未定义）"></a>在头文件声明的函数要全部实现（符号未定义）</h5><h5 id="符号版本（symbol-version嵌入汇编-symver）"><a href="#符号版本（symbol-version嵌入汇编-symver）" class="headerlink" title="符号版本（symbol version嵌入汇编 symver）"></a>符号版本（symbol version嵌入汇编 symver）</h5><h5 id="c和c-混用时，要用extern-“C”以c的方式编译c-函数代码"><a href="#c和c-混用时，要用extern-“C”以c的方式编译c-函数代码" class="headerlink" title="c和c++混用时，要用extern “C”以c的方式编译c++函数代码"></a>c和c++混用时，要用extern “C”以c的方式编译c++函数代码</h5><h5 id="使用了线程库但没有通过-lpthread链接"><a href="#使用了线程库但没有通过-lpthread链接" class="headerlink" title="使用了线程库但没有通过-lpthread链接"></a>使用了线程库但没有通过-lpthread链接</h5><p>7、./helloworld发生了什么</p><p><a href="https://blog.csdn.net/jhappen/article/details/5579403">参考解释</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs perl">编写，通过键盘将C代码键入hello.c<br>预处理，将hello.c调用的所有外部库复制合并，对部分<span class="hljs-comment">#类指令处理</span><br>编译，将hello.i编译成为汇编文件hello.s，语句转化为汇编语言<br>汇编，将hello.s会变成为可重定位目标文件hello.o，是二进制但不可执行的文件<br>链接，将hello.o与可重定位目标文件和动态链接库链接成为可执行目标程序hello<br>创建子进程：shell进程调用<span class="hljs-keyword">fork</span>为hello创建子进程<br>运行程序：子进程调用execve函数，execve调用启动加载器将hello程序加载到内存(加载器就是在当前进程中创建新进程的一段代码)，进入程序入口，执行main函数。<br>访问内存：MMU将程序中使用的虚拟内存地址通过页表映射成物理地址进行访问。<br>打印：通过<span class="hljs-keyword">write</span>系统调用将内存内容写道文件描述符为<span class="hljs-number">1</span>的文件(标准输出：屏幕)中<br>结束：main函数执行结束后，shell父进程回收子进程，程序执行结束。<br><br><br><span class="hljs-keyword">fork</span>和execve都是创建新的逻辑执行流，它们的不同之处在于<span class="hljs-keyword">fork</span>创建一个全新的进程，而execve只是在当前进程中加载新的程序。【shell先<span class="hljs-keyword">fork</span>出子进程，然后在子进程中execve执行新任务】<br></code></pre></td></tr></table></figure><p><img src="/2022/03/02/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%B8%89%E9%9D%A2/image-20220311110110193.png" alt="image-20220311110110193"></p><p>shell通过调用某个驻留在存储器中成为加载器（loader）的操作系统代码来运行它。任何Unix程序都可以通过调用execve函数来调用加载器。加载器将可执行目标文件中的代码和数据从磁盘拷贝到存储器中，然后通过跳转到程序的第一条执行或入口（entry point）来运行该程序。</p><p>加载器将可执行文件的相关内容拷贝到代码段和数据段。接下来，加载器跳转到程序的入口点，也就是<code>_start</code>函数的地址。该函数执行一些要在main函数执行之前的操作。</p><p>接着，启动代码调用应用程序的main函数，在应用程序返回之后，调用<code>exit</code>函数，它将控制权返回给操作系统。【更详细地，<code>exit</code>函数运行atexit注册的函数，然后通过调用<code>_exit</code>将控制返回给操作系统。】</p><p>main函数的返回值是返回给父进程(shell)的，父进程调用wait/waitpid获取子进程的退出码。【收集子进程的状态信息，避免产生僵尸进程】。可以继续通过 <code>echo $?</code>打印出main的返回值，但是这个返回值是由一个字节保存的，比如说main函数返回267，则由于溢出echo将会打印11。</p><p>真正打印helloworld字符串的是系统调用write，通过write写到文件描述符为1的文件里，也就是输出到标准输出。</p><p><code>_start</code>函数才是helloworld程序的入口函数，该函数先构造进程中的全局对象，执行一些初始化函数<code>__attribute__((constructor))</code>，注册<code>atexit</code>回调函数，然后调用main函数，最后析构全局对象，调用<code>atexit</code>注册的回调函数，执行一些退出函数<code>__attribute__((destructor))</code>，最后退出helloworld程序。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯PCG后台开发hr面</title>
    <link href="/2022/03/01/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91hr%E9%9D%A2/"/>
    <url>/2022/03/01/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91hr%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="腾讯PCG后台开发hr面"><a href="#腾讯PCG后台开发hr面" class="headerlink" title="腾讯PCG后台开发hr面"></a>腾讯PCG后台开发hr面</h3><p>1、介绍项目</p><p>2、为什么要来腾讯</p><p>3、喜欢在哪工作</p><p>4、父母的工作</p><p>5、为什么不喜欢北京上海</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里存储基础技术二面</title>
    <link href="/2022/02/26/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%BA%8C%E9%9D%A2/"/>
    <url>/2022/02/26/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="阿里存储基础技术二面"><a href="#阿里存储基础技术二面" class="headerlink" title="阿里存储基础技术二面"></a>阿里存储基础技术二面</h3><p>1、rpc从网卡接收到数据到返回响应数据到网卡的过程，越详细越好，从内存管理，操作系统、计算机网络方面越清楚越细节越好。</p><h5 id="网卡收包流程"><a href="#网卡收包流程" class="headerlink" title="网卡收包流程"></a>网卡收包流程</h5><p>【网卡DMA到内核，硬件中断，CPU响应硬件中断(主要是重置一些标志位)并将中断处理程序加入到软中断队列中，软中断被调度，协议栈处理，sk_buff拷贝到套接字缓冲区，唤醒阻塞在该套接字上的线程】</p><p>数据包到达网卡后存储在网卡的硬件接收队列RX；网卡对这个数据包的目的mac地址进行匹配并验证以太网检验和；</p><p>网卡驱动在内核中预分配了包缓冲区(packet buffer队列)用来存储网卡接收到的实际数据包(insmod)，也预分配了环形接收/发送缓存队列(RX/TX，保存对应packet buffer的地址和长度)；环形缓冲队列由网卡硬件和网卡驱动共享；</p><p>网卡硬件通过DMA将硬件接收队列中的数据包【拷贝】到内核环形接收缓存队列队尾指向的包缓冲区；然后网卡产生了硬件中断；</p><p>硬件中断通过PCI总线通知到了CPU，所以CPU转到内核态处理该中断信号，CPU查询中断向量表得到了该中断的中断处理程序入口地址；但此时CPU并不直接执行中断处理程序，因为中断处理程序可能是很耗时的，所以linux将中断分为了上半部和下半部，上半部仅仅是响应中断，下半部真正处理该中断；CPU将中断处理程序加入到中断请求队列IRQ中；硬件中断响应完毕，CPU转到用户态继续执行原程序；</p><p>内核软中断请求守护线程ksoftirqd周期性地遍历软中断向量表，执行对应的处理函数；当CPU调度了内核线程，CPU切换至内核态处理下半部的中断处理程序；动态地为存储在包缓冲区的数据包分配一个叫sk_buffer的数据结构，该数据结构中描述了数据包的相关信息(协议头指针、数据指针等等)，也就是说利用数据包来初始化这个分配的sk_buffer，然后将其转交给网络协议栈去处理；</p><p> 首先调用的是第三层ip协议处理程序，因为以太网头在前面初始化sk_buffer的时候被移除了；ip协议处理程序匹配ip目的地、检验和、移除ip协议头、路由查询、组片分片；然后调用第四层的tcp协议处理程序，由于我们在应用层创建socket绑定端口后会在内核中为该套接字分配读写缓冲区，所以四层处理程序将这个sk_buffer数据结构放到套接字读缓冲区；然后触发了该套接字的可读事件，也就是唤醒在该套接字的等待队列中的线程；</p><p>我们在应用层通过read系统调用把读缓冲区中sk_buffer指向的数据包(packet buffer)【拷贝】至用户态缓冲区；将sk_buffer从套接字读缓冲区中出队并释放空间；</p><h5 id="网卡发包流程"><a href="#网卡发包流程" class="headerlink" title="网卡发包流程"></a>网卡发包流程</h5><p>我们在应用层<strong>通过write系统调用将用户态缓冲区中的数据【拷贝】到内核的包缓冲区(packet buffer)；通过send系统调用唤醒第四层的tcp协议处理程序</strong>；四层处理程序动态地分配一个sk_buffer数据结构，用包缓冲区中的数据初始化该sk_buffer数据结构，然后将该sk_buffer入队到内核套接字写缓冲区；然后调用第三层ip协议处理程序，三层处理程序继续初始化sk_buffer相关信息，还有可能分片；然后调用第二层协议处理程序，二层处理程序将该sk_buffer入队到一个排序队列(Queue Discipline；比如urg标志位紧急包要放在前面)；然后唤醒网卡驱动程序的发送函数；网卡驱动程序唤醒网卡硬件的DMA控制器将sk_buffer指向的数据包【拷贝】到网卡的硬件接收队列；网卡硬件将数据包发出去以后产生一个硬件中断信号；网卡驱动程序收到硬件中断信号后释放sk_buffer；</p><p>2、数据从网卡的接收队列接收到发送队列发送一共经过了几次拷贝？数据从read到用户态后到网卡发送出去经过了几次拷贝？</p><p>网络通信接收和发送经过了4次拷贝；接收后，</p><p>用接收数据初始化序列化器1次拷贝，序列化器反序列化到对象1次拷贝；</p><p>执行rpc函数调用，生成响应信息；</p><p>将响应信息序列化到序列化器1次拷贝；将序列化器中的数据发送，</p><p>3、如果一个rpc请求有100M而你的用户态缓冲区只有8k，那么你如何处理这种情况？</p><p>限制最大接收长度、边反序列化边接收。</p><p>4、环形缓冲队列</p><p>5、docker隔离是如何实现的</p><p>借助了Linux内核的Namespace技术来实现的</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="epoll原理"><a href="#epoll原理" class="headerlink" title="epoll原理"></a>epoll原理</h5><p>accept时会创建一个新的套接字相关描述符，并将其插入到该进程的文件打开列表里面。</p><p>epoll_create也会创建一个eventpoll的内核对象，该对象拥红黑树、就绪链表，并将其插入到该进程的文件打开列表里面。</p><p>调用epoll_ctl添加fd时，创建一个新的红黑树节点、添加等待事件到socket_fd的等待队列中，设置事件的回调为通知eventpoll对象，最后插入到红黑树上。</p><p>当套接字的内核缓冲区有数据时，查看socket_fd等待队列的事件，该事件找到与该套接字相关联的红黑树节点，将其插入到就绪链表中，如果epoll上有阻塞的进程则唤醒。</p><p>当调用epoll_wait时，cpu进入内核态查看就绪链表是否有事件到达，如果没有就阻塞(可以设置超时时间，当就绪链表新增事件时唤醒epoll_wait)，如果就绪链表有事件就将就绪链表拷贝到用户态，用户态遍历所有事件执行相应的回调函数。</p><h5 id="protobuf优缺点"><a href="#protobuf优缺点" class="headerlink" title="protobuf优缺点"></a>protobuf优缺点</h5><p>优点：</p><p>1、编码效率高。性能好(序列化的数据更小)</p><p>2、有代码生成机制。安全检查(通过stub来检查函数存在性和参数合法性)</p><p>3、多语言适用</p><p>4、兼容性</p><p>缺点：</p><p>1、二进制流的可读性变差。其他像json格式的序列化可读性较好。</p><p>2、通用性差。虽然支持多语言，但并没用json格式的通用性强。</p><h5 id="protobuf中整型数据的编码"><a href="#protobuf中整型数据的编码" class="headerlink" title="protobuf中整型数据的编码"></a>protobuf中整型数据的编码</h5><p>protobuf中采用Varints编码对整型数据进行编码,经过Varints编码后的数据，它的每一个字节的高位是一个标记位。如果标记位是1，则代表下一个字节仍然是当前整型数据的组成；如果标记位是0，则代表当前数据结束了。</p><h5 id="protobuf中字符串的编码"><a href="#protobuf中字符串的编码" class="headerlink" title="protobuf中字符串的编码"></a>protobuf中字符串的编码</h5><p>字符串本身使用UTF8编码，整个字符串字段使用key-len-value形式存储，</p><h5 id="protobuf中嵌套消息的编码"><a href="#protobuf中嵌套消息的编码" class="headerlink" title="protobuf中嵌套消息的编码"></a>protobuf中嵌套消息的编码</h5><p>类似于字符串，采用key-len-value来存储，len表示该字段对应的消息所需要的消息长度</p><h5 id="protobuf整体的编码"><a href="#protobuf整体的编码" class="headerlink" title="protobuf整体的编码"></a>protobuf整体的编码</h5><p>protobuf的消息是经过编码序列化的一系列key-value对，一个类型的数据对应一个key-value。其中key由field number参数序号和wire type参数类型组成，而value就是原始数据经过编码后的数据。根据参数类型来判断是key后面跟的是value【比如参数类型是整型】还是length+value【比如参数类型是字符串】。</p><h5 id="函数调用压栈过程"><a href="#函数调用压栈过程" class="headerlink" title="函数调用压栈过程"></a>函数调用压栈过程</h5><p>将当前栈底指针压栈，函数返回地址压栈，然后将参数从右向左压栈，执行函数后，回到原函数，并恢复原来的栈底指针。</p><h5 id="孤儿进程和僵尸进程"><a href="#孤儿进程和僵尸进程" class="headerlink" title="孤儿进程和僵尸进程"></a>孤儿进程和僵尸进程</h5><p>当父进程退出后子进程还在运行时，这个子进程就变成了孤儿进程，但是它会被init初始进程接管，成为初始进程的子进程。解决方案：1、kill直接杀死进程</p><p>当子进程已经退出后，父进程没有调用wait或waitpid回收子进程的状态信息，这个子进程的pid仍存在系统之中，就成为了僵尸进程。解决方案：1、杀死父进程。2、关闭电脑。</p><h5 id="GDB原理"><a href="#GDB原理" class="headerlink" title="GDB原理"></a><a href="https://www.bilibili.com/video/BV1Tq4y1i77j?spm_id_from=333.999.0.0">GDB原理</a></h5><p>ptrace系统调用提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。</p><p>1、父进程gdb调用fork。</p><p>2、子进程调用ptrace并传递PTRACE_TRACEME参数，该参数使得该进程可以被父进程追踪。</p><p>3、子进程调用execl，将被调试程序装入自己的地址空间。</p><p>4、父进程gdb在fork后便调用wait等待子进程退出</p><p>5、子进程退出后父进程收到子进程的信号</p><p>6、父进程根据子进程信号来做相应处理【比如断点的实现原理,就是在指定的位置插入断点指令<code>调试中断INT 3;系统调用是INT 0x80</code>,当被调试的程序运行到断点的时候,产生SIGTRAP信号。该信号被gdb捕获并进行断点命中判定,当gdb判断出这次SIGTRAP是断点命中之后就会转入等待用户输入进行下一步处理】</p><h5 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h5><p>system trace是一个功能强大的调试、分析、诊断工具，跟踪程序或进程执行时的系统调用和所接收的信号。可将所调用的系统调用的名称、参数和返回值输出到标准输出或者输出到-o指定的文件。</p><h5 id="为什么要字节对齐"><a href="#为什么要字节对齐" class="headerlink" title="为什么要字节对齐"></a>为什么要字节对齐</h5><p>CPU一般可能以双字节、四字节等为单位存取内存，如果没有进行内存对齐，CPU有可能就需要两次访存取数才可以读取出数据，而进行内存对齐可以一次性把数据全部读取出来，提高CPU从内存取数的效率。</p><h5 id="为什么要cache-line对齐"><a href="#为什么要cache-line对齐" class="headerlink" title="为什么要cache line对齐"></a>为什么要cache line对齐</h5><p>CPU的每个核具有单独的L1和L2缓存，假设cpu的cache line大小为64B，那么当cpu0把64B加载进自己的缓存后想要修改前32B(假设是数据结构A)，而cpu1也加载了相同的64B到自己的缓存，只不过cpu1只想使用后32B(假设是数据结构B)。那么cpu0会对这个cache line的64B全部加总线锁，阻塞其他cpu访问内存中的这64B，使得cpu1的缓存中的64B全部失效。</p><p>如果在声明数据结构A和B时使用cache line对齐，A和B就处于不同的cache line中。这样就不会出现上述问题。</p><h5 id="结构体变量偏移"><a href="#结构体变量偏移" class="headerlink" title="结构体变量偏移"></a>结构体变量偏移</h5><p>使用以0为首地址的指针指向对应的成员，取指针的地址就是变量的偏移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b[<span class="hljs-number">11</span>];<br>    <span class="hljs-keyword">double</span> c;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;sizeof (A) = &quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(A) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;offset of (a) = &quot;</span> &lt;&lt; (<span class="hljs-keyword">int64_t</span>)(&amp;((A*)<span class="hljs-number">0</span>)-&gt;a) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;offset of (b) = &quot;</span> &lt;&lt; (<span class="hljs-keyword">int64_t</span>)(&amp;((A*)<span class="hljs-number">0</span>)-&gt;b) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;offset of (c) = &quot;</span> &lt;&lt; (<span class="hljs-keyword">int64_t</span>)(&amp;((A*)<span class="hljs-number">0</span>)-&gt;c) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="结构体大小"><a href="#结构体大小" class="headerlink" title="结构体大小"></a>结构体大小</h5><p>以下是计算结构体大小的完整步骤</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-keyword">int8_t</span> a[<span class="hljs-number">3</span>];    <span class="hljs-comment">// 首地址0 3bytes</span><br>    <span class="hljs-keyword">int32_t</span> b;      <span class="hljs-comment">// 要以4字节对齐的首地址4bytes 8bytes</span><br>    <span class="hljs-keyword">char</span> c;         <span class="hljs-comment">// 要以1字节对齐的首地址8bytes 9bytes</span><br>    <span class="hljs-keyword">int64_t</span> d;      <span class="hljs-comment">// 要以8字节对齐的首地址18bytes 26bytes</span><br>    <span class="hljs-keyword">int16_t</span> e[<span class="hljs-number">5</span>];   <span class="hljs-comment">// 要以2字节对齐的首地址26bytes 36bytes</span><br>    <span class="hljs-keyword">double</span> f;       <span class="hljs-comment">// 要以8字节对齐的首地址40bytes 48bytes</span><br>    <span class="hljs-keyword">float</span> g;        <span class="hljs-comment">// 要以4字节对齐的首地址48bytes 52bytes</span><br>    <span class="hljs-keyword">char</span> h;         <span class="hljs-comment">// 要以1字节对齐的首地址52bytes 53bytes</span><br>&#125;;                  <span class="hljs-comment">// 整个结构体大小要以最大成员8字节对齐  56bytes</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;sizeof (A) = &quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(A) &lt;&lt; endl;   <span class="hljs-comment">// sizeof (A) = 56</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在结构体声明的右括号处增加__attribute__((aligned(16)))，让整个结构体大小以16字节对齐，这只影响最终的结构体大小，对于结构体内部的数据对齐不影响。【注意：aligned参数如果不大于结构体最大成员的大小时该语句将不起任何作用】</p><p>可以在结构体声明的右括号处增加__attribute__((packed))，让结构体内部成员全部以1字节对齐。</p><h5 id="c-的lambda函数怎么实现的"><a href="#c-的lambda函数怎么实现的" class="headerlink" title="c++的lambda函数怎么实现的"></a>c++的lambda函数怎么实现的</h5><p>通过仿函数实现。定义一个lambda函数后编译器帮我们定义了一个类，类中重载了()操作符。其中[]捕捉列表就相当于传递给类的构造函数的参数。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里存储基础技术一面</title>
    <link href="/2022/02/23/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/"/>
    <url>/2022/02/23/%E9%98%BF%E9%87%8C%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="阿里存储基础技术一面"><a href="#阿里存储基础技术一面" class="headerlink" title="阿里存储基础技术一面"></a>阿里存储基础技术一面</h3><p>1、rpc框架细问</p><p>2、给业务场景问解决方案</p><p>3、你的rpc如何解决一次通信调用多个服务端方法？</p><p>限制客户端每次只能调用一个服务端的方法</p><p>4、你的rpc如何实现定时器</p><p>可以用epoll实现，时间轮</p><p>5、你的rpc如何实现跨平台调用</p><p>将序列化模块单独分离出来实现一个与语言无关的序列化器</p><p>6、你的rpc如何像类似google的protobuf那样做到版本兼容</p><p>protobuf的编码方式。也就是问：如果服务端使用新协议在某个结构中增加了新字段，那么客户端使用老协议如何正常的将序列化后的对象反序列化回来？因为在序列化编码时会保存对象的类型、标记和(长度)作为键值对的key，当老协议读取到一个未知的key时，可以通过描述信息跳过该字段的序列化数据的长度，不序列化该字段。</p><p>如此一来，旧的协议也能反序列化新的协议序列化后的数据。（客户端之前本来就不需要该字段，该字段是服务器端添加的字段）</p><p>靠optional字段，对于接收方，如果能够识别可选字段就进行相应的处理，如果无法识别，则忽略该字段，消息中的其它字段正常处理。因为optional字段的特性，很多接口在升级版本中都把后来添加的字段都统一的设置为optional字段，这样老的版本无需升级程序也可以正常的与新的软件进行通信，只不过新的字段无法识别而已，因为并不是每个节点都需要新的功能，因此可以做到按需升级和平滑过渡。</p><p>靠字段编号，在反序列化的时候，protobuf会从输入流中读取出字段编号，然后再设置message中对应的值。如果读出来的字段编号是message中没有的，就直接忽略，如果message中有字段编号是输入流中没有的，则该字段不会被设置。所以即使通信的两端存在一方比另一方多出编号，也不会影响反序列化。但是如果两端同一编号的字段规则或者字段类型不一样，那就肯定会影响反序列化了。__所以一般调整proto文件的时候，尽量选择加字段或者删字段，而不是修改字段编号或者字段类型__。</p><p>7、new/free混用</p><p>在析构函数中释放内存，这时free不能用。</p><p>8、零拷贝原理</p><p>sendfile。</p><p>【一般read/write】</p><p>当调用read系统调用时，通过DMA（Direct Memory Access）将数据copy到内核模式<br>然后由CPU控制将内核模式数据copy到用户模式下的 buffer中<br>read调用完成后，write调用首先将用户模式下 buffer中的数据copy到内核模式下的socket buffer中<br>最后通过DMA copy将内核模式下的socket buffer中的数据copy到网卡设备中传送。</p><p>从上面的过程可以看出，数据白白从内核模式到用户模式走了一 圈，浪费了两次copy，而这两次copy都是CPU copy，即占用CPU资源。</p><p>【2.1版本的sendfile】</p><p>首先通过DMA copy将数据从磁盘读取到kernel buffer中<br>然后通过CPU copy将数据从kernel buffer copy到sokcet buffer中<br>最终通过DMA copy将socket buffer中数据copy到网卡buffer中发送</p><p>sendfile与read/write方式相比，少了 一次模式切换一次CPU copy。但是从上述过程中也可以发现从kernel buffer中将数据copy到socket buffer是没必要的。</p><p>【2.4版本的sendfile】</p><p>DMA copy将磁盘数据copy到kernel buffer中<br>向socket buffer中追加当前要发送的数据在kernel buffer中的位置和偏移量<br>DMA gather copy根据socket buffer中的位置和偏移量直接将kernel buffer中的数据copy到网卡上。</p><p>9、内存有15G，malloc10G会成功吗？</p><p>内存碎片会影响到你“一次”申请到的最大内存空间。比如你有10M空间，申请两次2M，一次1M，一次5M没有问题。但如果你申请两次2M，一次4M，一次1M，释放4M，那么剩下的空间虽然够5M，但是由于已经不是连续的内存区域，malloc也会失败。</p><p>系统也会限制你的程序使用malloc申请到的最大内存。Windows下32位程序如果单纯看地址空间能有4G左右的内存可用，不过实际上系统会把其中2G的地址留给内核使用，所以你的程序最大能用2G的内存。除去其他开销，你能用malloc申请到的内存只有1.9G左右。</p><p>10、epoll线程安全问题</p><p>epoll是通过锁来保证线程安全的, 使用自旋锁来操作就绪队列, 使用互斥锁来操作红黑树。</p><p>11、如何优雅的关闭服务器？</p><p>在进程中注册信号中断回调函数，回调函数中释放服务器的资源</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯PCG后台开发二面</title>
    <link href="/2022/02/23/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/"/>
    <url>/2022/02/23/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%BA%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="腾讯PCG实习二面"><a href="#腾讯PCG实习二面" class="headerlink" title="腾讯PCG实习二面"></a>腾讯PCG实习二面</h3><p>1、实验室的项目，问得很细，占了绝大部分时间。</p><p>2、redis相关</p><p>3、docker、k8s</p><p>4、c++内存分区</p><p>5、进程线程协程</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯PCG后台开发一面</title>
    <link href="/2022/02/22/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/"/>
    <url>/2022/02/22/%E8%85%BE%E8%AE%AFPCG%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="腾讯PCG实习一面"><a href="#腾讯PCG实习一面" class="headerlink" title="腾讯PCG实习一面"></a>腾讯PCG实习一面</h3><p>1、算法题：超级大数的模k取余法</p><p>2、说一下你的RPC项目</p><p>3、如何实现不同语言的RPC通信</p><p>实现一个与语言无关的序列化器。</p><p>4、如果使用过程中序列化协议升级了怎么办？比如客户端传递了冗余参数，即本来参数需要两个int型即可，现在客户端传递了3个int参数？</p><p>5、客户端如果不序列化调用函数所需要的某个参数， 如何支持正常通信？</p><p><strong>protobuf如何支持“向后兼容”和“向前兼容”</strong><br>所谓的“向后兼容”（backward compatible），就是说，当模块B升级了之后，它能够正确识别模块A发出的老版本的协议。由于老版本没有“状态”这个属性，在扩充协议时，可以考虑把“状态”属性设置成<strong>非必填</strong> 的，或者给“状态”属性设置一个缺省值。<br>所谓的“向前兼容”（forward compatible），就是说，当模块A升级了之后，模块B能够正常识别模块A发出的新版本的协议。这时候，新增加的“状态”属性会被忽略。<br>“向后兼容”和“向前兼容”有啥用捏？当你维护一个很庞大的分布式系统时，由于你无法<strong>同时</strong> 升级<strong>所有</strong> 模块，为了保证在升级过程中，整个系统能够尽可能不受影响，就需要尽量保证通讯协议的“向后兼容”或“向前兼容”。</p><p><strong>protobuf的编码方式</strong>。也就是问：如果服务端使用新协议在某个结构中增加了新字段，那么客户端使用老协议如何正常的将序列化后的对象反序列化回来？因为在序列化编码时会保存对象的类型、标记和(长度)作为键值对的key，当老协议读取到一个未知的key时，可以通过描述信息跳过该字段的序列化数据的长度，不序列化该字段。</p><p>如此一来，旧的协议也能反序列化新的协议序列化后的数据。（客户端之前本来就不需要该字段，该字段是服务器端添加的字段）</p><p>6、页大小是多少？</p><p>4k</p><p>7、为什么是4k？</p><p>固定就是4k。页太大业内碎片，页太小页面置换。</p><p>8、知道NoSQL吗？</p><p>MongoDB</p><p>9、MongoDB的数据类型</p><p>BSON</p><p>10、MongoDB的索引结构</p><p>MongoDB用的是B树，为啥用B树？</p><p>Mysql中数据遍历操作比较多，所以用B+树作为索引结构。而Mongodb是做单一查询比较多，数据遍历操作比较少，所以用B树作为索引结构。那么为什么Mysql做数据遍历操作多？而Mongodb做数据遍历操作少呢？因为Mysql是关系型数据库，而Mongodb是非关系型数据。那为什么关系型数据库，做数据遍历操作多？而非关系型数据库做数据遍历操作少呢？因为关系型数据库要执行join操作很可能要遍历整个表，而非关系型数据库一般不会去遍历表中所有数据，因此它就不需要B+树的叶子链表。</p><p>11、那说说B树和B+树的区别</p><p>结构，由于结构不同导致查询的区别，B树用于文件系统的索引，B+树用于数据库的索引。B+树范围查询比较好！</p><p>12、为什么返回值不同不能作为重载的依据？</p><p>仅仅是返回值不同会导致两个函数都可以被调用，函数是根据参数不同来决定调用哪个重载函数的。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>splay算法</title>
    <link href="/2022/01/13/splay%E7%AE%97%E6%B3%95/"/>
    <url>/2022/01/13/splay%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Splay算法"><a href="#Splay算法" class="headerlink" title="Splay算法"></a>Splay算法</h3><p>伸展树(Splay)是一颗二叉平衡树。</p><p><a href="https://www.luogu.com.cn/problem/P3391">题目链接</a></p><p><img src="/2022/01/13/splay%E7%AE%97%E6%B3%95/image-20220830163625128.png" alt="image-20220830163625128"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// splay保证中序遍历是当前序列的顺序(编号有序)</span><br><span class="hljs-keyword">int</span> m, n;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">2</span>], p, idx, v;        <span class="hljs-comment">// 左右儿子节点、父节点、该节点编号、该节点值</span><br>    <span class="hljs-keyword">int</span> cnt, flag;              <span class="hljs-comment">// 子树节点数目，子树翻转标记</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _idx, <span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _p)</span></span>&#123;    <span class="hljs-comment">// 初始化节点</span><br>        idx = _idx, v = _v, p = _p, cnt = <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>&#125;tree[N];<br><br><span class="hljs-keyword">int</span> root, tot;<br><br><span class="hljs-comment">// 维持节点数目信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    tree[x].cnt = tree[tree[x].s[<span class="hljs-number">0</span>]].cnt + tree[tree[x].s[<span class="hljs-number">1</span>]].cnt + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 维持翻转信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(tree[x].flag)&#123;<br>        <span class="hljs-built_in">swap</span>(tree[x].s[<span class="hljs-number">0</span>], tree[x].s[<span class="hljs-number">1</span>]);<br>        tree[x].flag = <span class="hljs-number">0</span>;                       <span class="hljs-comment">// 清空当前节点的翻转标记</span><br>        tree[tree[x].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;           <span class="hljs-comment">// 下传翻转标记</span><br>        tree[tree[x].s[<span class="hljs-number">1</span>]].flag ^= <span class="hljs-number">1</span>;           <span class="hljs-comment">// 下传翻转标记</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 旋转(根据x是y的左右儿子决定旋转方向)使x上移一层</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> y = tree[x].p, z = tree[y].p;           <span class="hljs-comment">// 求父节点和祖父节点</span><br>    <span class="hljs-keyword">int</span> k = tree[y].s[<span class="hljs-number">1</span>] == x;                  <span class="hljs-comment">// x是否为左儿子</span><br>    <br>    tree[z].s[tree[z].s[<span class="hljs-number">1</span>] == y] = x, tree[x].p = z;            <span class="hljs-comment">// 把z的儿子y改为x,把x的父节点改为z</span><br>    tree[y].s[k] = tree[x].s[k^<span class="hljs-number">1</span>], tree[tree[x].s[k^<span class="hljs-number">1</span>]].p = y;  <span class="hljs-comment">// 把y的儿子x改为x的另一个方向儿子,把x的另一个方向儿子的父节点改为y</span><br>    tree[x].s[k^<span class="hljs-number">1</span>] = y, tree[y].p = x;                          <span class="hljs-comment">// 把x的另一个方向儿子改为y,把y的父节点改为x</span><br>    <br>    <span class="hljs-built_in">push_up</span>(y), <span class="hljs-built_in">push_up</span>(x);                     <span class="hljs-comment">// 维持节点数目信息</span><br>&#125;<br><br><span class="hljs-comment">// 将x节点旋转到k节点之下(如果k为0则旋转到根节点)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(tree[x].p != k)&#123;<br>        <span class="hljs-keyword">int</span> y = tree[x].p, z = tree[y].p;           <span class="hljs-comment">// 求父节点和祖父节点</span><br>        <span class="hljs-keyword">if</span>(z != k)&#123;<br>            <br>            <span class="hljs-keyword">if</span>((tree[z].s[<span class="hljs-number">0</span>] == y) ^ (tree[y].s[<span class="hljs-number">0</span>] == x)) <span class="hljs-built_in">rotate</span>(x);    <span class="hljs-comment">// xy一个为左儿子一个为右儿子    </span><br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">rotate</span>(y);                                             <span class="hljs-comment">// xy同时为左儿子或者同时为右儿子</span><br>        &#125;<br>        <span class="hljs-built_in">rotate</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) root = x;            <br>&#125;<br><br><br><span class="hljs-comment">// 根据节点编号插入节点</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u = root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(u != <span class="hljs-number">0</span>)&#123;<br>        p = u, u = tree[u].s[idx &gt; tree[u].idx];<br>    &#125;<br><br>    u = ++tot; <span class="hljs-comment">// 新建节点</span><br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-number">0</span>) tree[p].s[idx &gt; tree[p].idx] = u;    <span class="hljs-comment">// 更新父节点信息</span><br>    tree[u].<span class="hljs-built_in">init</span>(idx, v, p);    <span class="hljs-comment">// 初始化节点信息</span><br>    <span class="hljs-built_in">splay</span>(u, <span class="hljs-number">0</span>);                <span class="hljs-comment">// 旋转为根节点</span><br>&#125;<br><br><span class="hljs-comment">// 获得编为k的节点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> u = root;<br>    <span class="hljs-keyword">while</span>(u != <span class="hljs-number">0</span>)&#123;<br>        <br>        <span class="hljs-built_in">push_down</span>(u);       <span class="hljs-comment">// 查询时要处理翻转信息</span><br>        <br>        <span class="hljs-keyword">if</span>(tree[tree[u].s[<span class="hljs-number">0</span>]].cnt + <span class="hljs-number">1</span> == k) <span class="hljs-keyword">return</span> u;<br>        <span class="hljs-keyword">if</span>(tree[tree[u].s[<span class="hljs-number">0</span>]].cnt &gt;= k) u = tree[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> k -= tree[tree[u].s[<span class="hljs-number">0</span>]].cnt+<span class="hljs-number">1</span>, u = tree[u].s[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inorderTraverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(u == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-built_in">push_down</span>(u);           <span class="hljs-comment">// 查询时要处理翻转信息</span><br>    <br>    <span class="hljs-built_in">inorderTraverse</span>(tree[u].s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(tree[u].idx &gt;= <span class="hljs-number">1</span> &amp;&amp; tree[u].idx &lt;= n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, tree[u].v);      <span class="hljs-comment">// 不是哨兵</span><br>    <span class="hljs-built_in">inorderTraverse</span>(tree[u].s[<span class="hljs-number">1</span>]);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-comment">// 0和n+1是哨兵</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n+<span class="hljs-number">1</span>; i ++) <span class="hljs-built_in">insert</span>(i, i);<br>    <br>    <span class="hljs-keyword">int</span> l, r;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <br>        <span class="hljs-comment">// 要将l~r翻转，先找到l的前驱lprev和r的后继rnext</span><br>        <span class="hljs-comment">// 然后lprev旋转到根节点，将rnext旋转到lprev的儿子节点</span><br>        <span class="hljs-comment">// 此时[l, r]就必定都在rnext的左子树中</span><br>  <br>        <span class="hljs-comment">// 因为0是哨兵,故lprev为get(l-1+1), rnext为get(r+1+1)</span><br>        <span class="hljs-keyword">int</span> lprev = <span class="hljs-built_in">get</span>(l), rnext = <span class="hljs-built_in">get</span>(r+<span class="hljs-number">2</span>);<br><br>        <span class="hljs-built_in">splay</span>(lprev, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(rnext, lprev);<br>        <br>        <span class="hljs-comment">// 将rnext的左子树翻转即可</span><br>        tree[tree[rnext].s[<span class="hljs-number">0</span>]].flag ^= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">inorderTraverse</span>(root);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基环树</title>
    <link href="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    <url>/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h3><p>其本质就是环套树：众所周知，Ｎ个点的树有Ｎ－１条边，若在树上任意添加一条边，则会形成一个环，除了环之外，其余部分由若干棵子树构成。我们把这种Ｎ个点Ｎ条边的连通无向图，即在树上加一条边构成的恰好包含一个环的图，称为“基环树”。如果不保证连通，那么Ｎ个点Ｎ条边的无向图也可能是若干棵基环树组成的森林，简称为“基环树森林“。</p><p>有以下3种基环树</p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104195942576.png" alt="image-20220104195942576"></p><p><a href="https://leetcode-cn.com/problems/maximum-employees-to-be-invited-to-a-meeting/">题目链接1</a></p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104101133715.png" alt="image-20220104101133715"></p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104101214204.png" alt="image-20220104101214204"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 基环树一般做法都是将链和环分开来进行考虑</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maximumInvitations</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; favorite)</span> </span>&#123;<br>        <span class="hljs-comment">// 拓扑排序求出基环树的链</span><br>        <span class="hljs-keyword">int</span> n = favorite.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 访问数组</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-comment">// 各节点的入度</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">indegree</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-comment">// 各节点子树中的节点数(此处利用拓扑排序求链长)</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-comment">// 拓扑排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) indegree[favorite[i]] ++;<br>        queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">if</span>(indegree[i] == <span class="hljs-number">0</span>) &#123;<br>            vis[i] = <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">int</span> cur = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-keyword">if</span>(--indegree[favorite[cur]] == <span class="hljs-number">0</span>)&#123;<br>                vis[favorite[cur]] = <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(favorite[cur]);<br>            &#125;<br>            cnt[favorite[cur]] = <span class="hljs-built_in">max</span>(cnt[cur]+<span class="hljs-number">1</span>, cnt[favorite[cur]]);<br>        &#125;<br><br>        <span class="hljs-comment">// 至此，基环树中的所有链长已经求出</span><br>        <span class="hljs-comment">// 考虑基环的长度：</span><br>        <span class="hljs-comment">//   若len&gt;=3，则只能这一整个基环坐满圆桌，参与会议的最多人数就是最长的基环</span><br>        <span class="hljs-comment">//   若len==2，则除了基环外还能坐该基环的两个节点对应的最长链。并且所有len==2的基环加两侧最长链都能入座</span><br><br>        <span class="hljs-keyword">int</span> max_ring_size = <span class="hljs-number">0</span>, total_ring2_size = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// 查看环</span><br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; !vis[j]; j = favorite[j])&#123;<br>                vis[j] = <span class="hljs-literal">true</span>;<br>                len ++;<br>            &#125;<br>            max_ring_size = <span class="hljs-built_in">max</span>(max_ring_size, len);<br>            <span class="hljs-keyword">if</span>(len == <span class="hljs-number">2</span>)&#123;<br>                total_ring2_size += <span class="hljs-number">2</span> + cnt[i] + cnt[favorite[i]];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(max_ring_size, total_ring2_size);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/360/">题目链接2</a></p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104191620873.png" alt="image-20220104191620873"></p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104191715208.png" alt="image-20220104191715208"></p><p><img src="/2022/01/04/%E5%9F%BA%E7%8E%AF%E6%A0%91/image-20220104191739387.png" alt="image-20220104191739387"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2000010</span>, M = <span class="hljs-number">2</span>*N;<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">int</span> q[N]; <span class="hljs-comment">// 队列</span><br><br><span class="hljs-comment">// 入度</span><br><span class="hljs-keyword">int</span> indegree[N];<br><span class="hljs-comment">// 直径</span><br>ll f[N];<br><span class="hljs-comment">// 最长链</span><br>ll d[N];<br><br><span class="hljs-keyword">int</span> h[N], e[M], w[M], ne[M], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    e[tot] = b, w[tot] = c, ne[tot] = h[a], h[a] = tot++;<br>&#125;<br><br><span class="hljs-comment">// 访问数组</span><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-comment">// 连通分量节点</span><br><span class="hljs-keyword">int</span> conn[N], conn_size;<br><span class="hljs-comment">// 环</span><br><span class="hljs-keyword">int</span> ring[N], ring_size;<br><span class="hljs-comment">// 环中节点为根的树的最长链</span><br>ll d_ring[N*<span class="hljs-number">2</span>], len;<br><span class="hljs-comment">// 环中边的权重,前缀和</span><br>ll sum[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-comment">// 查找连通分量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br>    conn_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">1</span>;<br>    q[<span class="hljs-number">0</span>] = root;<br>    vis[root] = <span class="hljs-literal">true</span>;<br>    conn[conn_size++] = root;<br>    <br>    <span class="hljs-keyword">while</span>(hh != tt)&#123;<br>        <span class="hljs-keyword">int</span> cur = q[hh++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[cur]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                vis[j] = <span class="hljs-literal">true</span>;<br>                q[tt++] = j;<br>                conn[conn_size++] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 拓扑排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toposort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; conn_size; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(indegree[conn[i]] == <span class="hljs-number">1</span>) q[tt++] = conn[i];<br>        <span class="hljs-keyword">else</span> vis[conn[i]] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(hh != tt)&#123;<br>        <span class="hljs-keyword">int</span> cur = q[hh++];<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[cur]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                <span class="hljs-comment">// 先更新直径f再更新最长链d: 防止d[j]包含d[t]</span><br>            <br>                <span class="hljs-comment">// 更新以j为根的树的直径f[j]</span><br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[cur]);   <span class="hljs-comment">// 不过j节点</span><br>                f[j] = <span class="hljs-built_in">max</span>(f[j], d[j] + d[cur] + w[i]); <span class="hljs-comment">// 过j节点</span><br>                <span class="hljs-comment">// 更新以j为根的树的从根开始的最长链d[j]</span><br>                d[j] = <span class="hljs-built_in">max</span>(d[j], d[cur] + w[i]);<br>                <br>                <span class="hljs-keyword">if</span>(--indegree[j] == <span class="hljs-number">1</span>) &#123;<br>                    q[tt++] = j;<br>                    vis[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 没有访问的就是环中的节点</span><br>    ring_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; conn_size; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[conn[i]]) ring[ring_size++] = conn[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 两条最长链加上环的更大权重的半弧，就是该基环树的最大权重</span><br><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 当前判断的环节点cur,该节点的上一条边pre</span><br>    <span class="hljs-keyword">int</span> cur = ring[<span class="hljs-number">0</span>], pre = <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// 最长直径</span><br>    ll max_f = <span class="hljs-number">0</span>;<br><br>    len = <span class="hljs-number">0</span>;<br>    sum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[cur]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-comment">// 该边不在环中，或者j已经访问过了</span><br>            <span class="hljs-keyword">if</span>(vis[j] || pre == (i^<span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>;<br>            max_f = <span class="hljs-built_in">max</span>(max_f, f[j]);<br>            d_ring[len++] = d[cur];<br>            sum[len] = w[i];<br>            vis[j] = <span class="hljs-literal">true</span>;<br>            pre = i, cur = j;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(cur != ring[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">// d_ring中包含了环中所有节点的最长链</span><br>    <span class="hljs-comment">// sum中包含了环中所有边的权重</span><br>    <br>    <span class="hljs-comment">// 即求当i&lt;j时,max(d_ring[i]+d_ring[j]+sum[i+1]+...+sum[j]) </span><br>    <br>    <span class="hljs-comment">// 滑动窗口，复制一倍进行计算</span><br>    <span class="hljs-built_in">memcpy</span>(d_ring+len, d_ring, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ll)*len);<br>    <span class="hljs-built_in">memcpy</span>(sum+len+<span class="hljs-number">1</span>, sum+<span class="hljs-number">1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ll)*len);<br>    <br>    <span class="hljs-comment">// max(d_ring[i]+d_ring[j]+sum[j]-sum[i])</span><br>    <span class="hljs-comment">// max(d_ring[j]+sum[j] + d_ring[i]-sum[i])</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span>*len ; ++i) sum[i] += sum[i<span class="hljs-number">-1</span>];<br>    <br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 单调递减队列优化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>*len; ++j)&#123;<br>        <span class="hljs-comment">// 获得最大的 d_ring[i]-sum[i]</span><br>        <br>        <span class="hljs-keyword">while</span>(hh != tt &amp;&amp; j - q[hh]  &gt;= len) hh++;  <span class="hljs-comment">// 窗口溢出</span><br>        <span class="hljs-keyword">if</span>(hh != tt)&#123;<br>            res = <span class="hljs-built_in">max</span>(res, d_ring[j]+sum[j]+d_ring[q[hh]]-sum[q[hh]]);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(hh != tt &amp;&amp; d_ring[q[tt<span class="hljs-number">-1</span>]]-sum[q[tt<span class="hljs-number">-1</span>]] &lt; d_ring[j]-sum[j]) tt--;<br>        q[tt++] = j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(res, max_f);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">int</span> a, b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(i, a, b), <span class="hljs-built_in">add</span>(a, i, b);<br>        indegree[a] ++;<br>        indegree[i] ++;<br>    &#125;<br>    <br>    ll res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-keyword">continue</span>;<br>        <br>        <span class="hljs-comment">// 查看连通分量</span><br>        <span class="hljs-built_in">bfs</span>(i);<br>        <br>        <span class="hljs-comment">// 拓扑排序</span><br>        <span class="hljs-built_in">toposort</span>();<br>        <br>        res += <span class="hljs-built_in">solve</span>();<br>        <span class="hljs-comment">// cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; endl;</span><br>        <span class="hljs-comment">// cout &lt;&lt; &quot;res = &quot; &lt;&lt; res &lt;&lt; endl;</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求凸包算法</title>
    <link href="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/"/>
    <url>/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Graham和Andrew求凸包"><a href="#Graham和Andrew求凸包" class="headerlink" title="Graham和Andrew求凸包"></a>Graham和Andrew求凸包</h3><p>【个人偏向于Andrew算法】</p><p><a href="https://leetcode-cn.com/problems/erect-the-fence/">题目链接1</a></p><p><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228190320459.png" alt="image-20211228190320459"></p><p><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228190337263.png" alt="image-20211228190337263"></p><h4 id="Graham"><a href="#Graham" class="headerlink" title="Graham"></a>Graham</h4><p>步骤一：以任意点为原点(一般以最左下角的点为原点)</p><p>步骤二：将除原点外的其他点按照与原点连成的向量排序，排序规则为：若向量x叉乘向量y大于0(即y在x方向的左侧)，则点x排在点y之前；若向量x叉乘向量y小于0(即y在x方向的右侧)，则点x排在点y之后；若若向量x叉乘向量y等于0(即y和x在同一直线上)，则按照点到原点的距离从小到大排序；</p><p>步骤三：因为我们在极角相同时按照距离排序，更新凸包时有可能会pop出在直线上的点。这会导致我们会少计算一些点，实际上是只有第一个点和最后一个点这两个点连线上的点有可能遗漏，因此我们可先将该线上的额外的点拿出来放入凸包中，并从所有点中删去这些点</p><p>步骤四：把前两个点放入凸包，从第三个点开始，当新点在凸包前进方向的左侧时将该点加入凸包集合；否则依次删除最近加入凸包的点，直到该点位于前进方向的左侧为止</p><p><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/6b2af21d-e884-31bb-9363-a89af2b07d1c.jpg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 向量lhs 与 向量rhs 的2范数的平方</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dis2</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; lhs, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; rhs)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (lhs[<span class="hljs-number">0</span>]-rhs[<span class="hljs-number">0</span>])*(lhs[<span class="hljs-number">0</span>]-rhs[<span class="hljs-number">0</span>]) + (lhs[<span class="hljs-number">1</span>]-rhs[<span class="hljs-number">1</span>])*(lhs[<span class="hljs-number">1</span>]-rhs[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// 向量base_lhs 叉乘 向量base_rhs</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cross_mul</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; base, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; lhs, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; rhs)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (lhs[<span class="hljs-number">0</span>]-base[<span class="hljs-number">0</span>])*(rhs[<span class="hljs-number">1</span>]-base[<span class="hljs-number">1</span>]) - (lhs[<span class="hljs-number">1</span>]-base[<span class="hljs-number">1</span>])*(rhs[<span class="hljs-number">0</span>]-base[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">outerTrees</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; trees) &#123;<br>        <span class="hljs-keyword">int</span> n = trees.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> trees;   <span class="hljs-comment">// 最少要3个点才能围出一个区域</span><br>        <span class="hljs-comment">// 找最小的点</span><br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(trees[i][<span class="hljs-number">0</span>] &lt; trees[s][<span class="hljs-number">0</span>]) s = i;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(trees[i][<span class="hljs-number">0</span>] == trees[s][<span class="hljs-number">0</span>] &amp;&amp; trees[i][<span class="hljs-number">1</span>] &lt; trees[s][<span class="hljs-number">1</span>]) s = i;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(trees[s], trees[<span class="hljs-number">0</span>]);<br><br>        vector&lt;<span class="hljs-keyword">int</span>&gt; base = trees[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">sort</span>(trees.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>, trees.<span class="hljs-built_in">end</span>(), [<span class="hljs-keyword">this</span>, &amp;base](<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; lhs, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; rhs)&#123;<br>            <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">cross_mul</span>(base, lhs, rhs);<br>            <span class="hljs-keyword">if</span>(ret &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">dis2</span>(base, lhs) &lt; <span class="hljs-built_in">dis2</span>(base, rhs);<br>        &#125;);<br><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>        <span class="hljs-comment">// 注意我们在极角相同时按照距离排序，更新凸包有可能会pop出在直线上的点</span><br>        <span class="hljs-comment">// 这会导致我们会少计算一些点</span><br>        <span class="hljs-comment">// 实际上是只有trees[0]和trees[n-1]这两个极点上的点有可能遗漏，因此我们可先将该线上的额外的点拿出来</span><br>        <span class="hljs-keyword">while</span>(n &gt;= <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-built_in">cross_mul</span>(trees[<span class="hljs-number">0</span>], trees[n<span class="hljs-number">-2</span>], trees[n<span class="hljs-number">-1</span>]) == <span class="hljs-number">0</span>) &#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(trees[n<span class="hljs-number">-2</span>]);<br>            <span class="hljs-built_in">swap</span>(trees[n<span class="hljs-number">-1</span>], trees[n<span class="hljs-number">-2</span>]);<br>            n--;<br>        &#125;<br><br>        res.<span class="hljs-built_in">emplace_back</span>(trees[<span class="hljs-number">0</span>]);<br>        res.<span class="hljs-built_in">emplace_back</span>(trees[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, top = res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i &lt; n; ++i)&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cross_mul</span>(res[top<span class="hljs-number">-1</span>], res[top], trees[i]) &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 等于0表示在直线上，也加入凸包中</span><br>                res.<span class="hljs-built_in">pop_back</span>();<br>                top--;<br>            &#125;<br>            res.<span class="hljs-built_in">emplace_back</span>(trees[i]);<br>            top++;<br>        &#125;<br><br>        <span class="hljs-comment">// 注意我们在极角相同时按照距离排序，更新凸包有可能会pop出在直线上的点</span><br>        <span class="hljs-comment">// 这会导致我们会少计算一些点</span><br>        <span class="hljs-comment">// 实际上只有trees[0]和trees[n-1]这两个极点上的点有可能遗漏</span><br>        <span class="hljs-comment">// 此处再处理已经不方便了，因此提前处理</span><br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Andrew"><a href="#Andrew" class="headerlink" title="Andrew"></a>Andrew</h4><p>步骤一：首先将所有点按照x从小到大（x相同则按y从小到大）排序</p><p>步骤二：把前两个点放入凸包，从第三个点开始，当新点在凸包前进方向的左侧时将该点加入凸包集合；否则依次删除最近加入凸包的点，直到该点位于前进方向的左侧为止</p><p>步骤三：步骤二计算出了下凸包，按照步骤二反向计算出上凸包</p><p><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194432515.png" alt="image-20211228194432515" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194450006.png" alt="image-20211228194450006" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194507074.png" alt="image-20211228194507074" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194522375.png" alt="image-20211228194522375" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194538321.png" alt="image-20211228194538321" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194554602.png" alt="image-20211228194554602" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194609689.png" alt="image-20211228194609689" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194625226.png" alt="image-20211228194625226" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194644472.png" alt="image-20211228194644472" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194703118.png" alt="image-20211228194703118" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194718047.png" alt="image-20211228194718047" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194733911.png" alt="image-20211228194733911" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194749243.png" alt="image-20211228194749243" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194803657.png" alt="image-20211228194803657" style="zoom:25%;"><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228194818839.png" alt="image-20211228194818839" style="zoom:25%;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 向量叉乘</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cross_mul</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; b, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; v1, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; v2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (v1[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>])*(v2[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]) - (v1[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>])*(v2[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">outerTrees</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; trees) &#123;<br><br>        <span class="hljs-built_in">sort</span>(trees.<span class="hljs-built_in">begin</span>(), trees.<span class="hljs-built_in">end</span>(), [](<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; lhs, <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; rhs)&#123;<br>            <span class="hljs-keyword">if</span>(lhs[<span class="hljs-number">0</span>] != rhs[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> lhs[<span class="hljs-number">0</span>] &lt; rhs[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">return</span> lhs[<span class="hljs-number">1</span>] &lt; rhs[<span class="hljs-number">1</span>];<br>        &#125;);<br><br>        <span class="hljs-keyword">int</span> n = trees.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; s;  <br><br>        s.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 先放入0，并且不置访问标记，反向时还要靠这个来从s中pop。</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++)&#123;<br>            <span class="hljs-keyword">int</span> len = s.<span class="hljs-built_in">size</span>();<br><br>            <span class="hljs-keyword">while</span>(len &gt;= <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">cross_mul</span>(trees[s[len<span class="hljs-number">-2</span>]], trees[s[len<span class="hljs-number">-1</span>]], trees[i]) &lt; <span class="hljs-number">0</span>) &#123;<br>                vis[s[len<span class="hljs-number">-1</span>]] = <span class="hljs-literal">false</span>;<br>                s.<span class="hljs-built_in">pop_back</span>();<br>                len --;<br>            &#125;<br><br>            s.<span class="hljs-built_in">push_back</span>(i);<br>            vis[i] = <span class="hljs-literal">true</span>; <br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-1</span>, pre_len = s.<span class="hljs-built_in">size</span>(); i &gt;= <span class="hljs-number">0</span>; i --)&#123;<br>            <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> len = s.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span>(len &gt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">2</span>,pre_len) &amp;&amp; <span class="hljs-built_in">cross_mul</span>(trees[s[len<span class="hljs-number">-2</span>]], trees[s[len<span class="hljs-number">-1</span>]], trees[i]) &lt; <span class="hljs-number">0</span>)&#123;<br>                vis[s[len<span class="hljs-number">-1</span>]] = <span class="hljs-literal">false</span>;<br>                s.<span class="hljs-built_in">pop_back</span>();<br>                len --;<br>            &#125;<br>            s.<span class="hljs-built_in">push_back</span>(i);<br>            vis[i] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <br>        s.<span class="hljs-built_in">pop_back</span>();  <span class="hljs-comment">// 0会放进去两次</span><br><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v: s) res.<span class="hljs-built_in">push_back</span>(trees[v]);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/1403/">题目链接2</a></p><p><img src="/2021/12/28/%E6%B1%82%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/image-20211228204946522.png" alt="image-20211228204946522"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">// Graham</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y;<br>&#125;Point;<br>Point points[N];<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-9</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Point&amp; lhs, <span class="hljs-keyword">const</span> Point&amp; rhs)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>(lhs.x-rhs.x, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(lhs.y-rhs.y, <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cross_mul</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Point&amp; base, <span class="hljs-keyword">const</span> Point&amp; lhs, <span class="hljs-keyword">const</span> Point&amp; rhs)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (lhs.x-base.x)*(rhs.y-base.y) - (lhs.y-base.y)*(rhs.x-base.x);    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; path)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> res = <span class="hljs-built_in">dis</span>(points[path[<span class="hljs-number">0</span>]], points[path.<span class="hljs-built_in">back</span>()]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; path.<span class="hljs-built_in">size</span>(); ++i)&#123;<br>        res += <span class="hljs-built_in">dis</span>(points[path[i]], points[path[i<span class="hljs-number">-1</span>]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;points[i].x, &amp;points[i].y);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(points[i].x &lt; points[s].x) s = i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(points[i].x == points[s].x &amp;&amp; points[i].y &lt; points[s].y) s = i;<br>    &#125;<br>    <span class="hljs-built_in">swap</span>(points[<span class="hljs-number">0</span>], points[s]);<br>    Point base = points[<span class="hljs-number">0</span>];<br> <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <br>    <span class="hljs-built_in">sort</span>(points+<span class="hljs-number">1</span>, points+n, [&amp;base](<span class="hljs-keyword">auto</span>&amp; lhs, <span class="hljs-keyword">auto</span>&amp; rhs)&#123;<br>        <span class="hljs-keyword">double</span> ret = <span class="hljs-built_in">cross_mul</span>(base, lhs, rhs);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(ret) &lt; eps) <span class="hljs-keyword">return</span> <span class="hljs-built_in">dis</span>(base, lhs) &lt; <span class="hljs-built_in">dis</span>(base, rhs);<br>        <span class="hljs-keyword">return</span> ret &gt; <span class="hljs-number">0</span>;<br>    &#125;);<br>    <br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, top = res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i &lt; n; ++i)&#123;<br>        <span class="hljs-keyword">while</span>(top &gt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">double</span> ret = <span class="hljs-built_in">cross_mul</span>(points[res[top<span class="hljs-number">-1</span>]], points[res[top]], points[i]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(ret) &lt; eps || ret &lt; <span class="hljs-number">0</span>)&#123;<br>                res.<span class="hljs-built_in">pop_back</span>();<br>                top--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(i);<br>        top++;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, <span class="hljs-built_in">cal</span>(res));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">// Andrew</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y;<br>&#125;Point;<br>Point points[N];<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-9</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Point&amp; lhs, <span class="hljs-keyword">const</span> Point&amp; rhs)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>(lhs.x-rhs.x, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(lhs.y-rhs.y, <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cross_mul</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Point&amp; base, <span class="hljs-keyword">const</span> Point&amp; lhs, <span class="hljs-keyword">const</span> Point&amp; rhs)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (lhs.x-base.x)*(rhs.y-base.y) - (lhs.y-base.y)*(rhs.x-base.x);    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; path)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> res = <span class="hljs-built_in">dis</span>(points[path[<span class="hljs-number">0</span>]], points[path.<span class="hljs-built_in">back</span>()]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; path.<span class="hljs-built_in">size</span>(); ++i)&#123;<br>        res += <span class="hljs-built_in">dis</span>(points[path[i]], points[path[i<span class="hljs-number">-1</span>]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;points[i].x, &amp;points[i].y);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(points, points+n, [](<span class="hljs-keyword">auto</span>&amp; lhs, <span class="hljs-keyword">auto</span>&amp; rhs)&#123;<br>        <span class="hljs-keyword">if</span>(lhs.x != rhs.x) <span class="hljs-keyword">return</span> lhs.x &lt; rhs.x;<br>        <span class="hljs-keyword">return</span> lhs.y &lt; rhs.y;<br>    &#125;);<br>    <br>    Point base = points[<span class="hljs-number">0</span>];<br> <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, top = res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i &lt; n; ++i)&#123;<br>        <span class="hljs-keyword">while</span>(top &gt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">double</span> ret = <span class="hljs-built_in">cross_mul</span>(points[res[top<span class="hljs-number">-1</span>]], points[res[top]], points[i]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(ret) &lt; eps || ret &lt; <span class="hljs-number">0</span>)&#123;<br>                vis[res[top]] = <span class="hljs-literal">false</span>;<br>                res.<span class="hljs-built_in">pop_back</span>();<br>                top--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        vis[i] = <span class="hljs-literal">true</span>;<br>        res.<span class="hljs-built_in">push_back</span>(i);<br>        top++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-2</span>, pre_top = res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>, top = pre_top; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-keyword">if</span>(vis[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">while</span>(top &gt;= pre_top)&#123;<br>            <span class="hljs-keyword">double</span> ret = <span class="hljs-built_in">cross_mul</span>(points[res[top<span class="hljs-number">-1</span>]], points[res[top]], points[i]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(ret) &lt; eps || ret &lt; <span class="hljs-number">0</span>)&#123;<br>                res.<span class="hljs-built_in">pop_back</span>();<br>                top--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(i);<br>        top++;<br>    &#125;<br>    <br>    res.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, <span class="hljs-built_in">cal</span>(res));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希腊字母英文对照表</title>
    <link href="/2021/12/28/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <url>/2021/12/28/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/12/28/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E8%A1%A8/image-20211228155346929.png" alt="image-20211228155346929"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大流最小割</title>
    <link href="/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/"/>
    <url>/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h3><p>也就是最大可行流。</p><p>一个有向图的可行流是指满足以下两个条件的网络流：</p><p>1、所有边的流量不超过该边的容量，即容量限制。</p><p>2、除了源点和汇点之外的所有点，进入流量等于流出流量，即流量守恒。</p><p>可行流的流量是指源点流出的总流量或者汇点汇集的总流量。</p><p>最大流是指所有可行流中<strong>最大的可行流</strong>。</p><p><strong>残余网络</strong>是根据原有向图和可行流而构建的图，残余网络包含所有原有向图的顶点。对于原有向图中的所有边，将该边的容量减去可行流中该边流量后剩余的流量建立边，同时构建一条流量为可行流中该边流量的反向边【可撤回该边的流量】。</p><p><strong>增广路径</strong>是指残余网络中一条由源点到汇点的简单路径，该路径上的所有边的权值都大于0。</p><p>**[注]:**二分图匹配属于最大流的一个特殊情况，将二分图的边改为有向边集合U-&gt;集合V，建立超级源点s和超级汇点t，超级源点s指向集合U中的所有点，集合V中的所有点都指向超级汇点t。最后，将所有边的权值设为1则变为最大流问题。</p><h3 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h3><p>也就是最小容量割。</p><p>对于任意一个可行流，将有向图的所有顶点分成两部分，并且源点和汇点不属于同一个部分，不妨记源点所在集合为S，汇点所在集合为T，那么称这个分割为ST割，ST割的容量是指：S集合中的边指向T集合中的<strong>边的容量的和</strong>(T指向S的不算)。</p><p>最小割是指<strong>具有最小容量的ST割</strong>。</p><p>可以证明任意可行流均小于等于最小割。f(s, t) &lt;= cut(S, T)</p><p>可以证明最大流大于等于最小割。f(s, t) &gt;= cut(S, T)</p><p>由以上两个条件就可以推出最大流最小割定理：最大流等于最小割。</p><h3 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h3><p>1、当前可行流是最大流</p><p>2、存在一个ST割的容量等于当前可行流的流量。</p><p>3、残余网络不存在增广路。</p><p><strong>以上3个条件互为充要条件</strong>。</p><h3 id="编程求解思想"><a href="#编程求解思想" class="headerlink" title="编程求解思想"></a>编程求解思想</h3><p><strong>维护残余网络，循环求解增广路并更新残余网络，直到没有增广路径时表明找到了最大流。其中每一条增广路径贡献该增广路径中边的最小值。</strong></p><h4 id="EK求最大流O-n-m-2"><a href="#EK求最大流O-n-m-2" class="headerlink" title="EK求最大流O(n * m^2)"></a>EK求最大流O(n * m^2)</h4><p><strong>每次找一条增广路径</strong></p><p><a href="https://www.acwing.com/problem/content/description/2173/">题目链接1</a></p><p><img src="/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/image-20211211162954506.png" alt="image-20211211162954506"></p><p><img src="/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/image-20211211163018729.png" alt="image-20211211163018729"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>, M = <span class="hljs-number">20010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> n, m, S, T;<br><br><span class="hljs-keyword">int</span> h[N], e[M], w[M], ne[M], tot;  <span class="hljs-comment">// w[i]即为该边的容量</span><br><br><span class="hljs-keyword">int</span> q[N];       <span class="hljs-comment">// 队列</span><br><span class="hljs-keyword">int</span> dis[N];     <span class="hljs-comment">// 增广路径源点到该点的最小边权值</span><br><span class="hljs-keyword">int</span> pre[N];     <span class="hljs-comment">// 增广路径每个点的前驱,由于是链式前向星存储，所以此处存储前驱边而不是前驱点。</span><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    e[tot] = b, w[tot] = c, ne[tot] = h[a], h[a] = tot++;<br>&#125;<br><br><br><span class="hljs-comment">// 找增广路,实际就是BFS</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    q[<span class="hljs-number">0</span>] = S;<br>    dis[S] = INF;<br>    pre[S] = <span class="hljs-number">-1</span>;<br>    vis[S] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;<br>        <span class="hljs-keyword">int</span> cur = q[hh++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[cur]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">if</span>(!vis[e[i]] &amp;&amp; w[i])&#123; <span class="hljs-comment">// 有权值大于0的边，并且点没访问过</span><br>                q[++tt] = e[i];<br>                vis[e[i]] = <span class="hljs-literal">true</span>;<br>                dis[e[i]] = <span class="hljs-built_in">min</span>(dis[cur], w[i]);<br>                pre[e[i]] = i;  <span class="hljs-comment">// 前驱边</span><br>                <span class="hljs-keyword">if</span>(e[i] == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">find</span>())&#123;<br>        <span class="hljs-comment">// 残余网络中找到了增广路径</span><br><br>        <span class="hljs-comment">// 合并至可行流</span><br>        res += dis[T];<br>        <br>        <span class="hljs-comment">// 维护残余网络</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = T; i != S; i = e[pre[i]^<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">// e[pre[i]^1]是前驱节点</span><br>            w[pre[i]] -= dis[T];<br>            w[pre[i]^<span class="hljs-number">1</span>] += dis[T];<br>        &#125;<br>    <br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <br>        <span class="hljs-comment">// 同时加两条边，则 i和i^1 互为反边</span><br>        <span class="hljs-built_in">add</span>(a, b, c);   <span class="hljs-comment">// 正向边</span><br>        <span class="hljs-built_in">add</span>(b, a, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 反向边</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">EK</span>());<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Dinic求最大流O-n-2-m-，重要！！！！！"><a href="#Dinic求最大流O-n-2-m-，重要！！！！！" class="headerlink" title="Dinic求最大流O(n^2 * m)，重要！！！！！"></a>Dinic求最大流O(n^2 * m)，重要！！！！！</h4><p><strong>每次找多条增广路径</strong></p><p><a href="https://www.luogu.com.cn/problem/P3376">题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">210</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">5010</span> &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> n, m, s, t;<br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], w[M], tot;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[tot] = y, ne[tot] = h[x], w[tot] = c, h[x] = tot ++;<br>&#125;<br><br><span class="hljs-comment">// bfs分层图</span><br><span class="hljs-keyword">int</span> level[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(level, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(level));<br>    level[s] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[N];<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = s;<br><br>    <span class="hljs-keyword">while</span>(hh &lt;= tt) &#123;<br>        <span class="hljs-keyword">int</span> x = q[hh ++];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[x]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-keyword">int</span> y = e[i];<br>            <span class="hljs-keyword">if</span> (level[y] == INF &amp;&amp; w[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                level[y] = level[x] + <span class="hljs-number">1</span>;<br>                q[++tt] = y;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> level[t] != INF;<br>&#125;<br><br><span class="hljs-comment">// 找增广路径</span><br><span class="hljs-function">ll <span class="hljs-title">findx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, ll minw)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == t) <span class="hljs-keyword">return</span> minw; <span class="hljs-comment">// 到达终点，返回这条路径上的最小边权</span><br><br>    ll total_flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[x]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-keyword">int</span> y = e[i];<br>        <span class="hljs-keyword">if</span> (level[y] == level[x] + <span class="hljs-number">1</span> &amp;&amp; w[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 子节点可以通过的flow</span><br>            ll flow = <span class="hljs-built_in">findx</span>(y, <span class="hljs-built_in">min</span>(minw, <span class="hljs-number">1ll</span> * w[i]));<br>            <br>            <span class="hljs-comment">// 当前节点可以通过的flow</span><br>            total_flow += flow;<br><br>            <span class="hljs-comment">// 更新这条边的flow</span><br>            w[i] -= flow;<br>            w[i^<span class="hljs-number">1</span>] += flow;<br><br>            <span class="hljs-comment">// 更新s-&gt;x路径上的最小边权</span><br>            minw -= flow;<br><br>            <span class="hljs-keyword">if</span> (minw == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (total_flow == <span class="hljs-number">0</span>) level[x] = INF;    <span class="hljs-comment">// 记忆化剪枝</span><br>    <span class="hljs-keyword">return</span> total_flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll max_flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-comment">// 跑一次分层图</span><br><br>        <span class="hljs-comment">// dfs查找可扩路</span><br>        ll minw = <span class="hljs-built_in">findx</span>(s, <span class="hljs-number">1ll</span> &lt;&lt; <span class="hljs-number">61</span>);<br><br>        <span class="hljs-comment">// 更新最大流</span><br>        max_flow += minw;<br>    &#125;<br><br>    cout &lt;&lt; max_flow &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br><br>    <span class="hljs-keyword">int</span> u, v, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++) &#123;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c;<br>        <span class="hljs-built_in">add</span>(u, v, c);<br>        <span class="hljs-built_in">add</span>(v, u, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 反向边</span><br>    &#125;<br><br>    <span class="hljs-built_in">Dinic</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求最小费用最大流O-n-m-2-log-c"><a href="#求最小费用最大流O-n-m-2-log-c" class="headerlink" title="求最小费用最大流O(n*m^2*log(c))"></a>求最小费用最大流O(n*m^2*log(c))</h4><p><strong>EK算法找可行流时，选择一条花费最小的可行流【有负边采用spfa算法】</strong></p><p><a href="https://www.luogu.com.cn/problem/P3381">题目链接1</a></p><p><a href="https://www.acwing.com/problem/content/description/2176/">题目链接2</a></p><p><img src="/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/image-20211216152836293.png" alt="image-20211216152836293"></p><p><img src="/2021/12/11/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/image-20211216152856593.png" alt="image-20211216152856593"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5010</span>, M = <span class="hljs-number">100010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> n, m, S, T;<br><br><span class="hljs-keyword">int</span> h[N], e[M], w[M], price[M], ne[M], tot;  <span class="hljs-comment">// w[i]即为该边的容量, price[i]为该边的费用</span><br><br><span class="hljs-keyword">int</span> q[N];       <span class="hljs-comment">// 队列。spfa使用【环形队列】，因为一个节点可能出入队多次导致空间溢出！</span><br><span class="hljs-keyword">int</span> dis[N];     <span class="hljs-comment">// 增广路径源点到该点的最小边权值</span><br><span class="hljs-keyword">int</span> cost[N];    <span class="hljs-comment">// 增广路径的费用</span><br><span class="hljs-keyword">int</span> pre[N];     <span class="hljs-comment">// 增广路径每个点的前驱,由于是链式前向星存储，所以此处存储前驱边而不是前驱点。</span><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> d)</span></span>&#123;<br>    e[tot] = b, w[tot] = c, price[tot] = d, ne[tot] = h[a], h[a] = tot++;<br>&#125;<br><br><br><span class="hljs-comment">// EK算法找最大流用BFS</span><br><span class="hljs-comment">// 费用流使用最短路径计算Dijkstra或者spfa，找到最短路径的可行流</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">1</span>;<span class="hljs-comment">// 环形队列</span><br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pre));<br>    <span class="hljs-built_in">memset</span>(cost, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cost));<br>    <br>    q[<span class="hljs-number">0</span>] = S;<br>    cost[S] = <span class="hljs-number">0</span>;<br>    dis[S] = INF;<br>    pre[S] = <span class="hljs-number">-1</span>;<br>    vis[S] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">while</span>(hh != tt)&#123;<br>        <span class="hljs-keyword">int</span> cur = q[hh++];<br>        vis[cur] = <span class="hljs-literal">false</span>;   <span class="hljs-comment">// spfa</span><br>        <br>        <span class="hljs-keyword">if</span>(hh == N) hh = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[cur]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">int</span> y = e[i];<br>            <span class="hljs-keyword">if</span>(w[i] &amp;&amp; cost[y] &gt; cost[cur]+price[i])&#123; <span class="hljs-comment">// 边存在，并且可以更新最短路径</span><br>                cost[y] = cost[cur]+price[i];<br>                dis[y] = <span class="hljs-built_in">min</span>(dis[cur], w[i]);<br>                pre[y] = i;     <span class="hljs-comment">// 前驱边</span><br>                <span class="hljs-keyword">if</span>(!vis[y])&#123;<br>                    q[tt++] = y;<br>                    vis[y] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span>(tt == N) tt = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> pre[T] != <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span></span>&#123;<br>    ll res = <span class="hljs-number">0</span>, minCost = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">find</span>())&#123;<br>        <span class="hljs-comment">// 残余网络中找到了增广路径</span><br> <br>        <span class="hljs-comment">// 合并至可行流</span><br>        res += dis[T];<br>        <br>        <span class="hljs-comment">// 维护残余网络</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = T; i != S; i = e[pre[i]^<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">// e[pre[i]^1]是前驱节点</span><br>            w[pre[i]] -= dis[T];<br>            w[pre[i]^<span class="hljs-number">1</span>] += dis[T];<br>            <br>            minCost += dis[T]*price[pre[i]];<br>        &#125;<br>    <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>, res, minCost);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-keyword">int</span> a, b, c, d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);<br>        <br>        <span class="hljs-comment">// 同时加两条边，则 i和i^1 互为反边</span><br>        <span class="hljs-built_in">add</span>(a, b, c, d);   <span class="hljs-comment">// 正向边</span><br>        <span class="hljs-built_in">add</span>(b, a, <span class="hljs-number">0</span>, -d);   <span class="hljs-comment">// 反向边</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">EK</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2021/12/08/%E5%9F%BA%E4%BA%8Ec++11%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2021/12/08/%E5%9F%BA%E4%BA%8Ec++11%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>之前一直写线程池用的都是有锁任务队列，现在整合了无锁任务队列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 17:13:23</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 17:13:24</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;queueLockFree.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> <span class="hljs-keyword">final</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    std::atomic&lt;<span class="hljs-keyword">bool</span>&gt;           running;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>                   threads_num;<br>    std::atomic&lt;<span class="hljs-keyword">int</span>&gt;            working_num;<br>    std::vector&lt;std::thread&gt;    threads;<br>    std::mutex                  mu;<br>    std::condition_variable     cond;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> TASK_TYPE = std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(<span class="hljs-keyword">void</span>)&gt;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">ThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>    ~<span class="hljs-built_in">ThreadPool</span>()&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(running.<span class="hljs-built_in">load</span>(std::memory_order_relaxed) == <span class="hljs-literal">false</span>)&#123;<br>            running.<span class="hljs-built_in">store</span>(<span class="hljs-literal">true</span>, std::memory_order_release);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(working_num.<span class="hljs-built_in">load</span>(std::memory_order_relaxed) != threads_num) <span class="hljs-keyword">this</span>-&gt;cond.<span class="hljs-built_in">notify_one</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;<br>        running.<span class="hljs-built_in">store</span>(<span class="hljs-literal">false</span>, std::memory_order_relaxed);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; td: threads) <span class="hljs-keyword">if</span>(td.<span class="hljs-built_in">joinable</span>()) td.<span class="hljs-built_in">join</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> FUNC, <span class="hljs-keyword">typename</span>... ARGS&gt;<br>    std::future&lt;<span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">FUNC</span>(ARGS...)&gt;::type&gt; <span class="hljs-built_in">add_task</span>(FUNC&amp;&amp;, ARGS&amp;&amp;...);<br><br>    <span class="hljs-comment">// 任务队列</span><br>    QueueLockFree&lt;std::shared_ptr&lt;TASK_TYPE&gt;, <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>&gt; tasks;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> FUNC, <span class="hljs-keyword">typename</span>... ARGS&gt;<br>std::future&lt;<span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">FUNC</span>(ARGS...)&gt;::type&gt; ThreadPool::<span class="hljs-built_in">add_task</span>(FUNC&amp;&amp; func, ARGS&amp;&amp;... args)&#123;<br>    <span class="hljs-keyword">using</span> RETURN_TYPE = <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">FUNC</span>(ARGS...)&gt;::type;<br><br>    <span class="hljs-function">std::packaged_task&lt;<span class="hljs-title">RETURN_TYPE</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>&gt; <span class="hljs-title">callable</span><span class="hljs-params">(std::bind(func, std::move(args)...))</span></span>;    <br><br>    <span class="hljs-keyword">auto</span> callable_sptr = std::make_shared&lt;std::packaged_task&lt;<span class="hljs-built_in">RETURN_TYPE</span>(<span class="hljs-keyword">void</span>)&gt;&gt;(std::<span class="hljs-built_in">move</span>(callable));      <span class="hljs-comment">// packaged_task没有拷贝构造，使用move。</span><br><br>    <span class="hljs-keyword">auto</span> warp_sptr = std::make_shared&lt;TASK_TYPE&gt;([callable_sptr]()&#123; (*callable_sptr)(); &#125;);<br><br>    <span class="hljs-keyword">while</span>(!tasks.<span class="hljs-built_in">EnQueue</span>(warp_sptr));<br>    <span class="hljs-keyword">return</span> callable_sptr-&gt;<span class="hljs-built_in">get_future</span>();<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 20:49:03</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 20:49:03</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ThreadPool.h&quot;</span></span><br><br>ThreadPool::<span class="hljs-built_in">ThreadPool</span>(<span class="hljs-keyword">int</span> thread_nums):<br>    <span class="hljs-built_in">threads_num</span>(thread_nums),<br>    <span class="hljs-built_in">running</span>(<span class="hljs-literal">false</span>),<br>    <span class="hljs-built_in">working_num</span>(<span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">assert</span>(threads_num &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threads_num; ++i)&#123;<br>        threads.<span class="hljs-built_in">emplace_back</span>(<br>            std::<span class="hljs-built_in">thread</span>([<span class="hljs-keyword">this</span>]()&#123;<br>                &#123;<br>                    std::unique_lock&lt;std::mutex&gt; <span class="hljs-built_in">u_lock</span>(<span class="hljs-keyword">this</span>-&gt;mu);<br>                    <span class="hljs-keyword">this</span>-&gt;cond.<span class="hljs-built_in">wait</span>(u_lock, [<span class="hljs-keyword">this</span>]()&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;running.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);&#125;);<br>                &#125;<br><br>                <span class="hljs-keyword">this</span>-&gt;working_num ++;<br><br>                <span class="hljs-comment">// 已经调用了start</span><br>                std::shared_ptr&lt;TASK_TYPE&gt; task;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-keyword">this</span>-&gt;running.<span class="hljs-built_in">load</span>(std::memory_order_relaxed))&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;tasks.<span class="hljs-built_in">DeQueue</span>(task))&#123;<br>                        (*task)();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">this</span>-&gt;working_num --;<br>            &#125;)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 21:11:49</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 21:11:50</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ThreadPool.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">ThreadPool <span class="hljs-title">tp</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br>    std::vector&lt;std::future&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        res.<span class="hljs-built_in">emplace_back</span>(<br>            tp.<span class="hljs-built_in">add_task</span>(add, i, i+<span class="hljs-number">1</span>)<br>        );<br>    &#125;<br><br>    tp.<span class="hljs-built_in">start</span>();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) tp.<span class="hljs-built_in">add_task</span>(sayHello);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>        res.<span class="hljs-built_in">emplace_back</span>(<br>            tp.<span class="hljs-built_in">add_task</span>(add, i, i+<span class="hljs-number">1</span>)<br>        );<br>    &#125;<br><br>    tp.<span class="hljs-built_in">stop</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; fint: res) &#123;<br>        std::future_status state = fint.<span class="hljs-built_in">wait_until</span>(std::chrono::system_clock::<span class="hljs-built_in">now</span>());<br>        <span class="hljs-keyword">if</span>(state == std::future_status::ready) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, fint.<span class="hljs-built_in">get</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux内核</title>
    <link href="/2021/11/28/linux%E5%86%85%E6%A0%B8/"/>
    <url>/2021/11/28/linux%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h4 id="操作体系结构"><a href="#操作体系结构" class="headerlink" title="操作体系结构"></a>操作体系结构</h4><img src="/2021/11/28/linux%E5%86%85%E6%A0%B8/image-20211129103555008.png" alt="image-20211129103555008" style="zoom:25%;"><p>操作系统内核提供内存管理(分配、回收、溢出)、进程管理(创建、切换、调度、销毁)、文件管理(打开、读写、关闭。提供虚拟文件系统VFS，把硬件当成文件来处理)、设备管理(也即驱动管理，分为3类：字符型设备管理、块设备管理、网络设备管理。这里没有实现驱动， 设备驱动的实现当作操作系统的下一层即硬件系统，硬件系统与物理硬件通信。这里主要是查看设备状态、设备地址识别)。<strong>计算机资源的管理者是对操作系统所起作用最直观的理解，管理和实现是分开的</strong></p><p>用户程序不可以直接调用内核函数，但是内核会在上面抽象一层操作系统的服务层，这样用户程序可以通过服务层来调用(比如sys_call)操作系统提供的各种服务。</p><h4 id="中断机制"><a href="#中断机制" class="headerlink" title="中断机制"></a>中断机制</h4><h5 id="区分异常："><a href="#区分异常：" class="headerlink" title="区分异常："></a>区分异常：</h5><p>异常是指CPU内部出现的中断，即在CPU执行特定指令时出现的非法情况，如整数除0，<strong>引发异常是与正在执行的指令相关的，而引发中断是与当前正在执行的指令无关的</strong>。同时异常也称为同步中断，因此只有在一条指令执行后才会发出中断，不可能在指令执行期间发生异常。</p><h5 id="中断分类："><a href="#中断分类：" class="headerlink" title="中断分类："></a>中断分类：</h5><p>1、硬件中断。（键盘、鼠标）</p><p>2、软件中断。（系统调用sys_call）</p><h5 id="软中断、硬中断、信号的区别"><a href="#软中断、硬中断、信号的区别" class="headerlink" title="软中断、硬中断、信号的区别:"></a>软中断、硬中断、信号的区别:</h5><p>硬中断是外部设备对CPU的中断。软中断通常是硬中断服务程序对内核的中断。信号是内核(或其他进程)对某个进程的中断。</p><h5 id="中断流程："><a href="#中断流程：" class="headerlink" title="中断流程："></a>中断流程：</h5><p>用户态切换到内核态=&gt;设置中断向量表=&gt;保存现场(各寄存器、当前中断码(由中断码确定服务函数)、中断代码的位置)以待后续返回来继续执行=&gt;跳转执行对应的中断服务函数(中断码)=&gt;恢复中断前的现场=&gt;内核态切换到用户态</p><p><a href="https://www.bilibili.com/video/BV1mw411R7LY?from=search&seid=12549174298096717010&spm_id_from=333.337.0.0">函数运行时栈</a>：rbp压栈(当前函数栈帧的基地址保存到栈中，同时将rsp下移)，将rsp赋值给rbp(将栈顶rsp也就是新的函数栈帧的基地址赋值给rbp)，为新函数的栈帧分配空间， 将新的函数的参数压栈(少量参数只用寄存器保存即可，额外多的参数压入栈中)，调用新的函数(将返回位置压栈，执行完新函数之后可以继续执行当前函数)，新函数执行完后在返回前清除栈帧(rbp复制给rsp，将rsp的内容赋值给rbp，恢复到了原函数栈帧)， 函数返回(当前栈顶是原函数的返回位置，出栈后跳转到相应位置继续执行)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> c = a+b;<br>        <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> y = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> z = add(x, y);<br>        <span class="hljs-keyword">return</span> z;<br>&#125;<br></code></pre></td></tr></table></figure><p>看汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;lea “load effective address”，即取有效地址<br><br>add:<br>1129:f3 0f 1e fa          endbr64 <br>    112d:55                   push   %rbp<br>;栈基址压栈,此时main函数的栈帧基址被保存在栈中<br>    112e:48 89 e5             mov    %rsp,%rbp<br>;将栈顶rsp复制给栈基址rbp<br>    1131:89 7d ec             mov    %edi,-0x14(%rbp)<br>;将edi中的内容 0x2 移动到rbp指向地址减去20个字节的地址处<br>    1134:89 75 e8             mov    %esi,-0x18(%rbp)<br>;将esi中的内容 0x3 移动到rbp指向地址减去24个字节的地址处<br>    1137:8b 55 ec             mov    -0x14(%rbp),%edx<br>;将rbp指向地址减去20个字节的地址处的内容 0x2 移动到edx中<br>    113a:8b 45 e8             mov    -0x18(%rbp),%eax<br>;将rbp指向地址减去24个字节的地址处的内容 0x3 移动到eax中<br>    113d:01 d0                add    %edx,%eax<br>;将edx中的内容 0x2 加到eax中，eax中的内容是 0x5<br>    113f:89 45 fc             mov    %eax,-0x4(%rbp)<br>;将eax中的内容 0x5 移动到rbp指向地址减去4个字节的地址处<br>    1142:8b 45 fc             mov    -0x4(%rbp),%eax<br>;将rbp指向地址减去4个字节的地址处的内容 0x5 移动到eax中<br>    1145:5d                   pop    %rbp<br>;将栈顶元素出栈rsp上移，并该元素保存到rbp中。注意这里没有和main一样下移rsp，rsp与rbp相同<br>;栈顶元素是main函数的栈帧基址<br>    1146:c3                   retq <br>;将栈顶记录的位置信息1170出栈，跳转到1170处执行。<br>;RET指令则是将栈顶的返回地址弹出,然后按照指示的指令地址继续执行程序。ret = pop + jump<br>main:<br>1147:f3 0f 1e fa          endbr64 <br>    114b:55                   push   %rbp<br>;栈基址压栈<br>    114c:48 89 e5             mov    %rsp,%rbp<br>;将栈顶rsp复制给栈基址rbp<br>    114f:48 83 ec 10          sub    $0x10,%rsp<br>;将栈顶往下移16字节<br>    1153:c7 45 f4 02 00 00 00 movl   $0x2,-0xc(%rbp)<br>;将0x2复制到 rbp指向地址减去0xc 的地址处，l即为long表示4个字节<br>;将0x2复制到 rbp指向地址减去12个字节的地址处<br>    115a:c7 45 f8 03 00 00 00 movl   $0x3,-0x8(%rbp)<br>;将0x3复制到 rbp指向地址减去8个字节的地址处<br>    1161:8b 55 f8             mov    -0x8(%rbp),%edx<br>;将rbp指向地址减去8个字节的地址处的内容，即0x3 复制到edx中<br>    1164:8b 45 f4             mov    -0xc(%rbp),%eax<br>;将rbp指向地址减去12个字节的地址处的内容，即0x2 复制到eax中<br>    1167:89 d6                mov    %edx,%esi<br>;将edx中的内容 0x3 移动到 esi中<br>    1169:89 c7                mov    %eax,%edi<br>;将eax中的内容 0x2 移动到 edi中<br>    116b:e8 b9 ff ff ff       callq  1129 &lt;_Z3addii&gt;<br>;跳转到1129执行add函数【到此处时,发现只用了rbp和rsp相隔16字节，但只使用了8个字节来保存0x3和0x2】<br>;call首先将返回地址1170压入栈顶,然后跳转到1129行执行指令。call = push + jump<br>    1170:89 45 fc             mov    %eax,-0x4(%rbp)<br>;add函数执行完毕，继续执行1170行的指令。<br>;将eax中的内容 0x5 移动到rbp指向地址减去4个字节的地址处<br>    1173:8b 45 fc             mov    -0x4(%rbp),%eax<br>;将rbp指向地址减去4个字节的地址处的内容 0x5 移动到eax中<br>    1176:c9                   leaveq <br>;将栈基指针rbp赋值给栈顶指针rsp,将栈顶元素出栈赋值给栈基指针rbp<br>;leave = mov rbp,rsp 加上 pop %rbp<br>    1177:c3                   retq   <br>;将栈顶记录的位置信息****(main函数调用者)出栈，跳转到****处执行。<br>    1178:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)<br>    117f:00<br></code></pre></td></tr></table></figure><h5 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h5><p>在响应一个特定中断的时候，内核会执行一个函数，该函数叫做中断处理程序或中断服务例程。产生中断的每个设备都有一个相应的中断处理程序，如果一个设备可以产生多种不同的中断，那么该设备就可以对应多个中断处理程序。一个设备的中断处理程序是它设备驱动程序的一部分（在驱动模块insmod安装时，注册中断事件、注册file_options的各回调函数）。</p><h5 id="中断上下部："><a href="#中断上下部：" class="headerlink" title="中断上下部："></a>中断上下部：</h5><p>中断处理一般分为两个部分，中断处理程序是上半部：接收到一个中断就立即执行，但只做有严格时限的工作，这些工作都是在所有中断被禁止的情况下完成的。能够被允许稍后完成的工作被推迟到下半部去。通常情况下，下半部会在中断处理程序返回时立即执行。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">示例：linux驱动的中断<br><br>注册中断<br><span class="hljs-built_in">int</span> request<span class="hljs-constructor">_irq(<span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">irq</span>, <span class="hljs-params">irq_handler_t</span> <span class="hljs-params">handler</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">long</span> <span class="hljs-params">flags</span>, <span class="hljs-params">const</span> <span class="hljs-params">char</span> <span class="hljs-operator">*</span> <span class="hljs-params">name</span>, <span class="hljs-params">void</span> <span class="hljs-operator">*</span> <span class="hljs-params">dev</span>)</span><br>     参数<span class="hljs-number">1</span>： irq       设备对应的中断号(逻辑/软件中断号，/proc/interrupts)<br> <span class="hljs-number">1</span>）宏定义：在没有设备树的内核中，软件中断号用宏函数IRQ_EINT获取<br> <span class="hljs-number">2</span>）设备树：通过节点去获取到软件中断号<br>      若用系统定义的宏函数<span class="hljs-constructor">IRQ_EINT(<span class="hljs-params">int</span> <span class="hljs-params">hard_interruptr_no</span>)</span>来获取对应的软中断号<br>      假设定义了<span class="hljs-number">16</span>是外部中断，则用<span class="hljs-constructor">IRQ_EINT(16)</span>可以获得该外部中断对应的软件中断号<br>      如果不小心设置成一样的中断号，则会引发一些错误。<br>     参数<span class="hljs-number">2</span>： handler     中断的处理函数<br>             typedef irqreturn_t (*irq_handler_t)(<span class="hljs-built_in">int</span>, void *);<br>             【中断上半部】<br>     参数<span class="hljs-number">3</span>：flags     触发方式<br>             #define IRQF_TRIGGER_NONE    <span class="hljs-number">0x00000000</span>  <span class="hljs-comment">//内部控制器触发中断的时候的标志</span><br>             #define IRQF_TRIGGER_RISING    <span class="hljs-number">0x00000001</span> <span class="hljs-comment">//上升沿</span><br>             #define IRQF_TRIGGER_FALLING    <span class="hljs-number">0x00000002</span> <span class="hljs-comment">//下降沿</span><br>             #define IRQF_TRIGGER_HIGH    <span class="hljs-number">0x00000004</span>  <span class="hljs-comment">// 高点平</span><br>             #define IRQF_TRIGGER_LOW    <span class="hljs-number">0x00000008</span> <span class="hljs-comment">//低电平触发</span><br>     参数<span class="hljs-number">4</span>：name     中断的描述，自定义,主要是给用户查看的<br>             /proc/interrupts<br>     参数<span class="hljs-number">5</span>：dev     传递给参数<span class="hljs-number">2</span>中函数指针的值，可作为共享中断时的中断区别参数<br>     返回值： 正确为<span class="hljs-number">0</span>，错误非<span class="hljs-number">0</span><br><br>销毁中断<br>void free<span class="hljs-constructor">_irq(<span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">irq</span>, <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">dev_id</span>)</span><br> 参数<span class="hljs-number">1</span>： 设备对应的中断号<br>     参数<span class="hljs-number">2</span>：与request_irq中第<span class="hljs-number">5</span>个参数保持一致<br><br>中断下半部有两种方式实现：<br><span class="hljs-number">1</span>、tasklet【将耗时任务封装成tasklet的处理程序，在request_irq的中断处理函数中使用tasklet<span class="hljs-constructor">_schedule(&amp;<span class="hljs-params">cur_tasklet</span>)</span>来将耗时程序延后执行】<br>tasklet是利用软中断实现的一种下半部机制。tasklet和软中断在本质上很相似，行为表现也相近。tasklet有两类中断代表：HI_SOFTIRQ和TASKLET_SOFTIRQ。这两者之间唯一的区别在于HI_SOFTIRQ类型的软中断先于TASKLET_SOFTIRQ类型的软中断执行。<br><span class="hljs-comment">// tasklet_struct的定义</span><br><span class="hljs-keyword">struct</span> tasklet_struct<br>&#123;<br><span class="hljs-keyword">struct</span> tasklet_struct *next;<span class="hljs-comment">// 链表中的下一个tasklet;</span><br>unsigned long state;<span class="hljs-comment">// tasklet的状态。有三个取值：0、TASKLET_STATE_SCHED、TASKLET_STATE_RUN。TASKLET_STATE_SCHED表明tasklet已经被调度，正准备投入运行，TASKLET_STATE_RUN表示该tasklet正在运行。</span><br>atomic_t count;<span class="hljs-comment">// tasklet的引用计数，如果它不为0，则tasklet被禁止，不允许执行；只有当它为0时，tasklet才被激活，并且在被设置为挂起（TASKLET_STATE_SCHED）状态时，该tasklet才能够被执行。</span><br>void (*func)(unsigned long);<span class="hljs-comment">// tasklet的处理程序</span><br>unsigned long data;<span class="hljs-comment">// func的参数</span><br>&#125;;<br><br><span class="hljs-comment">// tasklet被调度</span><br>内核使用tasklet<span class="hljs-constructor">_schedule()</span>函数来执行tasklet的调度，已调度的tasklet存放在两个单处理器数据结构：tasklet<span class="hljs-constructor">_vec(普通的<span class="hljs-params">tasklet</span>)</span>和tasklet<span class="hljs-constructor">_hi_vec(高优先级的<span class="hljs-params">tasklet</span>)</span>。这两个数据结构都是由tasklet_struct结构体构成的链表。链表中的每个tasklet_struct 代表一个不同的tasklet。<br>tasklet是由tasklet<span class="hljs-constructor">_schedule()</span>和tasklet<span class="hljs-constructor">_hi_shedule()</span>函数进行调度的，它们接受一个指向tasklet_struct结构的指针作为参数。两个函数非常相似【区别在于一个使用TASKLET_SOFTIRQ，一个使用<span class="hljs-constructor">HI_SOFTIRQ()</span>】。<br>tasklet<span class="hljs-constructor">_schedule()</span>函数还会为该tasklet分配per_cpu变量，每次中断只会向其中的一个cpu注册，而不是所有的cpu。完成注册后的tasklet由tasklet<span class="hljs-constructor">_action()</span>函数来执行。<br><br><span class="hljs-comment">// tasklet被执行</span><br>前面说过tasklet被放在一个全局的tasklet_vec的链表中，链表中的元素是tasklet_struct结构体。内核中有个ksoftirqd<span class="hljs-literal">()</span>的内核线程，它会周期的遍历软中断的向量列表，如果发现哪个软中断向量被挂起了（pending）,就执行相应的处理函数。tasklet对应的处理函数就是tasklet_action,这个函数在系统启动初始化软中断时，就在软中断向量表中注册。tasklet<span class="hljs-constructor">_action()</span>遍历全局的tasklet_vec链表。链表中的元素为tasklet_struct结构体<br><br>Linux 中的软中断包括网络收发、定时、调度、RCU 锁等各种类型，可以通过查看 /proc/softirqs 来观察软中断的运行情况。<br><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">k8s</span> <span class="hljs-operator">/</span><span class="hljs-identifier">proc</span>]</span># cat softirqs<br>                    CPU0       CPU1<br>          HI:          <span class="hljs-number">5</span>          <span class="hljs-number">1</span><br>       TIMER:  <span class="hljs-number">444492709</span>  <span class="hljs-number">271957759</span><br>      NET_TX:      <span class="hljs-number">18937</span>      <span class="hljs-number">15860</span><br>      NET_RX:   <span class="hljs-number">34769092</span>  <span class="hljs-number">430587974</span><br>       BLOCK:   <span class="hljs-number">12265925</span>          <span class="hljs-number">0</span><br>BLOCK_IOPOLL:          <span class="hljs-number">0</span>          <span class="hljs-number">0</span><br>     TASKLET:        <span class="hljs-number">853</span>        <span class="hljs-number">592</span><br>       SCHED:    <span class="hljs-number">4489427</span>   <span class="hljs-number">66716813</span><br>     HRTIMER:          <span class="hljs-number">0</span>          <span class="hljs-number">0</span><br>         RCU:  <span class="hljs-number">151213683</span>  <span class="hljs-number">128619479</span><br>         <br>内核线程ksoftirqd周期性地遍历软中断向量表，而tasklet在软中断向量表中占了一项，这个软中断的中断执行句柄tasklet_action就是遍历tasklet_vec链表，然后将执行其中挂起状态的tasklet的处理程序。<br><br><span class="hljs-number">2</span>、工作队列【将耗时任务封装成work的处理程序，在request_irq的中断处理函数中使用schedule<span class="hljs-constructor">_work(&amp;<span class="hljs-params">cur_work</span>)</span>来将耗时程序延后执行】<br>工作队列（workqueue）是另外一种将工作推后执行的形式，它和tasklet有所不同。工作队列可以把工作推后，交由一个【内核线程】去执行，也就是说，这个下半部分可以在进程上下文中执行。这样，通过工作队列执行的代码能占尽进程上下文的所有优势。最重要的就是工作队列允许被重新调度甚至是睡眠。<br><span class="hljs-comment">// work_struct结构定义</span><br><span class="hljs-keyword">struct</span> work_struct&#123;  <br>unsigned long pending; <span class="hljs-comment">// 这个工作正在等待处理吗？</span><br><span class="hljs-keyword">struct</span> list_head entry; <span class="hljs-comment">// 连接所有工作的链表   </span><br>void (*func) (void *); <span class="hljs-comment">// 要执行的处理函数   </span><br>void *data; <span class="hljs-comment">// 传递给函数的参数   </span><br>void *wq_data; <span class="hljs-comment">// 内部使用   </span><br><span class="hljs-keyword">struct</span> timer_list timer; <span class="hljs-comment">// 延迟的工作队列所用到的定时器  </span><br>&#125;;<br><br><span class="hljs-comment">// 创建工作（宏函数INIT_WORK）</span><br><span class="hljs-constructor">INIT_WORK(<span class="hljs-params">struct</span> <span class="hljs-params">work_struct</span> <span class="hljs-operator">*</span><span class="hljs-params">work</span>, <span class="hljs-params">void</span>(<span class="hljs-operator">*</span><span class="hljs-params">func</span>)</span> (void *), void *data);<br><br><span class="hljs-comment">// 调度工作</span><br><span class="hljs-built_in">int</span> schedule<span class="hljs-constructor">_work(<span class="hljs-params">struct</span> <span class="hljs-params">work_struct</span> <span class="hljs-operator">*</span><span class="hljs-params">work</span>)</span><br>该工作马上会被调度，一旦其所在的处理器上的内核线程被唤醒，这个工作就会被执行。<br></code></pre></td></tr></table></figure><p><img src="/2021/11/28/linux%E5%86%85%E6%A0%B8/image-20211202193353961.png" alt="image-20211202193353961"></p><h5 id="分析内核代码："><a href="#分析内核代码：" class="headerlink" title="分析内核代码："></a>分析内核代码：</h5><p>中断类型：中断前的处理和执行完中断的恢复过程                    中断执行过程</p><p>硬件中断：asm.s                                                                            traps.c</p><p>软件中断：system_call.s                                                               fork.c signal.c exit.c sys.c </p><h5 id="用户态切换到内核态"><a href="#用户态切换到内核态" class="headerlink" title="用户态切换到内核态"></a>用户态切换到内核态</h5><p>在Linux中，所有中断服务程序都属于内核代码。【引起状态切换的3种情况：1、系统调用(0x80中断)。2、中断。 3、异常】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0x80</span>中断时，由于系统启动时注册了<span class="hljs-number">0x80</span>的中断函数[内核汇编方法为<span class="hljs-function">call *<span class="hljs-title">sys_call_table</span><span class="hljs-params">(, %eax, <span class="hljs-number">4</span>)</span></span>; 在用户态库封装的方法为<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">syscall</span><span class="hljs-params">(<span class="hljs-keyword">long</span> number, ...)</span></span>;]，该函数通过系统调用号number查询系统调用表，得到系统调用的函数地址，最后执行系统调用。<br></code></pre></td></tr></table></figure><p>若中断时，进程在执行用户态的代码，该中断会引起CPU特权级<strong>CPL从3级到0级</strong>的切换，此时CPU会进行<strong>堆栈的切换</strong>，CPU会从当前任务的TSS中取到新堆栈的段选择符和偏移值；CPU首先会把<strong>原用户态的堆栈指针ss和esp压入内核态堆栈</strong>，随后把标志寄存器eflags的内容和此次中断的返回位置cs，eip压入内核态堆栈。当中断处理函数结束后，将<strong>恢复内核栈中的数据，并继续处理被中断的进程</strong>。</p><p>若中断时，进程正在执行内核态的代码，则不需要堆栈的切换，CPU仅把eflags的内容和此次中断的返回位置cs，eip压入内核态堆栈，然后执行中断服务程序。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无锁队列</title>
    <link href="/2021/11/23/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
    <url>/2021/11/23/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="无锁队列"><a href="#无锁队列" class="headerlink" title="无锁队列"></a>无锁队列</h3><h4 id="循环数组-DPDK"><a href="#循环数组-DPDK" class="headerlink" title="循环数组(DPDK)"></a>循环数组(DPDK)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 17:05:39</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 17:05:40</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-comment">// 环形队列</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">size_t</span> RING_BUF_SIZE&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueLockFree</span> <span class="hljs-keyword">final</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    T                       ring[RING_BUF_SIZE];<br>    std::atomic&lt;<span class="hljs-keyword">size_t</span>&gt;     prod_head, prod_tail;       <span class="hljs-comment">// 预计可以生产的位置(预分配队列中的空位置，队列中实际生产位置可能在该位置之前)、实际已经生产的位置</span><br>    std::atomic&lt;<span class="hljs-keyword">size_t</span>&gt;     cons_head, cons_tail;       <span class="hljs-comment">// 预计可以消费的位置(预消费了队列中的物品，队列中实际消费位置可能在该位置之前)、实际可以消费的位置</span><br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span>            mask;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">QueueLockFree</span><span class="hljs-params">()</span>: </span><br><span class="hljs-function">        mask(RING_BUF_SIZE<span class="hljs-number">-1</span>),</span><br><span class="hljs-function">        prod_head(<span class="hljs-number">0</span>),</span><br><span class="hljs-function">        prod_tail(<span class="hljs-number">0</span>),</span><br><span class="hljs-function">        cons_head(<span class="hljs-number">0</span>),</span><br><span class="hljs-function">        cons_tail(<span class="hljs-number">0</span>)</span><br><span class="hljs-function">    &#123;</span><br>        <span class="hljs-comment">// 环形队列长度必须为2的幂次,假设为32</span><br>        <span class="hljs-comment">// 用2的幂次取余相当于 &amp; 0xffff操作</span><br>        <span class="hljs-comment">// 无符号整数相加减不用考虑溢出问题</span><br>        <span class="hljs-comment">// 如： 1-2 = -1 = 0xffffffff</span><br>        <span class="hljs-comment">// 队列中含有多少元素?</span><br>        <span class="hljs-comment">// 1-2 &amp; 0x1f ==== 31</span><br>        <span class="hljs-comment">// 由于队列长度是2的幂次，故正好可以用后面的bit当作掩码</span><br>        <span class="hljs-built_in">assert</span>((RING_BUF_SIZE &amp; RING_BUF_SIZE<span class="hljs-number">-1</span>) == <span class="hljs-number">0</span>); <br>    &#125;<br>    ~<span class="hljs-built_in">QueueLockFree</span>()&#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(T&amp; t)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">size_t</span> cur_cons_tail = cons_tail.<span class="hljs-built_in">load</span>(std::memory_order_relaxed); <span class="hljs-comment">// 实际消费位置</span><br>            <span class="hljs-keyword">size_t</span> cur_prod_head = prod_head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed); <span class="hljs-comment">// 预计生产位置</span><br>            <span class="hljs-comment">// 二者之差即为队列中的剩余空间: cur_cons_tail-cur_prod_head &amp; mask</span><br><br>            <span class="hljs-keyword">size_t</span> prod_next = (cur_prod_head + <span class="hljs-number">1</span>) &amp; mask;<br><br>            <span class="hljs-comment">// 队列满：预计生产的位置的下一个位置是实际可以消费的位置，则表明队列是满的(下一个位置正等待消费)</span><br>            <span class="hljs-comment">// 不能使用预计消费的位置，因为这段区间的物品被预计消费，有可能没有完全出队，若当前入队可能造成覆盖</span><br>            <span class="hljs-keyword">if</span>(prod_next == cur_cons_tail) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">if</span>(prod_head.<span class="hljs-built_in">compare_exchange_strong</span>(cur_prod_head, prod_next, std::memory_order_relaxed))&#123;<br>                <span class="hljs-comment">// 入队                </span><br>                ring[cur_prod_head] = t;<br><br>                <span class="hljs-comment">// 更新队尾指针</span><br>                <span class="hljs-comment">// 只有预计生产位置等于实际生产位置时才更新：这表明该线程是第一个入队的</span><br>                <span class="hljs-comment">// 因为预计生产位置被各个生产线程向后移动，但是实际生产位置并没有被移动</span><br>                <span class="hljs-comment">// 第一个生产者的预计生产位置和实际生产位置是一致的</span><br>                <span class="hljs-comment">// 当第一个生产者移动了实际生产位置之后，第二个生产者的预计生产位置和实际生产位置也将变为一致的</span><br>                <span class="hljs-comment">// 依次顺序更新实际生产位置</span><br><br>                <span class="hljs-comment">// 自旋：等待之前的生产者更新实际生产位置</span><br>                <span class="hljs-keyword">while</span>(cur_prod_head != prod_tail.<span class="hljs-built_in">load</span>(std::memory_order_relaxed));<br>                prod_tail.<span class="hljs-built_in">store</span>(prod_next, std::memory_order_relaxed);<br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 被其他线程占用，再试一次</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(T&amp; t)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">size_t</span> cur_prod_tail = prod_tail.<span class="hljs-built_in">load</span>(std::memory_order_relaxed); <span class="hljs-comment">// 实际生产位置</span><br>            <span class="hljs-keyword">size_t</span> cur_cons_head = cons_head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed); <span class="hljs-comment">// 预计消费位置</span><br>            <span class="hljs-comment">// 二者之差即为队列中的物品数: cur_prod_tail-cur_cons_head &amp; mask</span><br><br>            <span class="hljs-keyword">size_t</span> cons_next = (cur_cons_head + <span class="hljs-number">1</span>) &amp; mask;<br><br>            <span class="hljs-comment">// 队列空：实际生产的位置是预计可以消费的位置，则表明队列是空的(当前位置正等待生产)</span><br>            <span class="hljs-comment">// 不能使用预计生产的位置，因为这段区间的物品被预计生产，有可能没有完全入队，若当前出队可能造成错误</span><br>            <span class="hljs-keyword">if</span>(cur_prod_tail == cur_cons_head) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">if</span>(cons_head.<span class="hljs-built_in">compare_exchange_strong</span>(cur_cons_head, cons_next, std::memory_order_relaxed))&#123;<br>                <span class="hljs-comment">// 出队</span><br>                t = ring[cur_cons_head];<br><br>                <span class="hljs-comment">// 更新队尾指针</span><br>                <span class="hljs-comment">// 只有预计消费位置等于实际消费位置时才更新：这表明该线程是第一个出队线程</span><br>                <span class="hljs-comment">// 因为预计消费位置被各个消费线程向后移动，但是实际消费位置并没有被移动</span><br>                <span class="hljs-comment">// 第一个消费者的预计消费位置和实际消费位置是一致的</span><br>                <span class="hljs-comment">// 当第一个消费者移动了实际消费位置之后，第二个消费者的预计消费位置和实际消费位置也将变为一致的</span><br>                <span class="hljs-comment">// 依次顺序更新实际消费位置</span><br><br>                <span class="hljs-comment">// 自旋：等待之前的消费者更新实际消费位置</span><br>                <span class="hljs-keyword">while</span>(cur_cons_head != cons_tail.<span class="hljs-built_in">load</span>(std::memory_order_relaxed));<br>                cons_tail.<span class="hljs-built_in">store</span>(cons_next, std::memory_order_relaxed);<br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 被其他线程占用，再试一次</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">QueueLockFree</span>(<span class="hljs-keyword">const</span> QueueLockFree&amp;) = <span class="hljs-keyword">delete</span>;<br>    QueueLockFree&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> QueueLockFree&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">QueueLockFree</span>(QueueLockFree&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br>    QueueLockFree&amp; <span class="hljs-keyword">operator</span>=(QueueLockFree&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 20:01:53</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 20:01:54</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;queueLockFree.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><br>QueueLockFree&lt;<span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>&gt; q; <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = start, j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; i++, j++) &#123;<br>        <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">EnQueue</span>(i))&#123;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-comment">// full</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TOTAL ENQUEUE %d\n&quot;</span>, cnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dequeue</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1500</span>; j ++)&#123;<br>        <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">DeQueue</span>(t))&#123;<br>            cnt ++;<br>        &#125;<br>        <span class="hljs-comment">// empty</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TOTAL DEQUEUE %d\n&quot;</span>, cnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(enqueue, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t2</span><span class="hljs-params">(enqueue, <span class="hljs-number">1000</span>)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t3</span><span class="hljs-params">(enqueue, <span class="hljs-number">2000</span>)</span></span>;<br><br>    <span class="hljs-function">std::thread <span class="hljs-title">t4</span><span class="hljs-params">(dequeue)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t5</span><span class="hljs-params">(dequeue)</span></span>;<br><br>    t1.<span class="hljs-built_in">join</span>();<br>    t2.<span class="hljs-built_in">join</span>();<br>    t3.<span class="hljs-built_in">join</span>();<br>    t4.<span class="hljs-built_in">join</span>();<br>    t5.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">int</span> t, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">DeQueue</span>(t)) cnt++;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MAIN DEQUEUE %d\n&quot;</span>, cnt);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/23/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/image-20211207211121692.png" alt="image-20211207211121692"></p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-11-23 15:41:52</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-11-23 15:41:53</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockFreeQueue</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 队列元素节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElementNode</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        T                           data;<br>        ElementNode*                next;<br>        <br>        <span class="hljs-built_in">ElementNode</span>()&#123; &#125;<br>        <span class="hljs-built_in">ElementNode</span>(<span class="hljs-keyword">const</span> T&amp; _data): <span class="hljs-built_in">data</span>(_data), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;<br><br>        &#125;<br>        ~<span class="hljs-built_in">ElementNode</span>()&#123;<br>            <span class="hljs-keyword">if</span>(next) <span class="hljs-keyword">delete</span> next;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">LockFreeQueue</span>(): <span class="hljs-built_in">head</span>(<span class="hljs-keyword">new</span> ElementNode), <span class="hljs-built_in">tail</span>(head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed))&#123;<br>    &#125;<br>    ~<span class="hljs-built_in">LockFreeQueue</span>()&#123;<br>        <span class="hljs-keyword">delete</span> head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>    &#125;<br><br>    <span class="hljs-comment">// 在队尾加元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(T _data)</span></span>&#123;<br>        ElementNode* cur_tail;<br>        ElementNode* cur_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ElementNode</span>(_data);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            cur_tail = tail.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>            <span class="hljs-comment">// weak版本在某些情况下即使满足条件也会返回false，所以一般只会在循环判断中使用，其他情况都使用strong版本。</span><br>            <span class="hljs-keyword">if</span>(tail.<span class="hljs-built_in">compare_exchange_weak</span>(cur_tail, cur_node, std::memory_order_acquire))&#123;<br>                <span class="hljs-comment">// 更改成功</span><br>                cur_tail-&gt;next = cur_node;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 更改失败，再试一次</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取队头元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(T&amp; _data)</span></span>&#123;<br>        ElementNode* cur_head;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            cur_head = head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);    <br>            <span class="hljs-comment">// ABA问题就是，在下面的CAS之前，该cur_head节点也就是当前队列的头节点已经被其他线程出队了</span><br>            <span class="hljs-comment">// 但是也由于其他线程的出入队操作，新队列的头节点在内存分配时的地址仍然是和原来的cur_head一样</span><br>            <span class="hljs-comment">// 故下面的CAS认为head.load() == cur_head，然后赋值head.store(cur_head-&gt;next)</span><br>            <span class="hljs-comment">// 但是，cur_head-&gt;next早已经由于出队操作被释放了，而且也不一定与目前head-&gt;next一样</span><br>            <span class="hljs-comment">// 为解决ABA问题，我们可以采用Double CAS，每次出队还增加头节点的版本号【指针长度增加，前面仍然是地址，后面则是计数器。atomic&lt;ElementNode* + count&gt; head】。</span><br>            <span class="hljs-comment">// 而利用循环数组实现无锁队列也可以解决ABA问题，因为循环数组不涉及内存的动态分配和回收。</span><br>            <span class="hljs-keyword">if</span>(cur_head-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-comment">// weak版本在某些情况下即使满足条件也会返回false，所以一般只会在循环判断中使用，其他情况都使用strong版本。</span><br>            <span class="hljs-keyword">if</span>(head.<span class="hljs-built_in">compare_exchange_weak</span>(cur_head, cur_head-&gt;next, std::memory_order_relaxed))&#123;<br>                <span class="hljs-comment">// 更改成功</span><br>                <span class="hljs-comment">// 赋返回值</span><br>                _data = cur_head-&gt;next-&gt;data;<br>                <span class="hljs-comment">// 删除节点</span><br>                cur_head-&gt;next = <span class="hljs-literal">nullptr</span>;<br>                <span class="hljs-keyword">delete</span> cur_head;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 获取失败，再来一次</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 队列头节点</span><br>    std::atomic&lt;ElementNode*&gt; head, tail; <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    LockFreeQueue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <br>    std::vector&lt;std::thread&gt; EnQueue_threads;<br>    std::vector&lt;std::thread&gt; DeQueue_threads;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        EnQueue_threads.<span class="hljs-built_in">emplace_back</span>(<br>            std::<span class="hljs-built_in">thread</span>([&amp;q]()&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) q.<span class="hljs-built_in">EnQueue</span>(i);<br>            &#125;)<br>        );<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        DeQueue_threads.<span class="hljs-built_in">emplace_back</span>(<br>            std::<span class="hljs-built_in">thread</span>([&amp;q]()&#123;<br>                std::unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; count;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    <span class="hljs-keyword">int</span> val = <span class="hljs-number">-1</span>;<br>                    q.<span class="hljs-built_in">DeQueue</span>(val);<br>                    count[val]++;<br>                &#125;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; kv: count) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data=%d count=%d\n&quot;</span>, kv.first, kv.second);<br>            &#125;)<br>        );<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; td: EnQueue_threads) <span class="hljs-keyword">if</span>(td.<span class="hljs-built_in">joinable</span>()) td.<span class="hljs-built_in">join</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; td: DeQueue_threads) <span class="hljs-keyword">if</span>(td.<span class="hljs-built_in">joinable</span>()) td.<span class="hljs-built_in">join</span>();<br><br>    std::unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; count;<br>    <span class="hljs-keyword">int</span> val;<br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">DeQueue</span>(val)) count[val]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; kv: count) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rest==&gt; data=%d count=%d\n&quot;</span>, kv.first, kv.second);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共享内存</title>
    <link href="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <url>/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h3 id="linux查看进程间通信资源"><a href="#linux查看进程间通信资源" class="headerlink" title="linux查看进程间通信资源"></a>linux查看进程间通信资源</h3><p>消息队列是内核相关，进程必须显示创建和销毁消息队列，管道是进程相关，进程结束后该管道被销毁。</p><p><code>ipcs</code>查看进程间通信资源</p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122154704530.png" alt="image-20211122154704530"></p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122154930794.png" alt="image-20211122154930794"></p><p><code>ipcmk</code>创建进程间通信资源</p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122155100228.png" alt="image-20211122155100228"></p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122155154693.png" alt="image-20211122155154693"></p><p><code>ipcrm</code>删除进程间通信资源</p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122155256372.png" alt="image-20211122155256372"></p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122155336904.png" alt="image-20211122155336904"></p><h3 id="先了解mmap"><a href="#先了解mmap" class="headerlink" title="先了解mmap"></a>先了解mmap</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> fd = ::<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./temp.shared&quot;</span>,   O_RDWR ,  S_IRUSR | S_IWUSR);<br><span class="hljs-keyword">void</span>* virtual_addr = ::<span class="hljs-built_in">mmap</span>(<span class="hljs-literal">nullptr</span>, <span class="hljs-number">1024</span>, PROT_WRITE | PROT_READ | PROT_EXEC , MAP_SHARED, fd, <span class="hljs-number">0</span> );<br></code></pre></td></tr></table></figure><p>通常按照上述方式来进行内存映射文件，这时候，我们通过对virtual_addr的memcpy即可完成对fd的write和read操作(内核会刷新内存到磁盘)。【ioremap是将物理地址映射到虚拟地址】</p><p><strong>（一）进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域</strong></p><p>1、进程在用户空间调用库函数mmap，原型：void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);</p><p>2、在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址</p><p>3、为此虚拟区分配一个vm_area_struct结构，接着对这个结构的各个域进行了初始化</p><p>4、将新建的虚拟区结构（vm_area_struct）插入进程的虚拟地址区域链表或树中</p><p><strong>（二）调用内核空间的系统调用函数mmap（不同于用户空间mmap函数），实现文件物理地址和进程虚拟地址的一一映射关系</strong></p><p>5、为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p><p>6、通过该文件的文件结构体，链接到file_operations模块，调用内核函数mmap，其原型为：int mmap(struct file *filp, struct vm_area_struct *vma)，不同于用户空间库函数。</p><p>7、内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p><p>8、通过remap_pfn_range函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到主存中。</p><p><strong>（三）进程发起对这片映射空间的访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝</strong></p><p>注：前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时。</p><p>9、进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p><p>10、缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p><p>11、调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果没有则调用nopage函数把所缺的页从磁盘装入到主存中。</p><p>12、之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。一般修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。</p><h3 id="共享内存示例代码"><a href="#共享内存示例代码" class="headerlink" title="共享内存示例代码"></a>共享内存示例代码</h3><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-11-22 14:50:14</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-11-22 14:50:15</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 先了解mmap</span><br><span class="hljs-comment">// mmap让两个进程的虚拟地址都映射到同一块物理地址</span><br><br><span class="hljs-comment">// mmap只完成映射，这意味着在调用mmap时已经确定了要映射的空间大小。</span><br><span class="hljs-comment">// 另一方面，有了虚拟地址到物理地址的映射之后，实际上意味着该进程可以查找页表访问到实际物理地址，也就是说完成了内存的分配。</span><br><span class="hljs-comment">// 但是内核管理的系统空闲页表什么时候减少呢？如果内核不知道该物理地址被分配出去了，那么会造成进程地址混乱。</span><br><span class="hljs-comment">// 因为我们调用的是用户空间的mmap，而内核中也有mmap，其原型为int mmap(struct file *filp, struct vm_area_struct *vma)。</span><br><span class="hljs-comment">// 用户空间mmap只是划分了一块进程虚拟地址，真正完成映射的是内核空间mmap。内核空间mmap建立文件物理地址和进程虚拟地址的一一映射关系；</span><br><span class="hljs-comment">// 假设，我们是内存映射磁盘。那么完成映射后的首次访问时，磁盘的物理页面不在内存中，产生缺页中断，然后内核将缺页拷贝到内存中，之后进程即可对这片主存进行读或者写的操作。</span><br><span class="hljs-comment">// 如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程，这里写入时并不会立刻刷新到磁盘而是有延时，可以 msync 强制同步。</span><br><br><span class="hljs-comment">// 常规读写： 磁盘数据拷贝到内核空间，内核空间拷贝到用户空间</span><br><span class="hljs-comment">// mmap：磁盘数据拷贝到用户空间</span><br><br><span class="hljs-comment">// malloc函数的实现会根据分配内存的size来决定使用哪个分配函数，当size小于等于128KB时，调用brk分配；当size大于128KB时，调用mmap分配内存。</span><br><br><span class="hljs-comment">// 1.用户空间不能直接访问内核空间数据（不能直接读写），一旦访问发生缺页异常，产生段错误，必须通过read这样的接口来访问，而read这样的接口会通过系统调用的方式陷入到内核态，然后通过copy_to_user这样的内核api来拷贝内核空间数据到用户空间之后才能正常访问。</span><br><span class="hljs-comment">// 2.通过mmap这种方式之后，用户进程可以直接访问这块内存，memcpy访问的也只不过是用户空间地址，由于访问的时候已经分配好了物理页面和建立好了物理页到虚拟页的映射，所有不会发生缺页异常，也不会发生用户态到内核态的陷入动作。</span><br><span class="hljs-comment">// 3.用户态进程正常访问内核态数据需要首先通过系统调用等方式陷入内核，进行数据拷贝，然后再次回到用户态，用户态和内核态直接的进出需要进行上下文切换，需要2次上下文切换，需要一定的开销，而mmap映射好之后以后访问都不需要进行上下文切换。</span><br><span class="hljs-comment">// 4.mmap映射这种方法由于物理页面通过页面共享更加节省内存，而用户态和内核态内存拷贝需要两份物理页面。</span><br><br><br><span class="hljs-comment">// #include &lt;sys/mman.h&gt;</span><br><span class="hljs-comment">/* 成功执行时，mmap() 返回被映射区的指针,失败时，mmap()返回 MAP_FAILED </span><br><span class="hljs-comment">* start：映射区的开始地址，通常为 NULL，系统会在该进程的虚拟地址空间的 MMAP 区寻找一段空闲的满足要求的连续的虚拟地址</span><br><span class="hljs-comment">* length：映射区的长度 </span><br><span class="hljs-comment">* prot：期望的内存保护标志，不能与文件的打开模式冲突 </span><br><span class="hljs-comment">* flags：指定映射对象的类型，映射选项和映射页是否可以共享 </span><br><span class="hljs-comment">* fd：有效的文件描述词 </span><br><span class="hljs-comment">* offset：被映射对象内容的起点</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">// void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);  </span><br><br><span class="hljs-comment">/* 在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生 </span><br><span class="hljs-comment">* addr：调用 mmap() 时返回的地址 </span><br><span class="hljs-comment">* len：映射区的长度 </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">// int munmap( void * addr, size_t len )   </span><br><br><span class="hljs-comment">/* 一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中， </span><br><span class="hljs-comment">* 往往在调用 munmap() 后才执行该操作, </span><br><span class="hljs-comment">* 可以通过调用 msync() 实现磁盘上文件内容与共享内存区的内容一致 </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">// int msync( void *addr, size_t len, int flags )</span><br><br><br><br><span class="hljs-comment">// 共享内存</span><br><span class="hljs-comment">// #include &lt;sys/ipc.h&gt;</span><br><span class="hljs-comment">// #include &lt;sys/shm.h&gt;</span><br><br><span class="hljs-comment">// shmget【得到一个共享内存标识符或创建一个共享内存对象】</span><br><span class="hljs-comment">// int shmget(key_t key, size_t size, int shmflg)</span><br><span class="hljs-comment">// key: 大于0的32位整数，视参数shmflg来确定操作。通常要求此值来源于ftok返回的IPC键值【如果要确保key值不变，要么确保ftok(file_path, id)的文件不被删除如该文件为/dev/null，要么不用ftok()，指定一个固定的key值。】</span><br><span class="hljs-comment">// size: 大于0的整数，新建的共享内存大小，以字节为单位</span><br><span class="hljs-comment">// shmflg: IPC_CREAT：如果内核中不存在键值与key相等的共享内存，则新建一个共享内存；如果存在这样的共享内存，返回此共享内存的标识符。</span><br><span class="hljs-comment">//         IPC_EXCL： 如果不是额外的则返回-1。一般与IPC_CREATE结合使用,表达必须新建语义。</span><br><span class="hljs-comment">// 返回值：成功返回共享内存的标识符shmid，出错返回-1</span><br><br><br><span class="hljs-comment">// shmat【把共享内存区对象映射到调用进程的地址空间】</span><br><span class="hljs-comment">// void *shmat(int shmid, const void *shmaddr, int shmflg)</span><br><span class="hljs-comment">// shmid： 共享内存标识符</span><br><span class="hljs-comment">// shmaddr： 指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置</span><br><span class="hljs-comment">// shmflg： SHM_RDONLY：为只读模式，其他为读写模式</span><br><span class="hljs-comment">// 返回值： 成功返回共享内存地址，出错返回-1</span><br><br><span class="hljs-comment">// shmdt【断开共享内存连接】</span><br><span class="hljs-comment">// int shmdt(const void *shmaddr)</span><br><span class="hljs-comment">// shmaddr： 连接的共享内存的起始地址</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><br><br><span class="hljs-comment">// shmctl【共享内存控制】</span><br><span class="hljs-comment">// int shmctl(int shmid, int cmd, struct shmid_ds *buf)</span><br><span class="hljs-comment">// shmid： 共享内存标识符</span><br><span class="hljs-comment">// cmd: IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中</span><br><span class="hljs-comment">//      IPC_SET：改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内</span><br><span class="hljs-comment">//      IPC_RMID：删除这片共享内存</span><br><span class="hljs-comment">// buf: 共享内存管理结构体。(类似于epoll中的epoll_event)</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret, shmid;<br><br>    <span class="hljs-comment">// 新建共享内存</span><br>    <span class="hljs-comment">// shmid = ::shmget(0x1234, 1024, 0600 | IPC_CREAT | IPC_EXCL);</span><br>    shmid = ::<span class="hljs-built_in">shmget</span>(<span class="hljs-number">0x1234</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">0600</span> | IPC_CREAT);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == shmid)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 内存映射</span><br>    <span class="hljs-keyword">void</span>* virtual_addr = ::<span class="hljs-built_in">shmat</span>(shmid, <span class="hljs-literal">nullptr</span>, SHM_STAT_ANY);<br><br>    <span class="hljs-comment">// 取消映射（取消映射后不能执行共享内存控制shmctl）</span><br>    <span class="hljs-comment">// ret = ::shmdt(virtual_addr);</span><br>    <span class="hljs-comment">// if(-1 == ret)&#123;</span><br>    <span class="hljs-comment">//     puts(strerror(errno));</span><br>    <span class="hljs-comment">//     return 0;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// 删除共享内存(取消映射后不能执行共享内存控制，故删除不了该块共享内存)</span><br>    <span class="hljs-comment">// ret = ::shmctl(shmid, IPC_RMID, nullptr);</span><br>    <span class="hljs-comment">// if(-1 == ret)&#123;</span><br>    <span class="hljs-comment">//     puts(strerror(errno));</span><br>    <span class="hljs-comment">//     return 0;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;更改之前为：%d\n&quot;</span>, *((<span class="hljs-keyword">int</span>*)virtual_addr));<br>    *((<span class="hljs-keyword">int</span>*)virtual_addr) = <span class="hljs-number">666</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>连续运行两次会发现两个进程的确使用了同一块物理地址。</p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122212532684.png" alt="image-20211122212532684"></p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211122213113713.png" alt="image-20211122213113713"></p><p><strong>但是，访问共享内存没有任何限制，而一般情况下，我们会让进程按照某些顺序来访问共享内存。这时候可以使用信号量来实现对共享内存读写的同步和互斥</strong></p><h3 id="信号量示例代码"><a href="#信号量示例代码" class="headerlink" title="信号量示例代码"></a>信号量示例代码</h3><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211123105302612.png" alt="image-20211123105302612" style="zoom:25%;"><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-11-23 09:19:44</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-11-23 09:19:45</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span>          <span class="hljs-comment">// O_xxxx flag</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span>       <span class="hljs-comment">// mode</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 头文件</span><br><span class="hljs-comment">// #include &lt;semaphore.h&gt;</span><br><span class="hljs-comment">// #include &lt;fcntl.h&gt;          // O_xxxx flag</span><br><span class="hljs-comment">// #include &lt;sys/stat.h&gt;       // mode</span><br><br><span class="hljs-comment">// sem_init【内存/匿名信号量的初始化，一般用于父子进程通信，线程间通信】</span><br><span class="hljs-comment">// int sem_init(sem_t *sem, int pshared, unsigned int value);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// pshared： 指明信号量的类型。不为0时此信号量在进程间共享(该信号量要处于共享内存中)，否则只能为当前进程的所有线程共享(该信号量要处于所有线程可见的地址)。</span><br><span class="hljs-comment">// value： 指定信号量初始值的大小</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;对于一个已经sem_init过的信号量再次调用sem_init,结果是未定义的。</span><br><br><span class="hljs-comment">// sem_destroy【删除内存/匿名信号量，匿名信号量应该在放置此内存释放之前通过sem_destroy释放，否则可能导致资源泄漏】</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// int sem_destroy(sem_t *sem);</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;销毁内存/匿名信号量，目前被阻塞在其他的进程或线程（sem_wait）将产生不确定的行为</span><br><br><span class="hljs-comment">// sem_open【有名信号量的初始化，一般用于进程间通信】</span><br><span class="hljs-comment">// sem_t* sem_open(const char *name, int oflag, mode_t mode,unsinged int value)；</span><br><span class="hljs-comment">// name： 信号量的外部名字(以&#x27;/&#x27;号开头，后面不能再有&#x27;/&#x27;号，长度小于NAME_MAX-4)</span><br><span class="hljs-comment">// oflag： 选择创建或打开一个现有的信号量</span><br><span class="hljs-comment">// mode： 权限位</span><br><span class="hljs-comment">// value： 信号量初始值</span><br><span class="hljs-comment">// 返回值： 成功时返回指向信号量的指针，出错时返回SEM_FAILED（空指针）</span><br><span class="hljs-comment">// 注意==&gt;sem_open不需要类似shared的参数，因为有名信号量(文件)总是可以在不同进程间共享的。可在/dev/shm目录中查看有名信号量</span><br><br><span class="hljs-comment">// sem_close【关闭有名信号量】</span><br><span class="hljs-comment">// int sem_close(sem_t *sem);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;一个进程终止时，内核还对其上仍然打开着的所有有名信号量自动执行关闭操作，但关闭并不意味着将他从系统中删除，信号量的值仍然保持。</span><br><br><span class="hljs-comment">// sem_unlink【删除有名信号量】</span><br><span class="hljs-comment">// int set_unlink(const char *name);</span><br><span class="hljs-comment">// name： 信号量的外部名字</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;只有所有打开该信号量的进程都主动地或者被动地调用了sem_close后，调用sem_unlink才会将该信号量删除。</span><br><br><br><span class="hljs-comment">// sem_wait【阻塞的P操作】</span><br><span class="hljs-comment">// int sem_wait(sem_t * sem);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;阻塞等待信号量的值大于0时，将该值减1。</span><br><br><span class="hljs-comment">// sem_trywait【非阻塞的P操作】</span><br><span class="hljs-comment">// int sem_trywait(sem_t *sem);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;当前信号量的值大于0时，将该值减1，返回成功0。否则返回失败-1，置errno为EAGAIN。</span><br><br><span class="hljs-comment">// sem_timedwait【带超时的阻塞的P操作。延时有缺陷，尽量不使用】</span><br><span class="hljs-comment">// int sem_timedwait(sem_t *__restrict__ __sem, const timespec *__restrict__ __abstime)</span><br><br><span class="hljs-comment">// sem_post【V操作】</span><br><span class="hljs-comment">// int sem_post(sem_t *sem);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><span class="hljs-comment">// 注意==&gt;出错可能是由于信号量值达到了最大值errno=EOVERFLOW,也可能是由于sem无效errno=EINVAL</span><br><br><span class="hljs-comment">// sem_getvalue【查看信号量的值】</span><br><span class="hljs-comment">// int sem_getvalue(sem_t *sem, int *sval);</span><br><span class="hljs-comment">// sem： 指向信号量对象</span><br><span class="hljs-comment">// sval: 信号量值的保存位置</span><br><span class="hljs-comment">// 返回值： 成功返回0，出错返回-1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">sem_t</span>* sem = <span class="hljs-built_in">sem_open</span>(<span class="hljs-string">&quot;/test1&quot;</span>, O_CREAT, <span class="hljs-number">0700</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(SEM_FAILED == sem)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// sem_t annoymous_sem;</span><br>    <span class="hljs-comment">// ret = sem_init(&amp;annoymous_sem, 1, 1);</span><br>    <span class="hljs-comment">// if(-1 == ret)&#123;</span><br>    <span class="hljs-comment">//     puts(strerror(errno));</span><br>    <span class="hljs-comment">//     return 0;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>        ret = <span class="hljs-built_in">sem_wait</span>(sem);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消耗信号量%u\n&quot;</span>, std::this_thread::<span class="hljs-built_in">get_id</span>());<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;生产信号量%u\n&quot;</span>, std::this_thread::<span class="hljs-built_in">get_id</span>());<br><br>        ret = <span class="hljs-built_in">sem_post</span>(sem);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        ::<span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    ret = <span class="hljs-built_in">sem_close</span>(sem);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>任意一秒钟内，仅有一个进程消耗了信号量</p><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211123112706815.png" alt="image-20211123112706815"></p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211123112906702.png" alt="image-20211123112906702"><h4 id="匿名信号量的进程间通信"><a href="#匿名信号量的进程间通信" class="headerlink" title="匿名信号量的进程间通信"></a>匿名信号量的进程间通信</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-11-23 13:18:44</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-11-23 13:18:44</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret, shmid;<br>    <span class="hljs-keyword">sem_t</span>* annoymous_sem;<br>    <span class="hljs-keyword">void</span>* virtual_addr;<br><br>    <span class="hljs-comment">// 新建共享内存</span><br>    shmid = ::<span class="hljs-built_in">shmget</span>(<span class="hljs-number">0x1234</span>, <span class="hljs-number">64</span>, <span class="hljs-number">0600</span> | IPC_CREAT | IPC_EXCL);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == shmid)&#123;<br>        shmid = ::<span class="hljs-built_in">shmget</span>(<span class="hljs-number">0x1234</span>, <span class="hljs-number">64</span>, <span class="hljs-number">0600</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == shmid)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// 内存映射</span><br>        virtual_addr = ::<span class="hljs-built_in">shmat</span>(shmid, <span class="hljs-literal">nullptr</span>, SHM_STAT_ANY);<br>        annoymous_sem = (<span class="hljs-keyword">sem_t</span>*) virtual_addr;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 内存映射</span><br>        virtual_addr = ::<span class="hljs-built_in">shmat</span>(shmid, <span class="hljs-literal">nullptr</span>, SHM_STAT_ANY);<br>        annoymous_sem = (<span class="hljs-keyword">sem_t</span>*) virtual_addr;<br><br>        <span class="hljs-comment">// 新建匿名信号量</span><br>        ret = <span class="hljs-built_in">sem_init</span>(annoymous_sem, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0   <span class="hljs-comment">// 生产者</span></span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>        ret = <span class="hljs-built_in">sem_post</span>(annoymous_sem);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;生产&quot;</span>);<br>        ::<span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    ret = <span class="hljs-built_in">sem_destroy</span>(annoymous_sem);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span>   <span class="hljs-comment">// 消费者</span></span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>        ret = <span class="hljs-built_in">sem_wait</span>(annoymous_sem);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;消费&quot;</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/22/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/image-20211123135456026.png" alt="image-20211123135456026"></p>]]></content>
    
    
    <categories>
      
      <category>共享内存</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>共享内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ksoftirqd线程</title>
    <link href="/2021/11/21/ksoftirqd%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/11/21/ksoftirqd%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="ksoftirqd线程"><a href="#ksoftirqd线程" class="headerlink" title="ksoftirqd线程"></a>ksoftirqd线程</h3><p>如果当软中断到来时立即执行软中断，并且处理完当前软中断后到来的新软中断也在本次执行，这样可能会导致cpu一直处理软中断而无法正常处理其他任务。如果处理完当前软中断后到来的新软中断在下次执行，这样可能会导致在空闲系统中的资源利用率偏低，因为空闲系统希望立刻执行新软中断任务。</p><p>内核中实现的方案是不会立即处理处理重新触发的软中断。而作为改进，当大量软中断出现的时候，内核会唤醒一组内核线程来处理这些负载。这些线程在最低的优先级上运行（nice值是19），这能避免它们跟其他重要的任务抢夺资源。但它们最终肯定会被执行，所以这个折中方案能够保证在软中断负担很中的时候用户程序不会因为得不到处理时间处于饥饿状态。相应的，也能保证”过量“的软中断终究会得到处理。</p><p> 每个处理器都有一个这样的线程。所有线程的名字都叫做ksoftirq/n，区别在于n，它对应的是处理器的编号。在一个双CPU的机器上就有两个这样的线程，分别叫做ksoftirqd/0和ksoftirqd/1。为了保证只要有空闲的处理器，它们就会处理软中断，所以给每个处理器都分配一个这样的线程(死循环)。用top命令可以看到下面有ksoftirqd/0和ksoftirqd/1两个进程。</p><p><img src="/2021/11/21/ksoftirqd%E7%BA%BF%E7%A8%8B/image-20220301094259728.png" alt="image-20220301094259728"></p><p>只要有待处理的软中断(由softirq_pending()函数负责发现)，ksoftirq就会调用do_softirq去处理它们。通过重复执行这样的操作，重新触发的软中断也会被执行。如果有必要，每次迭代后都会调用schedule()以便让更重要的进程得到处理机会。当所有需要执行的操作都完成以后，该内核线程将自己设置为TASK_INTERRUPTIBLE状态，唤起调度程序选择其他可执行进程投入运行。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟退火</title>
    <link href="/2021/11/20/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    <url>/2021/11/20/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.acwing.com/problem/content/description/3170/">模板题链接</a></strong></p><p><strong>解决问题类型：求二维平面最优点</strong></p><p><img src="/2021/11/20/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/image-20211120160042419.png" alt="image-20211120160042419"></p><p><img src="/2021/11/20/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/image-20211120160100208.png" alt="image-20211120160100208"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 模拟退火模板</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">using</span> pdd = pair&lt;<span class="hljs-keyword">double</span>, <span class="hljs-keyword">double</span>&gt;;<br>vector&lt;pdd&gt; a;            <span class="hljs-comment">// 所有点</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> INF = <span class="hljs-number">1.5e6</span>; <span class="hljs-comment">// 最大距离和是sqrt(1e8 + 1e8) * 100 = 1.414e6</span><br><span class="hljs-keyword">double</span> res = INF; <br><br><span class="hljs-comment">// 两点距离</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pdd&amp; x, <span class="hljs-keyword">const</span> pdd&amp; y)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> dx = x.first - y.first;<br>    <span class="hljs-keyword">double</span> dy = x.second - y.second;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(dx * dx + dy * dy);<br>&#125;<br><br><span class="hljs-comment">// simulate_annel中的【评价函数】</span><br><span class="hljs-comment">// 所有点到x的距离之和</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pdd&amp; x)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 当前方案</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p : a)&#123;<br>        sum += <span class="hljs-built_in">get_dis</span>(x, p);<br>    &#125;<br>    res = <span class="hljs-built_in">min</span>(res, sum);    <span class="hljs-comment">// 全局更新</span><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br>std::random_device rd;  <span class="hljs-comment">// 硬件随机数引擎，多线程下同时调用不会出现相同的随机数种子</span><br><span class="hljs-keyword">unsigned</span> seed = <span class="hljs-built_in">rd</span>();   <span class="hljs-comment">// 获取一个硬件随机数作为种子</span><br><span class="hljs-function">mt19937 <span class="hljs-title">mt</span><span class="hljs-params">(seed)</span></span>;       <span class="hljs-comment">// 随机数引擎</span><br><span class="hljs-function">uniform_real_distribution&lt;<span class="hljs-keyword">double</span>&gt; <span class="hljs-title">gen</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// 随机分布函数</span><br><span class="hljs-comment">// 随机分布函数需要一个随机数引擎作为参数，从而返回一个符合分布的随机数：gen(mt)。</span><br><br><span class="hljs-comment">// 注意random_device也是引擎！是一个均匀分布的整数随机数生成器，它产生非确定性随机数。 </span><br><span class="hljs-comment">// 它可以与分布一起使用来生成随机数，但是一旦熵池耗尽， std::random_device的许多实现的【性能会急剧下降】。</span><br><span class="hljs-comment">// 因此建议仅使用它来播种伪随机数生成器，例如std::mt19937_64 。</span><br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_random</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+(b-a)*<span class="hljs-built_in">gen</span>(mt);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">simulate_anneal</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 模拟退火</span></span><br><span class="hljs-function"></span>&#123;<br>    pdd pos&#123;<span class="hljs-built_in">get_random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1e4</span>), <span class="hljs-built_in">get_random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1e4</span>)&#125;;    <span class="hljs-comment">// 初始值          </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">double</span> t = <span class="hljs-number">1e4</span>; t &gt; <span class="hljs-number">1e-6</span>; t *= <span class="hljs-number">0.95</span>)           <span class="hljs-comment">// 逐渐降温</span><br>    &#123;<br>        <span class="hljs-keyword">double</span> x = <span class="hljs-built_in">calc</span>(pos);  <span class="hljs-comment">// 原方案的评价</span><br>        <span class="hljs-comment">// 随机一个新方案</span><br>        pdd cur&#123;pos.first+<span class="hljs-built_in">get_random</span>(-t, t), pos.second+<span class="hljs-built_in">get_random</span>(-t, t)&#125;;<br>        <span class="hljs-keyword">double</span> y = <span class="hljs-built_in">calc</span>(cur);  <span class="hljs-comment">// 新方案的评价</span><br>        <br>        <span class="hljs-keyword">double</span> delta = y - x;<br>        <br>        <span class="hljs-comment">// 新方案更好，则必选新方案；否则以一定概率选新方案 </span><br>        <span class="hljs-comment">// delta &lt; 0    ==&gt;     pos = cur</span><br>        <span class="hljs-comment">// delta &gt;= 0   ==&gt;     if(e^(delta/t) &gt; get_random(0, 1)) pos = cur</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exp</span>(-delta / t) &gt; <span class="hljs-built_in">get_random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        &#123;<br>            <span class="hljs-comment">// 换成新方案</span><br>            pos = cur;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    a.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n ;++i) cin &gt;&gt; a[i].first &gt;&gt; a[i].second;<br>    <br>    <span class="hljs-comment">// 做100次模拟退火</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span>; ++i) <span class="hljs-built_in">simulate_anneal</span>();<br>    <br>    cout &lt;&lt; <span class="hljs-built_in">round</span>(res);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>斯特林数</title>
    <link href="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    <url>/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.acwing.com/problem/content/description/3169/">第一类斯特林数题目1</a></strong></p><p><img src="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/image-20211120153605600.png" alt="image-20211120153605600"></p><p><img src="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/image-20211120153621051.png" alt="image-20211120153621051"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m &amp;&amp; j &lt;= i; ++j)&#123;<br>            <span class="hljs-comment">// 单独成为一个新排列</span><br>            f[i][j] = (f[i][j] + <span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]) % mod;<br>            <span class="hljs-comment">// 放入之前的j个排列中的某一个数(1~i-1)的后面</span><br>            f[i][j] = (f[i][j] + <span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>][j]*(i<span class="hljs-number">-1</span>)) % mod;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><a href="https://leetcode-cn.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/">第一类斯特林数题目2</a></strong></p><p><img src="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/image-20211120154706394.png" alt="image-20211120154706394"></p><p><img src="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/image-20211120154733257.png" alt="image-20211120154733257"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rearrangeSticks</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> f[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br>        <span class="hljs-built_in">memset</span>(f[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(k, i); ++j)&#123;<br>                f[i][j] = (f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + (i<span class="hljs-number">-1</span>)*f[i<span class="hljs-number">-1</span>][j])%mod;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f[n][k];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong><a href="https://www.acwing.com/problem/content/description/3169/">第二类斯特林数题目1</a></strong></p><p><img src="/2021/11/20/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/image-20211120153402981.png" alt="image-20211120153402981"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m &amp;&amp; j &lt;= i; ++j)&#123;<br>            <span class="hljs-comment">// 单独成一类</span><br>            f[i][j] = (f[i][j] + <span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]) % mod;<br>            <span class="hljs-comment">// 放入之前的j个集合中的某一个集合</span><br>            f[i][j] = (f[i][j] + <span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>][j]*j) % mod;<br>            <br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扫描线算法</title>
    <link href="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    <url>/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="扫描线算法"><a href="#扫描线算法" class="headerlink" title="扫描线算法"></a>扫描线算法</h3><p>预备知识: 线段树。前面已经对<a href="https://gys18007141407.github.io/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/">线段树</a>有所记录，线段树部分不赘述。</p><h4 id="解题方案-示意图更好理解"><a href="#解题方案-示意图更好理解" class="headerlink" title="解题方案(示意图更好理解)"></a>解题方案(示意图更好理解)</h4><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211116135036137.png" alt="image-20211116135036137" style="zoom:25%;"><p>1、对于最终所有的矩形而言，我们按照从上到下、或者从左到右的方向，遍历经过的矩形的边。</p><p>2、假设这样遍历了共m条边，那么这m条边应该夹住了m-1个区间(分割的小矩形)。</p><p>3、思考：a、前一次遍历的边与当前遍历的边的距离就是按照扫描线所分割的矩形的宽度；b、但是分割的矩形的长度我们如何能求？</p><p>4、不妨假设我们是按照如图所示从下到上的方式扫描边的。我们先按照矩形的竖线将最终图形所占的横线(扫描线)分为若干区域，如图两个矩形的扫描线被分为3块区域。</p><p>5、当扫描线经过某矩形的下边界，则将扫描线对应该边界区域的块的值增1，表示接下来即将进入该扫描区域。</p><p>6、当扫描线经过某矩形的上边界，则将扫描线对应该边界区域的块的值减1，表示该扫描区域扫描完毕。</p><p>7、显然扫描线在碰到矩形边界以前，扫描线所有块的值不发生改变，并且扫描线所有值大于0的块的区域长度之和就是该分割的小矩形的长度。</p><p>8、计算所有分割的m-1个小矩形的面积之和即得解。</p><p>9、扫描线所有块的值更新使用线段树来维护，降低时间复杂度。</p><p><a href="https://leetcode-cn.com/problems/rectangle-area-ii/">题目链接1</a></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211116134647631.png" alt="image-20211116134647631"></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211116134707035.png" alt="image-20211116134707035"></p><p><strong>矩形数量比较少使用的朴素解法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">410</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>    <span class="hljs-comment">// 扫描线(这里使用横线扫描)</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">line</span> &#123;</span><br>        <span class="hljs-keyword">int</span> x1, x2, y, v;       <span class="hljs-comment">// v标记矩形的上下边</span><br>    &#125; line;<br>    line lines[N];            <span class="hljs-comment">// 最多200个矩形，400条横线</span><br>    <span class="hljs-comment">// 竖线将横线切割为多个块</span><br>    <span class="hljs-keyword">int</span> blk[N];               <span class="hljs-comment">// 最多200个矩形，400条竖线，每条竖线一个块，最多400个块</span><br>    <span class="hljs-comment">// 从x轴下标到blk下标的映射</span><br>    unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; x2blk;<br>    <span class="hljs-comment">// 扫描线数量和blk数量</span><br>    <span class="hljs-keyword">int</span> line_cnt = <span class="hljs-number">0</span>, blk_cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 线段树模板</span><br>    <span class="hljs-comment">// ==</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_node</span> &#123;</span><br>        <span class="hljs-keyword">int</span> l, r, m;<br>        <span class="hljs-keyword">int</span> len;        <span class="hljs-comment">// 区间[l, r]长度</span><br>        <span class="hljs-keyword">int</span> lazy;       <span class="hljs-comment">// 区间[l, r]覆盖次数(作为懒标记)</span><br>        <span class="hljs-keyword">int</span> left, right;<br>    &#125; st_node;<br><br>    st_node node[<span class="hljs-number">4</span> * N + <span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> idx = tot ++;<br>        st_node &amp;cur_node = node[idx];<br>        cur_node.l = ql, cur_node.r = qr, cur_node.m = ql + qr &gt;&gt; <span class="hljs-number">1</span>, cur_node.len = <span class="hljs-number">0</span>, cur_node.lazy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ql != qr) &#123;<br>            cur_node.left = <span class="hljs-built_in">build</span>(ql, cur_node.m);<br>            cur_node.right = <span class="hljs-built_in">build</span>(cur_node.m + <span class="hljs-number">1</span>, qr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> idx;<br>    &#125;<br><br>    <span class="hljs-comment">// 区间[ql, qr]的覆盖次数增加v</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        st_node &amp;cur_node = node[idx];<br>        <span class="hljs-keyword">if</span> (ql &gt; cur_node.r || qr &lt; cur_node.l) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (ql &lt;= cur_node.l &amp;&amp; qr &gt;= cur_node.r) cur_node.lazy += v;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 为啥这里不用push_down懒标记lazy?</span><br>            <span class="hljs-comment">// 1、因为该题只会query(root)查询总长度。</span><br>            <span class="hljs-comment">// 1.1、如果cur_node.lazy &gt; 1, 则直接返回区间长度，不会继续访问子区间，懒标记没必要下传</span><br>            <span class="hljs-comment">// 1.2、如果cur_node.lazy == 0, 则此处没有懒标记要下传</span><br>            <span class="hljs-built_in">push_down</span>(cur_node.left, ql, qr, v);<br>            <span class="hljs-built_in">push_down</span>(cur_node.right, ql, qr, v);<br>        &#125;<br>        <span class="hljs-built_in">push_up</span>(idx);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>        st_node &amp;cur_node = node[idx];<br>        <span class="hljs-keyword">if</span> (cur_node.lazy) cur_node.len = blk[cur_node.r + <span class="hljs-number">1</span>] - blk[cur_node.l];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur_node.l != cur_node.r) &#123;<br>            cur_node.len = node[cur_node.left].len + node[cur_node.right].len;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur_node.len = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ==</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rectangleArea</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; r)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;v : r) &#123;<br>            lines[line_cnt ++] = line&#123;v[<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>], v[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>&#125;;<br>            lines[line_cnt ++] = line&#123;v[<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>], v[<span class="hljs-number">3</span>], <span class="hljs-number">-1</span>&#125;;<br>            blk[blk_cnt ++] = v[<span class="hljs-number">0</span>];<br>            blk[blk_cnt ++] = v[<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-comment">// 线描线被拆分为块</span><br>        <span class="hljs-built_in">sort</span>(blk, blk + blk_cnt);<br>        blk_cnt = <span class="hljs-built_in">unique</span>(blk, blk + blk_cnt) - blk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; blk_cnt; i++) x2blk[blk[i]] = i;<br><br>        <span class="hljs-comment">// 扫描线排序</span><br>        <span class="hljs-built_in">sort</span>(lines, lines + line_cnt, [](line &amp;lhs, line &amp;rhs) &#123;<br>            <span class="hljs-keyword">return</span> lhs.y &lt; rhs.y;<br>        &#125;);<br><br>        <span class="hljs-comment">// 线段树维护块</span><br>        <span class="hljs-keyword">int</span> root = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, blk_cnt - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 遍历扫描线</span><br>        ll res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, pre_y = <span class="hljs-number">0</span>; i &lt; line_cnt; i++) &#123;<br>            <span class="hljs-comment">// 当前长度是多少</span><br>            <span class="hljs-keyword">int</span> r_x = node[root].len;<br>            <span class="hljs-comment">// 当前宽度是多少</span><br>            <span class="hljs-keyword">int</span> r_y = lines[i].y - pre_y;<br>            <span class="hljs-comment">// 逻辑矩形的面积</span><br>            res = (res + <span class="hljs-number">1ll</span> * r_x * r_y) % mod;<br>            <span class="hljs-comment">// 更新区间</span><br>            <span class="hljs-built_in">push_down</span>(root, x2blk[lines[i].x1], x2blk[lines[i].x2] - <span class="hljs-number">1</span>, lines[i].v);<br>            <span class="hljs-comment">// 更新逻辑矩形的前一个边界</span><br>            pre_y = lines[i].y;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>矩形数量比较多时使用线段树优化</strong></p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211116203207536.png" alt="image-20211116203207536" style="zoom:25%;"><p><strong>注意：</strong>线段树是闭区间分裂。如使用线段树维护区间本身而非区间中的点的时候，例如维护区间[0,3]；常规建树会有 [0,3] ==&gt; [0,1] + [2,3]，此时已经出现问题了，因为区间[1,2]丢失了。假如我们要询问[0, 3]的最大值，而子区间[0,1]返回2，子区间[2,3]返回1，故最终返回2。然而事实上答案是3。假如我们要更改区间[1,2]的值为5，然而父区间[0,3]会让调用子区间[1,1]和[2,2]改为5，改完之后我们再询问区间[0,1]的最大值会返回5，然而答案是2。 </p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211116203621024.png" alt="image-20211116203621024" style="zoom:25%;"><p>如果我们不以点来编号，而以区间来编号。我们不在维护数轴上的各点0、1、2、3，转而维护区间0、1、2。这样会发生什么变化呢？线段树维护[0, 2] ==&gt; [0, 1] + [2, 2] ==&gt; [0, 0] + [1, 1] + [2, 2]。假如我们要询问[0, 2]的最大值，而子区间[0,1]返回3，子区间[2,2]返回1，故最终返回3。假如我们要更改区间[1,2]的值为5，然而父区间[0,2]会让调用子区间[1,1]和[2,2]改为5，改完之后我们再询问区间0的最大值会返回2。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 线段树优化版本</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">205</span>;<br><br>    <span class="hljs-comment">// 点数少，但点的值很大 ==&gt; 离散</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; inconcrete;<br><br>    <span class="hljs-comment">// 静态节点【使用完全二叉树来快速访问左右子树】</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>        <span class="hljs-comment">// 维护的区间(和动态开点时的l、r一样的含义)</span><br>        <span class="hljs-keyword">int</span> l, r;   <br><br>        <span class="hljs-comment">// 维护的值</span><br>        <span class="hljs-keyword">int</span> val;    <span class="hljs-comment">// 该区间被覆盖的次数</span><br>        <span class="hljs-keyword">int</span> len;    <span class="hljs-comment">// 该区间内覆盖次数val大于0的子区间的实际长度</span><br><br>    &#125;st[<span class="hljs-number">4</span>*<span class="hljs-number">2</span>*N];<br><br>    <span class="hljs-comment">// 静态节点建树</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        st[idx].l = l, st[idx].r = r, st[idx].val = <span class="hljs-number">0</span>, st[idx].len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l &lt; r)&#123;<br>            <span class="hljs-keyword">int</span> m = (<span class="hljs-number">1ll</span>*l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">build</span>(idx&lt;&lt;<span class="hljs-number">1</span>, l, m), <span class="hljs-built_in">build</span>(idx&lt;&lt;<span class="hljs-number">1</span> | <span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, r);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询对应的节点维护的区间内覆盖次数val大于0的子区间的实际长度</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> st[idx].len;<br>    &#125;<br><br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> v)</span></span>&#123; <br>        <span class="hljs-keyword">if</span>(ql &gt; st[idx].r || qr &lt; st[idx].l) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 区间外</span><br>        <span class="hljs-comment">// 包含该节点维护的区间</span><br>        <span class="hljs-keyword">if</span>(ql == st[idx].l &amp;&amp; qr == st[idx].r)&#123;<br>            <span class="hljs-comment">// 该区间覆盖次数增加v</span><br>            st[idx].val += v;<br>            <br>            <span class="hljs-comment">// 更新节点维护的区间内覆盖次数val大于0的子区间的实际长度</span><br>            <span class="hljs-keyword">if</span>(st[idx].val &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 直接全覆盖,覆盖区间长度为该节点维护的区间的总长度</span><br>                st[idx].len = inconcrete[st[idx].r + <span class="hljs-number">1</span>] - inconcrete[st[idx].l];<br>                <span class="hljs-comment">// 为啥不push_down? ==&gt; 把val当作懒标记！</span><br>                <span class="hljs-comment">// 由题目的特殊性，假设当前v是-1，则这之前这个区间一定update过+1，之前就没有push_down,而是保存了懒标记v = +1,则当前-1只是恢复了懒标记到之前的状态。因此，当该节点存在懒标记，我们不访问该节点的子节点时，逻辑上不会出现任何错误。事实上, 我们的确不会去访问子节点，我们唯一访问的节点就是st[1]根节点，查询当前线段树中覆盖次数大于1的区间的总长度。因此，val信息可以不传递到子节点。</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 没有全覆盖，获取两个子区间内的覆盖区间长度</span><br>                st[idx].len = st[idx&lt;&lt;<span class="hljs-number">1</span>].len + st[idx&lt;&lt;<span class="hljs-number">1</span> | <span class="hljs-number">1</span>].len;<br>                <span class="hljs-comment">// 为啥前面没有push_down，但这里直接相加子区间覆盖长度也能得到正确覆盖长度?</span><br>                <span class="hljs-comment">// 显然当前v是-1,否则st[idx].val+v必然大于0。由为啥不push_down的解释我们知道之前该节点必然保存了懒标记，也就是说当前操作使节点的懒标记val由1更新到了0。但是子节点的覆盖区间长度信息不是由当前节点push_down下去的，而是直接update得来的，因此仍然是正确的。</span><br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> m = st[idx].l + st[idx].r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(qr &lt;= m) <span class="hljs-built_in">update</span>(idx&lt;&lt;<span class="hljs-number">1</span>, ql, qr, v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ql &gt; m) <span class="hljs-built_in">update</span>(idx&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, ql, qr, v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">update</span>(idx&lt;&lt;<span class="hljs-number">1</span>, ql, m, v), <span class="hljs-built_in">update</span>(idx&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>, qr, v);<br><br>        <span class="hljs-comment">// 更新维护的区间内覆盖次数val大于0的子区间的实际长度</span><br>        <span class="hljs-keyword">if</span>(st[idx].val &gt; <span class="hljs-number">0</span>)&#123;<br>            st[idx].len = inconcrete[st[idx].r + <span class="hljs-number">1</span>] - inconcrete[st[idx].l];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            st[idx].len = st[idx&lt;&lt;<span class="hljs-number">1</span>].len + st[idx&lt;&lt;<span class="hljs-number">1</span> | <span class="hljs-number">1</span>].len;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rectangleArea</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; r)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = r.<span class="hljs-built_in">size</span>();<br>        ll res = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">// 从左到右扫描，扫描线依次扫描矩形竖线[需要记录竖线的x坐标,竖线y区间,左右竖线标记]</span><br>        <span class="hljs-built_in">sort</span>(r.<span class="hljs-built_in">begin</span>(), r.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-comment">// 竖线</span><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; lines;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: r)&#123;<br>            lines.<span class="hljs-built_in">emplace_back</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;p[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>], p[<span class="hljs-number">3</span>], <span class="hljs-number">1</span>&#125;);<br>            lines.<span class="hljs-built_in">emplace_back</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;p[<span class="hljs-number">2</span>], p[<span class="hljs-number">1</span>], p[<span class="hljs-number">3</span>], <span class="hljs-number">-1</span>&#125;);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(lines.<span class="hljs-built_in">begin</span>(), lines.<span class="hljs-built_in">end</span>());<br><br><br>        <span class="hljs-comment">// 矩形横线分割扫描线成若干区域</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: r)&#123;<br>            inconcrete.<span class="hljs-built_in">push_back</span>(p[<span class="hljs-number">1</span>]), inconcrete.<span class="hljs-built_in">push_back</span>(p[<span class="hljs-number">3</span>]); <br>        &#125;<br>        <span class="hljs-built_in">sort</span>(inconcrete.<span class="hljs-built_in">begin</span>(), inconcrete.<span class="hljs-built_in">end</span>());<br>        inconcrete.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(inconcrete.<span class="hljs-built_in">begin</span>(), inconcrete.<span class="hljs-built_in">end</span>()), inconcrete.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-comment">// 离散化</span><br>        map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; getOrigin;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inconcrete.<span class="hljs-built_in">size</span>(); ++i) getOrigin[inconcrete[i]] = i;<br>        <br>        <span class="hljs-comment">// 维护扫描线各块区域的值</span><br>        <span class="hljs-comment">// 节点[l, l]表示的是区间[inconcrete[l], inconcrete[l+1]]</span><br>        <span class="hljs-comment">// 故st中共维护inconcrete.size()-1个叶子节点(每个点表示一段区间)</span><br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, inconcrete.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br><br><br>        <span class="hljs-comment">// 从左到右扫描，扫描线依次扫描矩形竖线</span><br>        <span class="hljs-keyword">int</span> prex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: lines)&#123;<br>            <span class="hljs-comment">// 计算分割小矩形长度</span><br>            ll len = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">// 更新扫描线各块区域的值</span><br>            <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, getOrigin[p[<span class="hljs-number">1</span>]], getOrigin[p[<span class="hljs-number">2</span>]]<span class="hljs-number">-1</span>, p[<span class="hljs-number">3</span>]);<br><br>            <span class="hljs-comment">// 加上分割小矩形面积</span><br>            res = (res + len*(p[<span class="hljs-number">0</span>] - prex)) % mod;<br><br>            <span class="hljs-comment">// 更新扫描线位置</span><br>            prex = p[<span class="hljs-number">0</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/249/">题目链接2</a></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211117104959050.png" alt="image-20211117104959050"></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211117105044774.png" alt="image-20211117105044774"></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20211117105105894.png" alt="image-20211117105105894"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">line</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y1, y2;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> struct line&amp; other) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x &lt; other.x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 竖线</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">line</span> <span class="hljs-title">lines</span>[<span class="hljs-title">N</span>*2];</span><br><br><span class="hljs-comment">// 扫描线的块</span><br><span class="hljs-keyword">double</span> inconcrete[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-comment">// 线段树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ST</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> l, r;           <span class="hljs-comment">// 维护的区间节点范围</span><br>    <span class="hljs-keyword">int</span> val;            <span class="hljs-comment">// 覆盖次数</span><br>    <span class="hljs-keyword">double</span> len;         <span class="hljs-comment">// 覆盖区间长度</span><br>    <br>    <span class="hljs-keyword">int</span> m;<br>    ST* Left, *Right;<br>    <br>    <span class="hljs-built_in">ST</span>(<span class="hljs-keyword">int</span> _l, <span class="hljs-keyword">int</span> _r)&#123;<br>        l = _l, r = _r, m = _l+_r&gt;&gt;<span class="hljs-number">1</span>, val = <span class="hljs-number">0</span>, len = <span class="hljs-number">0</span>, Left = <span class="hljs-literal">nullptr</span>, Right = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    ~<span class="hljs-built_in">ST</span>()&#123;<br>        <span class="hljs-keyword">if</span>(Left) <span class="hljs-keyword">delete</span> Left;<br>        <span class="hljs-keyword">if</span>(Right) <span class="hljs-keyword">delete</span> Right;<br>    &#125;<br>    <span class="hljs-function">ST* <span class="hljs-title">left</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> Left?Left:(Left=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(l, m)); &#125;<br>    <span class="hljs-function">ST* <span class="hljs-title">right</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> Right?Right:(Right=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(m+<span class="hljs-number">1</span>, r)); &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pl, <span class="hljs-keyword">int</span> pr, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-comment">// 正好是当前区间</span><br>        <span class="hljs-keyword">if</span>(pl == l &amp;&amp; pr == r)&#123;<br>            <span class="hljs-comment">// 置懒标记</span><br>            val += v;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(pl &gt; m) <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">update</span>(pl, pr, v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pr &lt;= m) <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">update</span>(pl, pr, v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">update</span>(pl, m, v), <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">update</span>(m+<span class="hljs-number">1</span>, pr, v);<br>        &#125;<br>        <br>        <br>        <span class="hljs-keyword">if</span>(val &gt; <span class="hljs-number">0</span>)&#123;<br>            len = inconcrete[r+<span class="hljs-number">1</span>] - inconcrete[l];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            len = <span class="hljs-built_in">left</span>()-&gt;len + <span class="hljs-built_in">right</span>()-&gt;len;<br>        &#125;<br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, case_id = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">double</span> x1,y1,x2,y2;<br>    <span class="hljs-keyword">int</span> line_idx, block_idx;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n), n)&#123;<br>        <br>        <span class="hljs-keyword">double</span> res = <span class="hljs-number">0</span>;<br>        line_idx = block_idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf%lf&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>            <span class="hljs-comment">// 竖线</span><br>            lines[line_idx++] = &#123;x1, y1, y2, <span class="hljs-number">1</span>&#125;;<br>            lines[line_idx++] = &#123;x2, y1, y2, <span class="hljs-number">-1</span>&#125;;<br>            <br>            <span class="hljs-comment">// 扫描线分割成块</span><br>            inconcrete[block_idx++] = y1;<br>            inconcrete[block_idx++] = y2;<br>        &#125;<br>        <br>        <span class="hljs-built_in">sort</span>(lines, lines+line_idx);<br>        <br>        <span class="hljs-comment">// 离散化</span><br>        <span class="hljs-built_in">sort</span>(inconcrete, inconcrete+block_idx);<br>        block_idx = <span class="hljs-built_in">unique</span>(inconcrete, inconcrete+block_idx)-inconcrete;<br>        unordered_map&lt;<span class="hljs-keyword">double</span>, <span class="hljs-keyword">int</span>&gt; getpos;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; block_idx; ++i) getpos[inconcrete[i]] = i;<br>        <br>        <br>        <span class="hljs-comment">// 维护扫描线各块区域的值</span><br>        <span class="hljs-comment">// 节点[l, l]表示的是区间[inconcrete[l], inconcrete[l+1]]</span><br>        <span class="hljs-comment">// 故st中共维护inconcrete.size()-1个叶子节点(每个点表示一段区间)</span><br>        <span class="hljs-function">ST <span class="hljs-title">st</span><span class="hljs-params">(<span class="hljs-number">0</span>, block_idx<span class="hljs-number">-1</span>)</span></span>;<br>        <br>        <span class="hljs-comment">// 从左到右扫描，扫描线依次扫描矩形竖线</span><br>        <span class="hljs-keyword">double</span> prex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_idx; i ++ )&#123;<br>            <span class="hljs-comment">// 计算分割小矩形长度</span><br>            <span class="hljs-keyword">double</span> len = st.len;<br><br>            <span class="hljs-comment">// 更新扫描线各块区域的值</span><br>            st.<span class="hljs-built_in">update</span>(getpos[lines[i].y1], getpos[lines[i].y2]<span class="hljs-number">-1</span>, lines[i].v);<br><br>            <span class="hljs-comment">// 加上分割小矩形面积</span><br>            res += len*(lines[i].x - prex);<br><br>            <span class="hljs-comment">// 更新扫描线位置</span><br>            prex = lines[i].x;<br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Test case #%d\n&quot;</span>, case_id++);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total explored area: %.2lf\n\n&quot;</span>, res); <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P5490">luogu模板题</a></p><p><img src="/2021/11/16/%E6%89%AB%E6%8F%8F%E7%BA%BF%E7%AE%97%E6%B3%95/image-20220830163306151.png" alt="image-20220830163306151"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">line</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x, y1, y2;<br>    <span class="hljs-keyword">int</span> left;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> line&amp; other) &#123;<br>        <span class="hljs-keyword">return</span> x &lt; other.x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 矩阵的竖边界线</span><br><span class="hljs-keyword">int</span> line_size = <span class="hljs-number">0</span>;<br>line lines[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-comment">// 横坐标分块</span><br><span class="hljs-keyword">int</span> blk_size = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> blk[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-comment">// 分块离散化</span><br>map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; discrete;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ST</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> l, r, m;<br>    <span class="hljs-keyword">int</span> cnt;        <span class="hljs-comment">// [l,r]区间的所有块最小覆盖次数</span><br>    <span class="hljs-keyword">int</span> len;        <span class="hljs-comment">// [l,r]区间覆盖长度</span><br>    ST *Left, *Right;<br>    <br>    <span class="hljs-built_in">ST</span> (<span class="hljs-keyword">int</span> _l, <span class="hljs-keyword">int</span> _r) :<br>        <span class="hljs-built_in">l</span>(_l), <span class="hljs-built_in">r</span>(_r), <span class="hljs-built_in">m</span>(_l+_r&gt;&gt;<span class="hljs-number">1</span>), <span class="hljs-built_in">cnt</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">len</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">Left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">Right</span>(<span class="hljs-literal">nullptr</span>)<br>    &#123; &#125;<br>    <br>    <span class="hljs-function">ST *<span class="hljs-title">left</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Left ? Left : (Left = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(l, m)); &#125;<br>    <span class="hljs-function">ST *<span class="hljs-title">right</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Right ? Right : (Right = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(m+<span class="hljs-number">1</span>, r)); &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ql == l &amp;&amp; qr == r) &#123;<br>            <span class="hljs-comment">// 置懒标记</span><br>            cnt += v;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (ql &gt; m) <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(ql, qr, v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (qr &lt;= m) <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(ql, qr, v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(ql, m, v), <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(m+<span class="hljs-number">1</span>, qr, v);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 为啥cnt不push_down? ==&gt; 把cnt当作懒标记！</span><br>        <span class="hljs-comment">// 由题目的特殊性，假设当前v是-1，则这之前这个区间一定update过+1</span><br>        <span class="hljs-comment">// 之前就是保存了懒标记cnt += 1, 则当前-1只是恢复了懒标记。</span><br>        <span class="hljs-comment">// 因此，当节点存在懒标记，只要我们不访问该节点的子节点时，逻辑上不会出现任何错误</span><br>        <span class="hljs-comment">// 事实上, 我们的确不会去访问子节点，我们唯一访问的就是根节点的覆盖长度</span><br>        <br>        <span class="hljs-comment">// 1、有懒标记，覆盖长度为区间总长度</span><br>        <span class="hljs-keyword">if</span> (cnt) &#123;<br>            len = blk[r + <span class="hljs-number">1</span>] - blk[l];<br>        &#125;<br>        <span class="hljs-comment">// 2、没有懒标记，覆盖长度由左右子树决定</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            len = <span class="hljs-built_in">left</span>()-&gt;len + <span class="hljs-built_in">right</span>()-&gt;len;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> x1, y1, x2, y2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br><br>        <span class="hljs-comment">// 各矩阵的横线将纵坐标切分为多个块</span><br>        <span class="hljs-comment">// 记录竖线</span><br>        lines[line_size ++] = &#123;x1, y1, y2, <span class="hljs-number">1</span>&#125;;<br>        lines[line_size ++] = &#123;x2, y1, y2, <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-comment">// 记录纵坐标的块</span><br>        blk[blk_size ++] = y1;<br>        blk[blk_size ++] = y2;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(lines, lines + line_size);<br>    <span class="hljs-built_in">sort</span>(blk, blk + blk_size);<br>    blk_size = <span class="hljs-built_in">unique</span>(blk, blk + blk_size) - blk;<br>    <br>    <span class="hljs-comment">// 离散化各块</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; blk_size; i++) discrete[blk[i]] = i;<br>    <br>    <span class="hljs-comment">// 线段树维护纵坐标的块</span><br>    <span class="hljs-function">ST <span class="hljs-title">st</span><span class="hljs-params">(<span class="hljs-number">0</span>, blk_size - <span class="hljs-number">1</span>)</span></span>;<br>    <br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历竖线，让竖线对应的块根据左竖线还是右竖线加上1或者减去1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, prex = <span class="hljs-number">0</span>; i &lt; line_size; i++) &#123;<br>        <span class="hljs-comment">// 当前竖线和前一条竖线的距离就是逻辑矩形的长度</span><br>        <span class="hljs-keyword">int</span> a = lines[i].x - prex;<br>        <br>        <span class="hljs-comment">// 由线段树计算出逻辑矩形的宽度</span><br>        <span class="hljs-keyword">int</span> b = st.len;<br>        <br>        <span class="hljs-comment">// 增加收益</span><br>        res += <span class="hljs-number">1ll</span> * a * b;<br>        <br>        <span class="hljs-comment">// 更新线段树在该竖线上的块</span><br>        st.<span class="hljs-built_in">push_down</span>(discrete[lines[i].y1], discrete[lines[i].y2] - <span class="hljs-number">1</span>, lines[i].left);<br><br>        <span class="hljs-comment">// 更新prex</span><br>        prex = lines[i].x;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于dpdk的用户态协议栈</title>
    <link href="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    <url>/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="基于DPDK的用户态协议栈"><a href="#基于DPDK的用户态协议栈" class="headerlink" title="基于DPDK的用户态协议栈"></a>基于DPDK的用户态协议栈</h3><p><strong>安装好了DPDK后，尝试实现用户态协议栈，以下是demo代码</strong></p><p>查看是否使用硬件计算checksum</p><p><code>ethtool --show-offload [interface_name] | grep checksum</code></p><p>修改为不使用硬件计算checksum</p><p><code>ethtool --offload ens160 rx off tx off</code></p><p><strong>以下代码直接利用examples/skeleton下的Makefile文件进行编译</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* SPDX-License-Identifier: BSD-3-Clause</span><br><span class="hljs-comment"> * Copyright(c) 2010-2015 Intel Corporation</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rte_eal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rte_ethdev.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rte_mbuf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rte_lpm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rte_malloc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RX_RING_SIZE 1024</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TX_RING_SIZE 1024</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM_MBUFS 8191</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MBUF_CACHE_SIZE 250</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BURST_SIZE 128</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_RULES 8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUMBER_TBL8S 128</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_SEQ((1&lt;&lt;30) - 1)</span><br><br><span class="hljs-comment">// 假设已知网卡id是0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> g_PORT_ID 0</span><br><br><span class="hljs-comment">// 本地网卡MAC地址</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ether_addr</span> <span class="hljs-title">local_mac</span>;</span><br><br><span class="hljs-comment">// 发送包时的全局起始序号</span><br><span class="hljs-keyword">int</span> g_packet_id = <span class="hljs-number">42345</span>, g_tcp_seq = <span class="hljs-number">32345</span>;<br><br><span class="hljs-comment">// tcp控制块</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>;</span><br><br><span class="hljs-comment">// 全局tcp控制块链表头节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>* <span class="hljs-title">tcp_ctrl_head</span>;</span><br><br><span class="hljs-comment">// 接收队列缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_mbuf</span>* <span class="hljs-title">rx_mbufs</span>[<span class="hljs-title">BURST_SIZE</span>];</span> <span class="hljs-comment">// 包缓冲区，最大包数量为BURST_SIZE</span><br><span class="hljs-comment">// 发送队列缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_mbuf</span>* <span class="hljs-title">tx_mbufs</span>[<span class="hljs-title">BURST_SIZE</span>];</span> <span class="hljs-comment">// 包缓冲区，最大包数量为BURST_SIZE</span><br><br><span class="hljs-comment">// 全局路由表</span><br><span class="hljs-comment">// rte_lpm_create</span><br><br><span class="hljs-comment">// 计算一段数据的检验和</span><br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">get_CheckSum</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span>*, <span class="hljs-keyword">uint16_t</span>)</span></span>;<br><br><span class="hljs-comment">// 处理报文</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint16_t</span> <span class="hljs-title">ether_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">arp_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">ipv4_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tcp_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">udp_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">icmp_process</span><span class="hljs-params">(struct rte_mbuf* )</span></span>;<br><br><span class="hljs-comment">// 初始化对应网卡</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">port_init</span><span class="hljs-params">(<span class="hljs-keyword">u_int16_t</span>, struct rte_mempool*)</span></span>;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_mempool</span> *<span class="hljs-title">mbuf_pool</span>;</span><br><br><span class="hljs-comment">// 创建dpdk环境</span><br><span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">rte_eal_init</span>(argc, argv);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;环境抽象层初始化失败\n&quot;</span>);<br><br><span class="hljs-comment">// 创建内存池</span><br>mbuf_pool = <span class="hljs-built_in">rte_pktmbuf_pool_create</span>(<span class="hljs-string">&quot;MBUF_POOL&quot;</span>, NUM_MBUFS, MBUF_CACHE_SIZE, <span class="hljs-number">0</span>, RTE_MBUF_DEFAULT_BUF_SIZE, <span class="hljs-built_in">rte_socket_id</span>());<br><span class="hljs-comment">// name – 内存池名称</span><br><span class="hljs-comment">// n – 内存池中含有多少个缓冲区</span><br><span class="hljs-comment">// cache_size – 每个核的缓冲大小</span><br><span class="hljs-comment">// private_size – Size of application private are between the rte_mbuf structure and the data buffer. This value must be aligned to RTE_MBUF_PRIV_ALIGN.</span><br><span class="hljs-comment">// data_room_size – Size of data buffer in each mbuf, including RTE_PKTMBUF_HEADROOM.</span><br><span class="hljs-comment">// socket_id – 当前核所在插槽</span><br><span class="hljs-keyword">if</span> (mbuf_pool == <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;创建内存池失败\n&quot;</span>);<br><br><span class="hljs-comment">// 初始化网卡</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">port_init</span>(g_PORT_ID, mbuf_pool) != <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;Cannot init port %&quot;</span>PRIu16 <span class="hljs-string">&quot;\n&quot;</span>, g_PORT_ID);<br><br><span class="hljs-comment">// 输出本网卡MAC地址</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> != <span class="hljs-built_in">rte_eth_macaddr_get</span>(g_PORT_ID, &amp;local_mac)) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;获取mac地址失败\n&quot;</span>);<br><span class="hljs-keyword">char</span> addr[<span class="hljs-number">18</span>];<br><span class="hljs-built_in">rte_ether_format_addr</span>(addr, <span class="hljs-number">18</span>, &amp;local_mac);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;本网卡的MAC地址:%s\n&quot;</span>, addr);<br><br><br><span class="hljs-comment">// 处理数据</span><br><span class="hljs-comment">// dpdk处于网卡和内核之间</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">// 方式一：轮询</span><br><br><span class="hljs-comment">// 接收网卡数据</span><br>ret = <span class="hljs-built_in">rte_eth_rx_burst</span>(g_PORT_ID, <span class="hljs-number">0</span>, rx_mbufs, BURST_SIZE);<span class="hljs-comment">// dpdk接收网卡数据</span><br><span class="hljs-comment">// rte_kni_rx_burst();  // 内核接收网卡数据</span><br><span class="hljs-keyword">if</span>(ret &gt; BURST_SIZE) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;接收数量大于缓冲区数量\n&quot;</span>);  <span class="hljs-comment">// 不可能</span><br><br><span class="hljs-comment">// 遍历包</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ret; i ++)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n=========================================================================包分割线&quot;</span>);<br><span class="hljs-keyword">uint16_t</span> ether_type = <span class="hljs-built_in">ether_process</span>(rx_mbufs[i]);<br><br><span class="hljs-comment">// 判断是否是ARP协议</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">ntohs</span>(ether_type) == RTE_ETHER_TYPE_ARP)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;receive [ARP] packet&quot;</span>);<br><span class="hljs-built_in">arp_process</span>(rx_mbufs[i]);<br>&#125;<br><br><span class="hljs-comment">// 判断是否是IPv4协议</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ntohs</span>(ether_type) == RTE_ETHER_TYPE_IPV4)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;receive [IPv4] packet&quot;</span>);<br><span class="hljs-keyword">uint8_t</span> next_proto_id = <span class="hljs-built_in">ipv4_process</span>(rx_mbufs[i]);<br><br><span class="hljs-comment">// 如果是ICMP协议</span><br><span class="hljs-keyword">if</span>(next_proto_id == IPPROTO_ICMP)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;receive [ICMP] packet&quot;</span>);<br><span class="hljs-built_in">icmp_process</span>(rx_mbufs[i]);<br>&#125;<br><br><span class="hljs-comment">// 如果是UDP协议</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(next_proto_id == IPPROTO_UDP)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;receive [UDP] packet&quot;</span>);<br><span class="hljs-built_in">udp_process</span>(rx_mbufs[i]);<br>&#125;<br><br><span class="hljs-comment">// 如果是TCP协议</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(next_proto_id == IPPROTO_TCP)&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;receive [TCP] packet&quot;</span>);<br><span class="hljs-built_in">tcp_process</span>(rx_mbufs[i]);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 释放包缓冲</span><br><span class="hljs-built_in">rte_pktmbuf_free</span>(rx_mbufs[i]);<br>&#125;<br><br><span class="hljs-comment">// 发送</span><br><span class="hljs-comment">// rte_eth_tx_burst();// dpdk向网卡发送数据</span><br><span class="hljs-comment">// rte_kni_tx_burst();  // 内核向网卡发送数据</span><br><br><br><span class="hljs-comment">// 方式二：事件驱动</span><br>&#125;<br><br><span class="hljs-comment">// 销毁dpdk环境</span><br><span class="hljs-built_in">rte_eal_cleanup</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 计算一段数据的检验和(dpdk有这类API)</span><br><span class="hljs-comment">// rte_raw_cksum(void*, size_t)</span><br><span class="hljs-comment">// rte_ipv4_cksum(const struct rte_ipv4_hdr*)</span><br><span class="hljs-comment">// rte_ipv4_udptcp_cksum(const struct rte_ipv4_hdr*, const void*)</span><br><span class="hljs-function"><span class="hljs-keyword">uint16_t</span> <span class="hljs-title">get_CheckSum</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span>* from, <span class="hljs-keyword">uint16_t</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">uint32_t</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len &gt; <span class="hljs-number">1</span>)&#123;<br>        sum += <span class="hljs-built_in">htons</span>(*from);<br>        from ++;<br>        len -= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)&#123;<br>        sum += *(<span class="hljs-keyword">uint8_t</span>*)(from);<br>        len -= <span class="hljs-number">1</span>;<br>    &#125;<br>    sum = (sum &gt;&gt; <span class="hljs-number">16</span>) + (sum &amp; <span class="hljs-number">0xffff</span>);  <span class="hljs-comment">// 高16位加到低16位</span><br>    sum = (sum &gt;&gt; <span class="hljs-number">16</span>) + (sum &amp; <span class="hljs-number">0xffff</span>);  <span class="hljs-comment">// 如果有进位， 把进位加到低16位</span><br>    <span class="hljs-keyword">return</span> (~sum) &amp; <span class="hljs-number">0xffff</span>;              <span class="hljs-comment">// 返回低16位取反值</span><br>&#125;<br><br><br><br><span class="hljs-comment">// 网卡信息默认结构体</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_eth_conf</span> <span class="hljs-title">port_conf_default</span> =</span> &#123;<br>.rxmode = &#123;<br>.max_rx_pkt_len = RTE_ETHER_MAX_LEN,<br>&#125;,<br>&#125;;<br><br><br><span class="hljs-comment">// 初始化对应网卡</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">port_init</span><span class="hljs-params">(<span class="hljs-keyword">u_int16_t</span> port_id, struct rte_mempool* mbuf_pool)</span></span>&#123;<br><span class="hljs-keyword">int</span> ret;<br><br><span class="hljs-comment">// 当前网卡信息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_eth_conf</span> <span class="hljs-title">current_port_conf</span> =</span> port_conf_default;<br><br><span class="hljs-comment">// 配置网卡</span><br>ret = <span class="hljs-built_in">rte_eth_dev_configure</span>(port_id, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, &amp;current_port_conf);<br><span class="hljs-comment">// port_id – 网卡id</span><br><span class="hljs-comment">// nb_rx_queue – 网卡接收队列数量</span><br><span class="hljs-comment">// nb_tx_queue – 网卡发送队列数量</span><br><span class="hljs-comment">// eth_conf – 网卡信息</span><br><span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;配置网卡失败\n&quot;</span>);<br><br><span class="hljs-comment">// 启动接收队列</span><br>ret = <span class="hljs-built_in">rte_eth_rx_queue_setup</span>(port_id, <span class="hljs-number">0</span>, RX_RING_SIZE, <span class="hljs-built_in">rte_eth_dev_socket_id</span>(port_id), <span class="hljs-literal">NULL</span>, mbuf_pool);<br><span class="hljs-comment">// port_id – 网卡id</span><br><span class="hljs-comment">// rx_queue_id – 接收队列id</span><br><span class="hljs-comment">// nb_rx_desc – 环形缓冲区接收队列数量</span><br><span class="hljs-comment">// socket_id – 网卡插槽id</span><br><span class="hljs-comment">// rx_conf – 接收队列配置</span><br><span class="hljs-comment">// rte_mempool – 为接收队列分配空间的内存池</span><br><span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;启动接收队列失败\n&quot;</span>);<br><br><br>ret = <span class="hljs-built_in">rte_eth_tx_queue_setup</span>(port_id, <span class="hljs-number">0</span>, TX_RING_SIZE, <span class="hljs-built_in">rte_eth_dev_socket_id</span>(port_id), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;启动发送队列失败\n&quot;</span>);<br><br><span class="hljs-comment">// 启动网卡</span><br>ret = <span class="hljs-built_in">rte_eth_dev_start</span>(port_id);<br><span class="hljs-keyword">if</span>(ret != <span class="hljs-number">0</span>) <span class="hljs-built_in">rte_exit</span>(EXIT_FAILURE, <span class="hljs-string">&quot;启动网卡失败\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_ether_header</span><span class="hljs-params">(struct rte_ether_hdr* ethhdr)</span></span>&#123;<br><span class="hljs-keyword">char</span> smac[<span class="hljs-number">18</span>], dmac[<span class="hljs-number">18</span>];<br><span class="hljs-built_in">rte_ether_format_addr</span>(smac, <span class="hljs-number">18</span>, &amp;ethhdr-&gt;s_addr);<br><span class="hljs-built_in">rte_ether_format_addr</span>(dmac, <span class="hljs-number">18</span>, &amp;ethhdr-&gt;d_addr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目的MAC地址:%s\n&quot;</span>, dmac);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;源MAC地址:%s\n&quot;</span>, smac);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;帧类型:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(ethhdr-&gt;ether_type));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint16_t</span> <span class="hljs-title">ether_process</span><span class="hljs-params">(struct rte_mbuf* ethmbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成以太网头(14B)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ether_hdr</span>* <span class="hljs-title">ethhdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod</span>(ethmbuf, struct rte_ether_hdr*);<br><span class="hljs-comment">// 输出以太网头信息</span><br><span class="hljs-built_in">show_ether_header</span>(ethhdr);<br><br><span class="hljs-comment">// 反向回送</span><br>ethhdr-&gt;d_addr = ethhdr-&gt;s_addr;<br>ethhdr-&gt;s_addr = local_mac;<br><br><span class="hljs-keyword">return</span> ethhdr-&gt;ether_type;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_arp_header</span><span class="hljs-params">(struct rte_arp_hdr* arphdr)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;硬件类型:%#06x\t协议类型:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(arphdr-&gt;arp_hardware), <span class="hljs-built_in">ntohs</span>(arphdr-&gt;arp_protocol));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;硬件长度:%#04x\t协议长度:%#04x\t操作码:%#06x\n&quot;</span>, arphdr-&gt;arp_hlen, arphdr-&gt;arp_plen, <span class="hljs-built_in">ntohs</span>(arphdr-&gt;arp_opcode));<br>&#125;<br><br><span class="hljs-comment">// 处理arp报文</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">arp_process</span><span class="hljs-params">(struct rte_mbuf* arpmbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成ARP头(28B)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_arp_hdr</span>* <span class="hljs-title">arphdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod_offset</span>(arpmbuf, struct rte_arp_hdr*, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct rte_ether_hdr));<br><span class="hljs-comment">// 输出ARP头信息</span><br><span class="hljs-built_in">show_arp_header</span>(arphdr);<br><br><span class="hljs-comment">// 假设只有ipv4协议</span><br><span class="hljs-comment">// 转成arp_ipv4头</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_arp_ipv4</span>* <span class="hljs-title">ipv4_payload</span> =</span> (struct rte_arp_ipv4*) (&amp;arphdr-&gt;arp_data);<br><span class="hljs-comment">// 输出源地址信息和目的地址信息</span><br><span class="hljs-keyword">char</span> mac_addr[<span class="hljs-number">18</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">ip_addr</span>;</span><br><span class="hljs-built_in">rte_ether_format_addr</span>(mac_addr, <span class="hljs-number">18</span>, &amp;ipv4_payload-&gt;arp_sha);<br>ip_addr.s_addr = ipv4_payload-&gt;arp_sip;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;src:\tMAC:%s\tIP:%s\n&quot;</span>, mac_addr, <span class="hljs-built_in">inet_ntoa</span>(ip_addr));<br><span class="hljs-built_in">rte_ether_format_addr</span>(mac_addr, <span class="hljs-number">18</span>, &amp;ipv4_payload-&gt;arp_tha);<br>ip_addr.s_addr = ipv4_payload-&gt;arp_tip;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dst:\tMAC:%s\tIP:%s\n&quot;</span>, mac_addr, <span class="hljs-built_in">inet_ntoa</span>(ip_addr));<br><br><br><span class="hljs-comment">// 如果目的地址是本网卡地址则响应</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == <span class="hljs-built_in">rte_is_same_ether_addr</span>(&amp;ipv4_payload-&gt;arp_tha, &amp;local_mac))&#123;<br><span class="hljs-comment">// 交换mac地址</span><br>ipv4_payload-&gt;arp_tha = ipv4_payload-&gt;arp_sha;<br>ipv4_payload-&gt;arp_sha = local_mac;<br><br>ipv4_payload-&gt;arp_tip = ipv4_payload-&gt;arp_sip;<br>ipv4_payload-&gt;arp_sip = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.162.128&quot;</span>);<br><br>arphdr-&gt;arp_opcode = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0x0002</span>);<br><br><span class="hljs-comment">// 发送</span><br>tx_mbufs[<span class="hljs-number">0</span>] = arpmbuf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send %d【arp】packet\n&quot;</span>, <span class="hljs-built_in">rte_eth_tx_burst</span>(g_PORT_ID, <span class="hljs-number">0</span>, tx_mbufs, <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_ipv4_header</span><span class="hljs-params">(struct rte_ipv4_hdr* iphdr)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;版本号:%#03x\t首部长度:%#03x\t服务类型:%#04x\t总长度:%#06x\n&quot;</span>, iphdr-&gt;version_ihl&gt;&gt;<span class="hljs-number">4</span>, iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>, iphdr-&gt;type_of_service, <span class="hljs-built_in">ntohs</span>(iphdr-&gt;total_length));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;标识:%#06x\t标志位+片偏移:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(iphdr-&gt;packet_id), <span class="hljs-built_in">ntohs</span>(iphdr-&gt;fragment_offset));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TTL:%#04x\t协议:%#04x\t首部检验和:%#06x\n&quot;</span>, iphdr-&gt;time_to_live, iphdr-&gt;next_proto_id, <span class="hljs-built_in">ntohs</span>(iphdr-&gt;hdr_checksum));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">addr</span>;</span><br>addr.s_addr = iphdr-&gt;src_addr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;src_ip:%s\n&quot;</span>, <span class="hljs-built_in">inet_ntoa</span>(addr));<br>addr.s_addr = iphdr-&gt;dst_addr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dst_ip:%s\n&quot;</span>, <span class="hljs-built_in">inet_ntoa</span>(addr));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">ipv4_process</span><span class="hljs-params">(struct rte_mbuf* ipv4mbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成IPv4头(20B + Options + padding)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ipv4_hdr</span>* <span class="hljs-title">iphdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod_offset</span>(ipv4mbuf, struct rte_ipv4_hdr*, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct rte_ether_hdr));<br><span class="hljs-comment">// 输出IPv4头信息</span><br><span class="hljs-built_in">show_ipv4_header</span>(iphdr);<br><span class="hljs-keyword">return</span> iphdr-&gt;next_proto_id;<br>&#125;<br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_tcp_header</span><span class="hljs-params">(struct rte_tcp_hdr* tcphdr)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;源端口:%#06x\t目的端口:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;src_port), <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;dst_port));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Seq:%#010x\n&quot;</span>, <span class="hljs-built_in">ntohl</span>(tcphdr-&gt;sent_seq));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ack:%#010x\n&quot;</span>, <span class="hljs-built_in">ntohl</span>(tcphdr-&gt;recv_ack));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;首部长度:%#03x\t标志位:%#04x\t窗口:%#06x\n&quot;</span>, (tcphdr-&gt;data_off &gt;&gt; <span class="hljs-number">4</span>)*<span class="hljs-number">4</span>, tcphdr-&gt;tcp_flags, <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;rx_win));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;检验和:%#06x\t紧急指针:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;cksum), <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;tcp_urp));<br>&#125;<br><br><span class="hljs-comment">// 伪首部</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pseudo_header</span>&#123;</span><br><span class="hljs-keyword">uint32_t</span> sip;<br><span class="hljs-keyword">uint32_t</span> dip;<br><span class="hljs-keyword">uint8_t</span>padding;<br><span class="hljs-keyword">uint8_t</span>protocl;<br><span class="hljs-keyword">uint16_t</span>udptcplen;<br>&#125;;<br><br><span class="hljs-comment">// tcp状态</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">TCP_CONN_STATE</span>&#123;</span><br>CLOSED = <span class="hljs-number">0</span>,<br>LISTEN,<br>SYN_RECV,<br>SYN_SENT,<br>ESTABLISHED,<br><br>CLOSE_WAIT,<br>FIN_WAIT_1,<br>FIN_WAIT_2,<br>CLOSING,<br>TIME_WAIT,<br>&#125;;<br><br><span class="hljs-comment">// tcp控制块</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>&#123;</span><br><span class="hljs-comment">// tcp五元组</span><br><span class="hljs-keyword">uint32_t</span> sip;<br><span class="hljs-keyword">uint32_t</span> dip;<br><span class="hljs-keyword">uint16_t</span> sport;<br><span class="hljs-keyword">uint16_t</span> dport;<br><span class="hljs-keyword">uint16_t</span> protocol;<br><br><span class="hljs-comment">// 应用层文件描述符</span><br><span class="hljs-keyword">int</span> fd;<br><br><span class="hljs-comment">// tcp状态</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">TCP_CONN_STATE</span> <span class="hljs-title">state</span>;</span>  <br><br><span class="hljs-comment">// 缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ring</span>* <span class="hljs-title">sendbuf</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ring</span>* <span class="hljs-title">recvbuf</span>;</span><br><br><span class="hljs-comment">// 序号</span><br><span class="hljs-keyword">uint32_t</span> send_seq;<br><span class="hljs-keyword">uint32_t</span> recv_seq;<br><br><span class="hljs-comment">// demo用链表组织(改用平衡树)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>* <span class="hljs-title">prev</span>, *<span class="hljs-title">next</span>;</span><br>&#125;;<br><br><span class="hljs-comment">// 创建tcp控制块</span><br><span class="hljs-function">struct tcp_control* <span class="hljs-title">create_tcp_control</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> sip, <span class="hljs-keyword">uint32_t</span> dip, <span class="hljs-keyword">uint16_t</span> sport, <span class="hljs-keyword">uint16_t</span> dport, <span class="hljs-keyword">uint16_t</span> protocol)</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>* <span class="hljs-title">tcp_ctrl</span> =</span> <span class="hljs-built_in">rte_malloc</span>(<span class="hljs-string">&quot;struct tcp_control&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct tcp_control), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">memset</span>(tcp_ctrl, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct tcp_control));<br><br><span class="hljs-keyword">uint32_t</span> seed = <span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>);<br>tcp_ctrl-&gt;send_seq = <span class="hljs-built_in">rand_r</span>(&amp;seed) % MAX_SEQ;<br><br>tcp_ctrl-&gt;sip = sip;<br>tcp_ctrl-&gt;dip = dip;<br>tcp_ctrl-&gt;sport = sport;<br>tcp_ctrl-&gt;dport = dport;<br>tcp_ctrl-&gt;protocol = protocol;<br><br>tcp_ctrl-&gt;state = LISTEN;<br><br><span class="hljs-comment">// 假设创建socket时始终返回8888</span><br>tcp_ctrl-&gt;fd = <span class="hljs-number">8888</span>;<br><br>tcp_ctrl-&gt;recvbuf = <span class="hljs-built_in">rte_ring_create</span>(<span class="hljs-string">&quot;recvbuf&quot;</span>, <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">2</span>, <span class="hljs-built_in">rte_socket_id</span>(), RING_F_SP_ENQ | RING_F_SC_DEQ);<br>tcp_ctrl-&gt;sendbuf = <span class="hljs-built_in">rte_ring_create</span>(<span class="hljs-string">&quot;sendbuf&quot;</span>, <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">2</span>, <span class="hljs-built_in">rte_socket_id</span>(), RING_F_SP_ENQ | RING_F_SC_DEQ);<br><br><span class="hljs-keyword">return</span> tcp_ctrl;<br>&#125;<br><br><span class="hljs-comment">// 查找tcp控制块</span><br><span class="hljs-function">struct tcp_control* <span class="hljs-title">find_tcp_control</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> sip, <span class="hljs-keyword">uint32_t</span> dip, <span class="hljs-keyword">uint16_t</span> sport, <span class="hljs-keyword">uint16_t</span> dport, <span class="hljs-keyword">uint16_t</span> protocol)</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>* <span class="hljs-title">tcp_ctrl</span> =</span> tcp_ctrl_head;<br><span class="hljs-keyword">while</span>(tcp_ctrl != <span class="hljs-literal">NULL</span> &amp;&amp; (tcp_ctrl-&gt;sip != sip || tcp_ctrl-&gt;dip != dip || tcp_ctrl-&gt;sport != sport || tcp_ctrl-&gt;dport != dport || tcp_ctrl-&gt;protocol != protocol))&#123;<br>tcp_ctrl = tcp_ctrl-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> tcp_ctrl;<br>&#125;<br><br><span class="hljs-comment">// 处理tcp连接</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tcp_process</span><span class="hljs-params">(struct rte_mbuf* tcpmbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成IPv4头(20B + Options + padding)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ipv4_hdr</span>* <span class="hljs-title">iphdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod_offset</span>(tcpmbuf, struct rte_ipv4_hdr*, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct rte_ether_hdr));<br><span class="hljs-comment">// 转成TCP头(20B + Options)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_tcp_hdr</span>* <span class="hljs-title">tcphdr</span> =</span> (struct rte_tcp_hdr*) ((<span class="hljs-keyword">char</span>*)iphdr + (iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>)*<span class="hljs-number">4</span>);    <span class="hljs-comment">// 后移一个ip头长度</span><br><span class="hljs-comment">// 输出TCP头信息</span><br><span class="hljs-built_in">show_tcp_header</span>(tcphdr);<br><span class="hljs-comment">// 检查checksum</span><br><span class="hljs-keyword">uint16_t</span> cksum = <span class="hljs-built_in">ntohs</span>(tcphdr-&gt;cksum);<br>tcphdr-&gt;cksum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(cksum != <span class="hljs-built_in">ntohs</span>(<span class="hljs-built_in">rte_ipv4_udptcp_cksum</span>(iphdr, tcphdr))) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_control</span>* <span class="hljs-title">tcp_ctrl</span> =</span> <span class="hljs-built_in">find_tcp_control</span>(iphdr-&gt;src_addr, iphdr-&gt;dst_addr, tcphdr-&gt;src_port, tcphdr-&gt;dst_port, iphdr-&gt;next_proto_id);<br><br><br><span class="hljs-comment">// 直接回送</span><br>iphdr-&gt;dst_addr = iphdr-&gt;src_addr;<br>iphdr-&gt;src_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.162.128&quot;</span>);<br>iphdr-&gt;packet_id = <span class="hljs-built_in">htons</span>(g_packet_id ++);<br>iphdr-&gt;fragment_offset = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>iphdr-&gt;hdr_checksum = <span class="hljs-number">0</span>;<br>iphdr-&gt;hdr_checksum = <span class="hljs-built_in">rte_ipv4_cksum</span>(iphdr);<br><span class="hljs-comment">// iphdr-&gt;hdr_checksum = htons(get_CheckSum((uint16_t*)iphdr, (iphdr-&gt;version_ihl &amp; 0x0f)*4));</span><br><br>tcphdr-&gt;src_port ^= tcphdr-&gt;dst_port;<br>tcphdr-&gt;dst_port ^= tcphdr-&gt;src_port;<br>tcphdr-&gt;src_port ^= tcphdr-&gt;dst_port;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">ntohs</span>(tcphdr-&gt;src_port) == <span class="hljs-number">80</span>) tcphdr-&gt;src_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">12345</span>);<br><span class="hljs-keyword">if</span>(tcphdr-&gt;tcp_flags &amp; <span class="hljs-number">0x02</span>) tcphdr-&gt;tcp_flags = <span class="hljs-number">0x12</span>;  <span class="hljs-comment">// 握手</span><br>tcphdr-&gt;recv_ack = <span class="hljs-built_in">htonl</span>(<span class="hljs-built_in">ntohl</span>(tcphdr-&gt;sent_seq) + <span class="hljs-number">1</span>);<br>tcphdr-&gt;sent_seq = <span class="hljs-built_in">htonl</span>(g_tcp_seq ++);<br>tcphdr-&gt;cksum = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>tcphdr-&gt;cksum = <span class="hljs-built_in">rte_ipv4_udptcp_cksum</span>(iphdr, tcphdr);  <br><span class="hljs-comment">// 计算检验和(伪首部)</span><br><span class="hljs-comment">// int8_t tmp[1600];</span><br><span class="hljs-comment">// struct pseudo_header* psdhdr = (struct pseudo_header*) tmp;</span><br><span class="hljs-comment">// psdhdr-&gt;sip = iphdr-&gt;src_addr;</span><br><span class="hljs-comment">// psdhdr-&gt;dip = iphdr-&gt;dst_addr;</span><br><span class="hljs-comment">// psdhdr-&gt;padding = 0;</span><br><span class="hljs-comment">// psdhdr-&gt;protocl = iphdr-&gt;next_proto_id;</span><br><span class="hljs-comment">// psdhdr-&gt;udptcplen = htons(ntohs(iphdr-&gt;total_length) - (iphdr-&gt;version_ihl &amp; 0x0f)*4);</span><br><span class="hljs-comment">// memcpy(psdhdr+1, tcphdr, ntohs(psdhdr-&gt;udptcplen));</span><br><span class="hljs-comment">// tcphdr-&gt;cksum = htons(get_CheckSum((uint16_t*)tmp, sizeof(struct pseudo_header) + ntohs(psdhdr-&gt;udptcplen)));</span><br><br><br><span class="hljs-comment">// 发送</span><br>tx_mbufs[<span class="hljs-number">0</span>] = tcpmbuf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send %d【tcp】packet\n&quot;</span>, <span class="hljs-built_in">rte_eth_tx_burst</span>(g_PORT_ID, <span class="hljs-number">0</span>, tx_mbufs, <span class="hljs-number">1</span>));<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_udp_header</span><span class="hljs-params">(struct rte_udp_hdr* udphdr)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;源端口:%#06x\t目的端口:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(udphdr-&gt;src_port), <span class="hljs-built_in">ntohs</span>(udphdr-&gt;dst_port));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;长度:%#06x\t校验值:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(udphdr-&gt;dgram_len), <span class="hljs-built_in">ntohs</span>(udphdr-&gt;dgram_cksum));<br>&#125;<br><br><span class="hljs-comment">// 处理udp连接</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">udp_process</span><span class="hljs-params">(struct rte_mbuf* udpmbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成IPv4头(20B + Options + padding)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ipv4_hdr</span>* <span class="hljs-title">iphdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod_offset</span>(udpmbuf, struct rte_ipv4_hdr*, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct rte_ether_hdr));<br><span class="hljs-comment">// 转成UDP头(8B)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_udp_hdr</span>* <span class="hljs-title">udphdr</span> =</span> (struct rte_udp_hdr*) ((<span class="hljs-keyword">char</span>*)iphdr + (iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>)*<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 输出UDP头信息</span><br><span class="hljs-built_in">show_udp_header</span>(udphdr);<br><span class="hljs-comment">// 检查checksum</span><br><span class="hljs-keyword">uint16_t</span> cksum = <span class="hljs-built_in">ntohs</span>(udphdr-&gt;dgram_cksum);<br>udphdr-&gt;dgram_cksum= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(cksum != <span class="hljs-built_in">ntohs</span>(<span class="hljs-built_in">rte_ipv4_udptcp_cksum</span>(iphdr, udphdr))) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_icmp_header</span><span class="hljs-params">(struct rte_icmp_hdr* icmphdr)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;类型:%#04x\t代码:%#04x\t检验和:%06x\n&quot;</span>, icmphdr-&gt;icmp_type, icmphdr-&gt;icmp_code, <span class="hljs-built_in">ntohs</span>(icmphdr-&gt;icmp_cksum));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;标志符:%#06x\t序号:%#06x\n&quot;</span>, <span class="hljs-built_in">ntohs</span>(icmphdr-&gt;icmp_ident), <span class="hljs-built_in">ntohs</span>(icmphdr-&gt;icmp_seq_nb));<br>&#125;<br><br><span class="hljs-comment">// 处理icmp报文</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">icmp_process</span><span class="hljs-params">(struct rte_mbuf* icmpmbuf)</span></span>&#123;<br><span class="hljs-comment">// 转成IPv4头(20B + Options + padding)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_ipv4_hdr</span>* <span class="hljs-title">iphdr</span> =</span> <span class="hljs-built_in">rte_pktmbuf_mtod_offset</span>(icmpmbuf, struct rte_ipv4_hdr*, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct rte_ether_hdr));<br><span class="hljs-comment">// 转成ICMP头(8B + Options[时间])</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rte_icmp_hdr</span>* <span class="hljs-title">icmphdr</span> =</span> (struct rte_icmp_hdr*) ((<span class="hljs-keyword">char</span>*)iphdr + (iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>)*<span class="hljs-number">4</span>);  <br><span class="hljs-comment">// 输出ICMP头信息</span><br><span class="hljs-built_in">show_icmp_header</span>(icmphdr);<br><span class="hljs-comment">// 检查checksum</span><br><span class="hljs-keyword">uint16_t</span> cksum = <span class="hljs-built_in">ntohs</span>(icmphdr-&gt;icmp_cksum);<br>icmphdr-&gt;icmp_cksum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(cksum != <span class="hljs-built_in">get_CheckSum</span>((<span class="hljs-keyword">uint16_t</span>*)icmphdr, <span class="hljs-built_in">ntohs</span>(iphdr-&gt;total_length) - (iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>)*<span class="hljs-number">4</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br><br><span class="hljs-comment">// icmp请求</span><br><span class="hljs-keyword">if</span>(icmphdr-&gt;icmp_type == RTE_IP_ICMP_ECHO_REQUEST)&#123;<br><span class="hljs-comment">// 发送icmp应答</span><br><span class="hljs-comment">// 不改变id和seq</span><br>icmphdr-&gt;icmp_type = RTE_IP_ICMP_ECHO_REPLY;<br>icmphdr-&gt;icmp_cksum = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>icmphdr-&gt;icmp_cksum = <span class="hljs-built_in">htons</span>(<span class="hljs-built_in">get_CheckSum</span>((<span class="hljs-keyword">uint16_t</span>*)icmphdr, <span class="hljs-built_in">ntohs</span>(iphdr-&gt;total_length) - (iphdr-&gt;version_ihl &amp; <span class="hljs-number">0x0f</span>)*<span class="hljs-number">4</span>));<br><br>iphdr-&gt;dst_addr = iphdr-&gt;src_addr;<br>iphdr-&gt;src_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.162.128&quot;</span>);<br>iphdr-&gt;time_to_live = <span class="hljs-number">128</span>;<br>iphdr-&gt;fragment_offset = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>iphdr-&gt;packet_id = <span class="hljs-built_in">htons</span>(g_packet_id ++);<br>iphdr-&gt;hdr_checksum = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>iphdr-&gt;hdr_checksum = <span class="hljs-built_in">rte_ipv4_cksum</span>(iphdr); <br><span class="hljs-comment">// iphdr-&gt;hdr_checksum = htons(get_CheckSum((uint16_t*)iphdr, (iphdr-&gt;version_ihl &amp; 0x0f)*4));</span><br><br><span class="hljs-comment">// 发送</span><br>tx_mbufs[<span class="hljs-number">0</span>] = icmpmbuf;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send %d【icmp】packet\n&quot;</span>, <span class="hljs-built_in">rte_eth_tx_burst</span>(g_PORT_ID, <span class="hljs-number">0</span>, tx_mbufs, <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-comment">// icmp应答</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(icmphdr-&gt;icmp_type == RTE_IP_ICMP_ECHO_REPLY)&#123;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>写项目论文去了、暂停学习</strong></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211123142228317.png" alt="image-20211123142228317"></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211123142332536.png" alt="image-20211123142332536"></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211123142352779.png" alt="image-20211123142352779"></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211123142931470.png" alt="image-20211123142931470"></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211123143042644.png" alt="image-20211123143042644"></p><h4 id="开源框架测试"><a href="#开源框架测试" class="headerlink" title="开源框架测试"></a>开源框架测试</h4><h5 id="F-Stack"><a href="#F-Stack" class="headerlink" title="F-Stack"></a>F-Stack</h5><p>测试如下：【f-stack运行在ip为192.168.162.128的机器上，监听80端口，局域网中另一台机器采用标准内核套接字编程，与192.168.162.128:80建立tcp通信，循环发送”gys gys gys”】</p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211207123734263.png" alt="image-20211207123734263"></p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211207123912131.png" alt="image-20211207123912131"></p><p>使用webbench测试并对比</p><p><img src="/2021/11/07/%E5%9F%BA%E4%BA%8Edpdk%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20211207125347187.png" alt="image-20211207125347187"></p><p><strong>BSD套接字、epoll编程</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-12-07 12:57:36</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-12-07 12:57:36</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ff_config.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ff_api.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ff_epoll.h&quot;</span></span><br><br><span class="hljs-keyword">int</span> listenfd, epfd;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LISTEN_QUEUE        10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PORT                80</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IP                  <span class="hljs-meta-string">&quot;192.168.162.128&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_EVENTS 1024</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">events</span>[<span class="hljs-title">MAX_EVENTS</span>];</span><br><span class="hljs-keyword">socklen_t</span>           len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct sockaddr);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> data[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;OK&quot;</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">12</span>];<br><br><span class="hljs-comment">// 内核write、read将不再使用，该文件fd对内核来说是未知的</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">loop</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">ff_epoll_wait</span>(epfd, events, MAX_EVENTS, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>        <span class="hljs-keyword">int</span> fd = events[i].data.fd;<br>        <span class="hljs-keyword">if</span>(fd == listenfd)&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// listenfd触发</span><br>                <span class="hljs-keyword">int</span> conn_fd = <span class="hljs-built_in">ff_accept</span>(fd, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>                <span class="hljs-keyword">if</span>(conn_fd &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>                ev.data.fd = conn_fd;<br>                ev.events |= EPOLLIN;<br>                <span class="hljs-built_in">ff_epoll_ctl</span>(epfd, EPOLL_CTL_ADD, conn_fd, &amp;ev);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 其他fd触发</span><br>            <span class="hljs-comment">// 可读</span><br>            <span class="hljs-keyword">if</span>(events[i].events &amp; EPOLLIN)&#123;<br>                <span class="hljs-built_in">ff_write</span>(fd, data, <span class="hljs-number">12</span>);<br>            &#125;<br>            <span class="hljs-comment">// 可写</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(events[i].events &amp; EPOLLOUT)&#123;<br>            &#125;<br>            <span class="hljs-comment">// 错误</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(events[i].events &amp; EPOLLERR)&#123;<br>                <span class="hljs-built_in">ff_epoll_ctl</span>(epfd, EPOLL_CTL_DEL, fd, <span class="hljs-literal">nullptr</span>);<br>                <span class="hljs-built_in">ff_close</span>(fd);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-built_in">ff_init</span>(argc, argv);<br><br>    listenfd = <span class="hljs-built_in">ff_socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == listenfd)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ff_socket error&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">goto</span> FAIL;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    <span class="hljs-built_in">memset</span>(&amp;addr, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(PORT);<br>    addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(IP);<br><br>    ret = <span class="hljs-built_in">ff_bind</span>(listenfd, (struct linux_sockaddr*)&amp;addr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ff_bind error&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">goto</span> FAIL;<br>    &#125;<br><br>    ret = <span class="hljs-built_in">ff_listen</span>(listenfd, LISTEN_QUEUE);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> == ret)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ff_listen error&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">goto</span> FAIL;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;listening....&quot;</span>);<br><br>    epfd = <span class="hljs-built_in">ff_epoll_create</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(epfd &lt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ff_epoll_create failed&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">goto</span> FAIL;<br>    &#125;<br><br>    ev.data.fd = listenfd;<br>    ev.events |= EPOLLIN;<br>    <span class="hljs-built_in">ff_epoll_ctl</span>(epfd, EPOLL_CTL_ADD, listenfd, &amp;ev);<br><br>    <span class="hljs-built_in">ff_run</span>(loop, <span class="hljs-literal">nullptr</span>);<br><br>FAIL:<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">-1</span> != listenfd) <span class="hljs-built_in">ff_close</span>(listenfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DPDK</title>
    <link href="/2021/11/02/DPDK/"/>
    <url>/2021/11/02/DPDK/</url>
    
    <content type="html"><![CDATA[<h2 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h2><p>在没有深入了解之前，我曾认为像简单的mmap即可完成内存映射文件，从而直接获取网卡数据，也避免了数据拷贝到用户态这一中间过程，然而实际上我们并不能像open一个文件那样直接open一个网卡设备，于是我查了一些资料接触到了用户态协议栈、dpdk、netmap等等，之后的学习让我收获了很多。</p><p><a href="https://core.dpdk.org/supported/">DPDK硬件支持</a></p><h4 id="Linux没有网卡设备文件"><a href="#Linux没有网卡设备文件" class="headerlink" title="Linux没有网卡设备文件"></a>Linux没有网卡设备文件</h4><p>在 unix中，一切io相关的实体都被抽象成了文件，之所以抽象成文件第一是为了接口统一，第二是为了操作统一，第三是为了策略隐藏，比如这样可以向用户屏蔽掉具体设备的细节或者具体文件系统的细节，文件抽象有块抽象和字符抽象，对于块文件，你只需要知道它可以随机读写就可以完成大部分的工作而不用关注底层 具体的文件系统，比如ext3，ntfs，jfs之类，对于字符设备文件，你只需要知道他们是串行读写就可以了，而不必关心鼠标的电路安排，打印机的内部机制等等。</p><p>但是对于网卡，我们看看它是字符设备还是块设备。如果它是块设备，那么它能随机读写吗？看看网卡的特性，它的另一端是另一个世界，它更像是一个管道，因为对一个管道进行随机读写是没有意义的。那么它是一个字符设备吗？要知道网络协议多种多样，计算机仅仅负责按照协议加工数据而不对协议本身做任何限制，因此如果将网卡作为字符设备，那么为了支持众多协议以及为了在传输之前绑定一个协议，就必须频繁调用ioctl之类的系统调用，这样用户就必须知道网卡这个设备的更多的细节，否则用户怎么去ioctl这块网卡。这显然违背了unix文件抽象的初衷。另外怎么去同步这个设备，比如多个进程同时需要打开这个设备传输网络数据，怎么能保证它们可以用最高的效率复用这个网卡，这个同步工作应该由谁来做，系统还是用户，如果由系统来做， 传统的文件同步接口将在网卡设备文件失效，如果由用户来完成，那么用户必须对网卡像驱动工程师一样熟悉，一个用户弄坏网卡的一个寄存器就会导致整个网卡down掉。最后，如何支持网络协议，难道让用户自己进行协议封装然后write到网卡吗？协议栈在这种情况下必须在用户空间实现，如此一来，效率、健壮性、安全性呢？协议栈显然受不到操作系统的内核空间特权级别的保护待遇，这违背了安全原则。综上，网卡不能被抽象成设备文件，因为将之抽象之后得不 到任何好处。</p><p>bsd套接字解决了网卡设备的文件抽象问题，为了使用文件接口，bsd套接字仍然使用文件接口，下层直接和内核空间的协议栈接口，所有的同步以及协议规程都在协议栈完成，设备复用由协议栈和设备驱动共同完成，这个bsd套接字抽象简直就是一件艺术品，人们又回到了一切皆文件的美丽又和谐的世界，bsd套接字通过一个新的系统调用socket来代替open从而可以实现诸如协议绑定之类的和open语义不相关的操作，另外connect 和accept也实现了自己的语义。当初为何不将网络设备作为文件抽象呢？实际上有一个本质的原因，那就是unix根本就不把网络通信作为IO，而是作为IPC（Inter-Process Communication，进程间通信），实际上unix从一开始就将网络当成了计算机，否则它也不会将网络通信作为IPC，进程间通信可以在同一台机器，也可以在不同的机器，实际上机器并不是界限。unix将网络通信当成了像共享内存，信号量之类的IPC机制了，只不过后者是同一台机器内部的机制，不需要硬件，而网络通过需要硬件实现， 硬件就是网卡之类的设备，unix仅仅将网络设备作为了实现IPC的手段罢了。</p><h4 id="南北桥芯片"><a href="#南北桥芯片" class="headerlink" title="南北桥芯片"></a>南北桥芯片</h4><p><strong>北桥芯片主要负责处理cpu和内存之间的通信</strong>，通常包括处理cpu与内存、显卡、PCIE端口(只能插显卡)之间的通信，还有与南桥的通信。</p><p><strong>南桥芯片主要负责I/O总线之间的通信</strong>(就是负责输入和输出设备), 如主板上的各种接口（如串口、 USB ）、 PCI 总线（声卡等）、 IDE （接硬盘、光驱）、以及主板上的其他芯片（如集成声卡、集成 RAID 卡、集成网卡等），都归南桥芯片控制。南桥芯片通常裸露在 PCI 插槽旁边，块头比较大。</p><p>目前大部分主板都把南北桥集成到北桥去了，或者干脆全部集成到cpu去了。</p><h4 id="UMA架构和NUMA架构"><a href="#UMA架构和NUMA架构" class="headerlink" title="UMA架构和NUMA架构"></a>UMA架构和NUMA架构</h4><p>早期的计算机，内存控制器还没有整合进 CPU，所有的内存访问都需要经过北桥芯片来完成。CPU 通过前端总线（FSB，Front Side Bus）连接到北桥芯片，然后北桥芯片连接到内存【早期内存控制器集成在北桥芯片里面】。这种架构被称为 UMA(Uniform Memory Access, 一致性内存访问 ): 同一根总线的模型保证了 CPU 的所有内存访问都是一致的，不必考虑不同内存地址之间的差异。</p><p><img src="/2021/11/02/DPDK/image-20211103144603353.png" alt="image-20211103144603353"></p><p>在 UMA 架构下，CPU 和内存之间的通信全部都要通过前端总线。而提高性能的方式，就是不断地提高 CPU、前端总线和内存的工作频率。</p><p>终于，工作频率被我们提升到了瓶颈，我们无法不断提高硬件的工作频率以提升性能。这时候，CPU 性能的提升开始<strong>从提高主频转向增加数量</strong>（多核、多 CPU）。越来越多的 CPU 对前端总线的争用，使前端总线成为了瓶颈。为了消除 UMA 架构的瓶颈，NUMA(Non-Uniform Memory Access, 非一致性内存访问)架构诞生了。</p><p><img src="/2021/11/02/DPDK/image-20211103144543913.png" alt="image-20211103144543913"></p><p>CPU 厂商把内存控制器集成到 CPU 内部，一般一个 CPU socket【主板上的一个CPU插槽，一般普通主板只有一个CPU槽，而服务器主板会有多个CPU槽】 会有一个独立的内存控制器。每个 CPU scoket 独立连接到一部分内存，<strong>与这部分 CPU 直连的内存称为“该CPU的本地内存”</strong>。CPU 之间通过 QPI（Quick Path Interconnect） 总线进行连接。CPU 可以通过 QPI 总线访问没有和自己直连的“远程内存”。</p><p>和 UMA 架构不同，在 NUMA 架构下，内存的访问出现了本地和远程的区别：<strong>访问远程内存的延时会明显高于访问本地内存</strong><code>numactl --hardware</code>可查看distance(distance越小优先级越高)。</p><p><img src="/2021/11/02/DPDK/image-20211104204523976.png" alt="image-20211104204523976"></p><h4 id="NUMA中的node、socket、core、thread"><a href="#NUMA中的node、socket、core、thread" class="headerlink" title="NUMA中的node、socket、core、thread"></a>NUMA中的node、socket、core、thread</h4><p><code>lscpu</code>，<code>numactl -a</code>, <code>numactl --hardware</code>命令查看cpu相关参数</p><p>socket是主板上的<strong>CPU插槽</strong>。</p><p>Core是socket里独立的一组<strong>程序执行的物理硬件单元(物理核)</strong>(比如寄存器，计算单元等)。 </p><p>Thread是<strong>程序执行的逻辑硬件单元(逻辑核)<strong>。引入</strong>超线程</strong>HyperThread的概念后，一个Core可以开启HT相当于多个逻辑Core也就是所谓的Thread，但对于OS来说，OS并不知道这个Core是虚拟的。Thread具有独立的执行上下文，但是共享Core内的物理硬件单元。</p><p>node则是一个<strong>逻辑上的socket</strong>。可以将多个socket划分为一个node，则可以方便的增加cpu。</p><h4 id="什么是DPDK"><a href="#什么是DPDK" class="headerlink" title="什么是DPDK"></a>什么是DPDK</h4><p><strong>DPDK是INTEL公司开发的一款高性能的网络驱动组件</strong>，旨在为数据面应用程序提供一个简单方便的，完整的，快速的数据包处理解决方案，主要技术有用户态、轮询取代中断、零拷贝、网卡RSS、访存DirectIO等。</p><p><strong>注意：</strong>在VMware中，可直接修改<code>.vmx</code>文件来配置网卡类型【需要在虚拟机关机的情况下修改】: <code>ethernet0.virtualDev = &quot;vmxnet3&quot;</code>比如将第0张网卡类型设置为支持多队列网卡的vmxnet3。(原始应该是e1000)。</p><p>可通过命令<code>ethtool -i [interface_name]</code>查看网卡驱动，<code>ethtool -S [interface_name]</code>查看网卡的收发队列。</p><p><img src="/2021/11/02/DPDK/image-20211105110323511.png" alt="image-20211105110323511"></p><h4 id="什么是UIO技术"><a href="#什么是UIO技术" class="headerlink" title="什么是UIO技术"></a>什么是UIO技术</h4><p>设备驱动程序的上面是system call API，驱动的下面是硬件，驱动本身的实现也是基于分离、分层的思想。同设备分类一样，驱动也分3类：字符设备驱动、块设备驱动、网络设备驱动。<code>linux环境高级编程课程中,作业1是安装insmod一个加法器的模块，用户态调用read时，根据read参数来输出答案(printk、dmesg)</code></p><p>UIO（Userspace I/O）是运行在用户空间的I/O技术，Linux系统中一般的驱动都是运行在内核空间，而在用户空间用应用程序调用即可，而UIO则是将驱动的很少一部分运行在内核空间，而在用户空间实现驱动的绝大多数功能！使用UIO可以避免设备的驱动程序需要随着内核的更新而更新的问题。</p><p>在基于kernel的IO模型中，所有的设备IO都要经过内核处理，在高并发的网络数据包收发的情况下，大量硬件中断会降低内核数据包处理能力，内核和用户空间的数据拷贝也会造成大量的计算资源浪费。所以，作为高并发大流量网络开发框架的DPDK，必须要找到一个能够避免内核中断爆炸和大量数据拷贝的方法，在用户空间能够直接和硬件进行交互。</p><p>Linux的UIO就是这样一个将硬件操作映射到用户空间的kernel bypass方案。</p><h3 id="下载安装DPDK"><a href="#下载安装DPDK" class="headerlink" title="下载安装DPDK"></a>下载安装DPDK</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p><code>apt intall libpcap-dev libnuma-dev numactl</code></p><p><a href="http://core.dpdk.org/download/">源码下载地址</a></p><p>安装方式</p><p>1、使用meson构建 + ninja编译源代码。【值得学习，对用户来说比cmake + make更友好】</p><p>2、使用dpdk的自动安装脚本【<strong>推荐</strong>。下面也是使用dpdk的安装脚本的步骤】</p><p><a href="https://www.cnblogs.com/wt11/p/15417103.html">参考</a></p><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>一般我将其放在dpdk目录下，命名为dpdk.env。RTE_TARGET表示将编译好的结果放在该目录下，包括了所有的库和头文件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">RTE_SDK</span>=/home/gys/Downloads/dpdk-stable-19.11.10<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">RTE_TARGET</span>=x86_64-native-linuxapp-gcc<br></code></pre></td></tr></table></figure><p>环境变量生效<code>. dpdk.env</code></p><h4 id="执行自动安装脚本"><a href="#执行自动安装脚本" class="headerlink" title="执行自动安装脚本"></a>执行自动安装脚本</h4><p>执行之前可以修改编译时的线程数量在dpdk-setup.sh中的make install之后增加-j参数<code>make install -j 4 T=$&#123;RTE_TARGET&#125;</code></p><p><code>./usertools/dpdk-setup.sh</code></p><p><img src="/2021/11/02/DPDK/image-20211104193642026.png" alt="image-20211104193642026"></p><p><img src="/2021/11/02/DPDK/image-20211104193734614.png" alt="image-20211104193734614"></p><p>1、选择41，适合x86_64机器的gcc编译器，如果是其他架构(lscpu)的机器，需要选择对应的其他编译器。</p><p><img src="/2021/11/02/DPDK/image-20211104194355325.png" alt="image-20211104194355325"></p><p>2、选择48，加载igb_uio模块</p><p><img src="/2021/11/02/DPDK/image-20211104194726227.png" alt="image-20211104194726227"></p><p>3、选择52，配置巨页(2M页，linux默认4k页)。这里配置了512个2M页。<br><img src="/2021/11/02/DPDK/image-20211104194939456.png" alt="image-20211104194939456"></p><p>4、选择53，查看所有网卡。注意<code>Active</code>表示当前网卡处于<code>up</code>状态。</p><p><img src="/2021/11/02/DPDK/image-20211104195038349.png" alt="image-20211104195038349"></p><p>5、选择54，绑定网卡。只能绑定<code>down</code>下来的网卡，<code>PCI address</code>就是网卡前面那串数字。(解绑时选择60，也是输出<code>PCI address</code>，还要重启虚拟机，不然<code>ifconfig [interface_name] up</code>会显示找不到设备)</p><p><img src="/2021/11/02/DPDK/image-20211104195400926.png" alt="image-20211104195400926"></p><p>6、选择53，查看网卡绑定情况。可以看到<code>0000:03:00.0</code>设备是使用的<code>DPDK-compatible driver</code>。</p><p><img src="/2021/11/02/DPDK/image-20211104195553744.png" alt="image-20211104195553744"></p><p>7、选择57，进行简单测试。这里我的虚拟机是2核的，故掩码为<code>0x03</code>。</p><p><img src="/2021/11/02/DPDK/image-20211104200039903.png" alt="image-20211104200039903"></p><p>如果出现上图中类似的输出则表示dpdk安装成功了。若出现下面的语句，则表示dpdk不支持该网卡，需要修改一行代码，跳过dpdk pci 检查。</p><p><code>EAL: Error reading from file descriptor 20: Input/output error</code></p><ul><li>将文件<code>dpdk-stable-19.11.10/kernel/linux/igb_uio/igb_uio.c</code>中该行</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (pci<span class="hljs-constructor">_intx_mask_supported(<span class="hljs-params">udev</span>-&gt;<span class="hljs-params">pdev</span>)</span>)<br></code></pre></td></tr></table></figure><ul><li>修改为</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (pci<span class="hljs-constructor">_intx_mask_supported(<span class="hljs-params">udev</span>-&gt;<span class="hljs-params">pdev</span>)</span><span class="hljs-operator"> || </span><span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><ul><li>重新运行上述流程即可</li></ul><p>8、选择58，进行交互模式下的port之间转发数据包等集成测试。</p><p><img src="/2021/11/02/DPDK/image-20211105141923639.png" alt="image-20211105141923639"></p><p>若出现错误<code>Cause: Creation of mbuf pool for socket 0 failed: Cannot allocate memory</code>则表示巨页分配太少，重新分配巨页即可。</p><p>警告是因为前面只绑定了一个网卡。类似地，绑定第二张网卡，然后选择58。</p><p><img src="/2021/11/02/DPDK/image-20211105143122799.png" alt="image-20211105143122799"></p><p>输入<code>help</code>可获取交互模式帮助信息。</p><p><img src="/2021/11/02/DPDK/image-20211105143230645.png" alt="image-20211105143230645"></p><p>输入<code>start</code>命令后几秒钟再输入<code>stop</code>命令。</p><p><img src="/2021/11/02/DPDK/image-20211105143303844.png" alt="image-20211105143303844"></p><h4 id="测试examples"><a href="#测试examples" class="headerlink" title="测试examples"></a>测试examples</h4><p>1、测试 <code>./examples/helloworld</code></p><p><img src="/2021/11/02/DPDK/image-20211104200531284.png" alt="image-20211104200531284"></p><p>2、测试<code>./examples/l2fwd</code></p><p><code>./build/l2fwd -c 0x3 -n 4 -- -p 1 -q 2</code>参数分两部分：EAL(Environment Abstract Layer)运行环境参数和程序本身的参数，中间以<code>-–</code>隔开。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c：指定分配给DPDK使用的逻辑核(线程)数, (coremask, 3表示2个核)</span><br><span class="hljs-deletion">-n：每个核的内存通道数</span><br><span class="hljs-deletion">--：分隔</span><br><span class="hljs-deletion">-p：使用的port数(一个port就是一块dpdk网卡)</span><br><span class="hljs-deletion">-q：每个核管理的队列数</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/02/DPDK/image-20211104203722965.png" alt="image-20211104203722965"></p><p><img src="/2021/11/02/DPDK/image-20211104203753942.png" alt="image-20211104203753942"></p><p><img src="/2021/11/02/DPDK/image-20211104203932136.png" alt="image-20211104203932136"></p><p>3、测试<code>./examples/l3fwd</code></p><p><code>./build/l3fwd -l 0,1 -n 4 --  -p 0x1 --config=&#39;(0,0,0),(0,1,1)&#39; --parse-ptype</code>即以0，1两个核，每个核具有4个内存通道的环境下运行该程序，该程序使用了一块网卡，其中0号网卡的0号队列由0号核处理，0号网卡的1号队列由1号核处理。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l：指定分配给DPDK使用的逻辑核(线程)列表(corelist。以逗号分开)</span><br><span class="hljs-deletion">-n：每个核的内存通道数</span><br><span class="hljs-deletion">--：分隔</span><br><span class="hljs-deletion">-p：使用的port数(一个port就是一块dpdk网卡)</span><br><span class="hljs-deletion">-q：每个核管理的队列数</span><br><span class="hljs-deletion">--config：字符串，配置三元组(port，queue，lcore)指定核(线程)处理对应的端口的队列(逗号分开)</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/02/DPDK/image-20211105100036850.png" alt="image-20211105100036850"></p><p><strong>可能出现错误:</strong> <code>Ethdev port_id=0 requested Rx offloads 0xe doesn&#39;t match Rx offloads capabilities 0x82a1d in rte_eth_dev_configure()</code>。</p><p>因为<code>virtio驱动(vmxnet3)不支持DEV_RX_OFFLOAD_CHECKSUM，在l3fwd源码中禁用DEV_RX_OFFLOAD_CHECKSUM即可, 即注释掉DEV_RX_OFFLOAD_CHECKSUM相关行</code>，然后重新编译。</p><p><strong>可能出现错误：</strong><code>port 0 cannot parse RTE_PTYPE_L3_IPV6</code>。</p><p>virtio或其他设备不能运行l3fwd，因为这些设备可能部支持<code>hw_ip_checksum</code>(硬件ip检测)。要在执行命令后增加<code>--parse-ptype</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iptables命令简单使用</title>
    <link href="/2021/10/28/iptables%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/10/28/iptables%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p> iptables是Linux系统下应用层内置<strong>控制防火墙的工具</strong>，是<strong>内核空间</strong>的功能模块，用于监控进/出服务器流量。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">补充：NAT和NAPT<br>由于NAT实现是私有<span class="hljs-built_in">IP</span>和NAT的公共<span class="hljs-built_in">IP</span>之间的转换，那么，私有网中同时与公共网进行通信的主机数量就受到NAT的公共<span class="hljs-built_in">IP</span>地址数量的限制。为了克服这种限制，NAT被进一步扩展到在进行<span class="hljs-built_in">IP</span>地址转换的同时进行Port的转换，这就是网络地址端口转换NAPT（Network Address Port Translation）技术。<br></code></pre></td></tr></table></figure><h3 id="iptables中的“四表五链”"><a href="#iptables中的“四表五链”" class="headerlink" title="iptables中的“四表五链”"></a>iptables中的“四表五链”</h3><p>下面是一个包从网络接口层输入后经过主机的各个阶段的流程图</p><p><img src="/2021/10/28/iptables%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20211028104041611.png" alt="image-20211028104041611"></p><p>更详细地</p><p><img src="/2021/10/28/iptables%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20190816163744122.png" alt="img"></p><h4 id="四表"><a href="#四表" class="headerlink" title="四表"></a>四表</h4><p>四个表按优先级从高到低依次为<code>raw ==&gt; mangle ==&gt; nat ==&gt; filter</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">filter: 控制数据包是否【允许进出及转发】,可以控制的链路有<span class="hljs-built_in">input</span>、forward、<span class="hljs-built_in">output</span><br><br>nat: 控制数据包中【地址转换】,可以控制的链路有prerouting、<span class="hljs-built_in">input</span>、<span class="hljs-built_in">output</span>、postrouting<br><br>mangle: 修改数据包中的【原数据】,可以控制的链路有prerouting、<span class="hljs-built_in">input</span>、forward、<span class="hljs-built_in">output</span>、postrouting<br><br>raw: 控制nat表中连接追踪机制的启用状况,可以控制的链路有prerouting、<span class="hljs-built_in">output</span><br></code></pre></td></tr></table></figure><h4 id="五链"><a href="#五链" class="headerlink" title="五链"></a>五链</h4><p><code>PREROUTING链、INPUT链、OUTPUT链、FORWARD链、POSTROUTING链</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>、<span class="hljs-selector-tag">PREROUTING</span> (对数据包作路由选择前应用此链中的规则)<br><span class="hljs-selector-tag">2</span>、<span class="hljs-selector-tag">INPUT</span> (内核空间进入到用户空间的数据包应用此规则链中的规则)<br><span class="hljs-selector-tag">3</span>、<span class="hljs-selector-tag">FORWARD</span> (转发数据包时应用此规则链中的规则，要开启Linux内核中的ip_forward，默认关闭)<br><span class="hljs-selector-tag">4</span>、<span class="hljs-selector-tag">OUTPUT</span>(用户空间发出到内核空间的数据包应用此规则链中的规则)<br><span class="hljs-selector-tag">5</span>、<span class="hljs-selector-tag">POSTROUTING</span>（对数据包作路由选择后应用此链中的规则）<br></code></pre></td></tr></table></figure><p>由图可知，当IP数据包经过PREROUTING链后，如果该包的目的地址是本机，那么接下来通过的链依次为INPUT链、OUTPUT链、POSTROUTING链。当IP数据包经过PREROUTING链后，如果该包的目的地址不是本机，那么就意味着需要转发出去(开启ip_forward功能)，接下来通过的链依次为FORWARD链、POSTROUTING链。<strong>iptables是按照链顺序来执行的</strong>，也就是说执行到某条链时再根据表的优先级执行(如当前执行PREROUTING链，则一旦流过某个表的PREROUTING链，则在该表之后含有PREROUTING链的表都不再次流过PREROUTING链)</p><p><strong>规则对应的策略/target</strong></p><p><code>ACCEPT</code> 允许数据包通过</p><p><code>DROP</code> 直接丢弃数据包</p><p><code>REJECT</code> 拒绝数据包通过，给数据发送端回送一个拒绝响应的信息。</p><p><code>LOG</code>在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则</p><p><code>RETURN</code>在调用链中继续处理下一条规则</p><p><code>SNAT</code>源地址转换</p><p><code>DNAT</code>目的地址转换</p><p><code>MASQUERADE</code>动态伪装</p><p><code>[chain_name]</code>跳转到自定义链</p><h3 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">iptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 规则对应的策略/target]<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">iptables 常用的【管理选项】<br><span class="hljs-deletion">-A:在指定链的末尾添加一条新的规则</span><br><span class="hljs-deletion">-D:删除指定链中的某一条规则，可删除指定序号或具体内容</span><br><span class="hljs-deletion">-I:在指定链中插入一条新规则，未指定序号时默认作为第一条规则</span><br><span class="hljs-deletion">-R:修改、替换指定链中的某一条规则，可指定规则序号或具体内容</span><br><span class="hljs-deletion">-L:列出指定链中所有的规则，未指定链名，则列出表中的所有链</span><br><span class="hljs-deletion">-F:清空指定链中所有的规则，未指定链名，则清空表中的所有链</span><br><span class="hljs-deletion">-P:设置指定链的默认策略</span><br><span class="hljs-deletion">-n:使用数字形式显示输出结果</span><br><span class="hljs-deletion">-v:查看规则列表时显示详细的信息</span><br><span class="hljs-deletion">-h:查看命令帮助信息</span><br><span class="hljs-deletion">--line-numbers:查看规则列表时，同时显示规则在链中的顺序号</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">显示nat表的所有链的所有规则<br>iptables -t nat -nvL<br><br>设置filter表的forward链的默认策略为accept<br>iptables -t filter -P FORWARD ACCEPT<br><br>在nat表的POSTROUTING链增加规则:如将IP源为<span class="hljs-number">192.168.128.0</span>/<span class="hljs-number">24</span>改为<span class="hljs-number">55.12.12.12</span><br>iptables -t nat -<span class="hljs-keyword">A</span> POSTROUTING -s <span class="hljs-number">192.168.128.0</span>/<span class="hljs-number">24</span> -j SNAT --to-source <span class="hljs-number">55.12.12.12</span><br></code></pre></td></tr></table></figure><p><code>SNAT</code>源地址转换，<code>--to-source</code>指定外网接口地址。当收到目的IP的回包时会自动转换成内网IP地址(<strong>设置了nat表的POSTROUTING那条规则后，conntrack会把指定的数据包装成外网接口的数据发送出去，并且在conntrack表中将它保存下来，收到回包时，就能根据conntrack表中的记录查到对应的内网IP地址</strong>)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css">MASQUERADE动态伪装，家用带宽获取的外网ip就用到了动态伪装(等同于SNAT --<span class="hljs-selector-tag">to</span>-source <span class="hljs-selector-attr">[外网有效IP]</span>)<br>iptables -t nat -<span class="hljs-selector-tag">A</span> POSTROUTING -s <span class="hljs-number">192.168</span>.<span class="hljs-number">10.0</span>/<span class="hljs-number">24</span> -j MASQUERADE<br><br>DNAT目标地址转换,--<span class="hljs-selector-tag">to</span>-destination指定目标IP地址。<br>iptables -t nat -<span class="hljs-selector-tag">A</span> PREROUTING -d <span class="hljs-number">192.168</span>.<span class="hljs-number">10.18</span> -<span class="hljs-selector-tag">p</span> udp --dport <span class="hljs-number">53</span> -j DNAT --<span class="hljs-selector-tag">to</span>-destination <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br><br>清空nat表的PREROUTING链中所有的规则<br>iptables -t nat -F PREROUTING<br><br>清空nat表的所有链<br>iptables -t nat -F<br><br>新建一个链叫做vis_cron(不指定表名默认为<span class="hljs-attribute">filter</span>表, -N即new)<br>iptables -t nat -N vis_cron<br><br>引用链<br>iptables -t nat -<span class="hljs-selector-tag">I</span> PREROUTING -<span class="hljs-selector-tag">p</span> tcp --dport <span class="hljs-number">9090</span> -j vis_cron<br><br>重命名链<br>iptables -t nat -E vis_cron pre_cron<br><br>删除自定义链(必须要满足两点：<span class="hljs-number">1</span>、自定义链没有被引用。<span class="hljs-number">2</span>、自定义链中没有任何规则)<br>iptables -t nat -X vis_cron<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群部署</title>
    <link href="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装docker及k8s集群相关术语"><a href="#一、安装docker及k8s集群相关术语" class="headerlink" title="一、安装docker及k8s集群相关术语"></a>一、安装docker及k8s集群相关术语</h3><p>前面<a href="https://gys18007141407.github.io/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">docker简单使用</a>中已经讲过如何安装docker了。</p><p><a href="https://blog.51cto.com/superleedo/2386713">这里</a>是有关k8s的资料</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Cluster<br>Cluster是网络、存储、计算各种资源的集合，k8s利用这些资源运行容器应用。<br><br><span class="hljs-keyword">Master</span><br><span class="hljs-title">Master</span>是集群的管理中心，负责调度，决定将应用放置在哪里运行，可以同时运行多个<span class="hljs-literal">master</span>以保证高可用。<br><br><span class="hljs-keyword">Node</span><br><span class="hljs-title">Node</span>是集群的工作节点，负责运行容器应用，<span class="hljs-keyword">node</span><span class="hljs-title">由master</span>管理，<span class="hljs-keyword">node</span><span class="hljs-title">负责监控并汇报容器的状态，同时根据master</span>要求管理容器的生命周期。<span class="hljs-keyword">Node</span><span class="hljs-title">上运行着Kubelet</span>、kube-proxy服务进程，这些服务进程负责Pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡。查看<span class="hljs-keyword">node</span><span class="hljs-title">，kubectl</span> get <span class="hljs-keyword">node</span><span class="hljs-title">，  kubectl</span> describe <span class="hljs-keyword">node</span><br><br><span class="hljs-title">Pod</span><br>pod是k8s的最小工作单元，每个pod包含一个或者多个容器，通常情况下运行单一容器，也即是one-container-per-Pod模式；对于多个容器有紧密联系且需要共享资源的则使用多容器模式。<br>一个pod中的应用容器共享资源：Pod中的不同应用程序可以看到其他应用程序的进程ID；Pod中的多个容器能够访问同一个IP和端口范围；Pod中的多个容器能够使用SystemV IPC或POSIX消息队列进行通信；Pod中的多个容器共享一个主机名；Pod中的各个容器可以访问在Pod级别定义的Volumes；<br>Pod的生命周期通过Replication Controller来管理；通过模板进行定义，然后分配到一个<span class="hljs-keyword">Node</span><span class="hljs-title">上运行，在Pod</span>所包含容器运行结束后，Pod结束。<br>k8s中，用pause容器来作为一个pod中所有容器的父容器。这个pause容器有两个核心的功能，第一，它提供整个pod的Linux命名空间的基础。第二，启用PID命名空间，它在每个pod中都作为PID为<span class="hljs-number">1</span>进程，并回收僵尸进程。<br><br>Controller<br>k8s通常不会直接创建pod，它是通过controller来管理pod，k8s提供了多种controller，有Deployment、ReplicaSet、DaemonSet、StatefuleSet、job等。Deployment管理pod及其副本，并保证pod按照期望的状态运行；ReplicaSet管理多个副本，使用deployment会自动创建ReplicaSet，所以通常不需要直接用ReplicaSet；DaemonSet用于每个<span class="hljs-keyword">node</span><span class="hljs-title">最多运行一个pod</span>副本的场景；StatefuleSet保证pod的每一个副本在整个生命周期中名称是不变的。Job用于运行结束就删除的应用，其他controller的pod通常是长期运行。<br><br>Service<br>一个Service可以看作一组提供相同服务的Pod的对外访问接口，Service作用于哪些Pod是通过Label Selector来定义的，service有自己的ip和端口，为pod提供负载均衡。<br><br>Namecpace<br>namespace是将物理的cluster逻辑上划分成多个虚拟的cluster，每一个cluster就是一个namespace，不同的namespace里的资源是完全隔离的，kubectl get namespace命令查看，default是默认的命名空间，kebe-system是k8s自己创建的系统资源的命名空间。<br><br>Volume<br>volume是pod中能够被多个容器访问的共享目录<br></code></pre></td></tr></table></figure><h3 id="二、安装kebulet、kubeadm、kubectl"><a href="#二、安装kebulet、kubeadm、kubectl" class="headerlink" title="二、安装kebulet、kubeadm、kubectl"></a>二、安装kebulet、kubeadm、kubectl</h3><p>1、加载key</p><p><code>sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </code></p><p>2、添加源(/etc/apt/source.list.d/kubernetes.list)</p><p>增加语句<code>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</code></p><p>3、安装</p><p><code>sudo apt update</code></p><p><code>sudo apt install kubelet kubeadm kubectl</code></p><h3 id="三、创建或者加入集群"><a href="#三、创建或者加入集群" class="headerlink" title="三、创建或者加入集群"></a>三、创建或者加入集群</h3><p>1、关闭交换分区(<code>free -[m|h]</code>或者<code>top</code>查看)</p><p>临时关闭<code>sudo swapoff -a</code>(相反的操作为<code>swapon -a</code>)</p><p>永久关闭<code>sudo vim /etc/fstab</code>注释其中swap所占那一行(取消挂载磁盘)</p><p>2、关闭selinux</p><p>临时关闭 <code>sudo setenforce 0</code> (开启置为1)</p><p>永久关闭<code>sed -i &#39;s/enforcing/disabled/&#39; /etc/selinux/config</code></p><p>3、尝试启动kubelet</p><p><code>sudo service kubelet start</code></p><p>大概率启动失败，查看<code>/var/log/syslog</code> 应该会看到以下错误提示我们<code>&quot;Failed to run kubelet&quot; err=&quot;failed to run Kubelet: misconfiguration: kubelet cgroup driver: \&quot;systemd\&quot; is different from docker cgroup driver: \&quot;cgroupfs\&quot;&quot;</code></p><p><a href="https://blog.csdn.net/cymm_liu/article/details/106677997">相关了解链接</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less">启动<span class="hljs-selector-tag">kubelet</span>时要求<span class="hljs-selector-tag">docker</span>与<span class="hljs-selector-tag">kubelet</span>的驱动是一致的(systemd或者cgroupfs)。<br><br><span class="hljs-selector-tag">cgroup</span>是控制组(control group)的简写，是<span class="hljs-selector-tag">Linux</span>内核提供的一个特性。主要用于限制和隔离一组进程对系统资源的使用，也就是做资源<span class="hljs-selector-tag">QoS</span>(Quality of Service服务质量)。<br><br><span class="hljs-selector-tag">Cgroup</span>提供了一个原生接口然后通过封装这个接口提供<span class="hljs-selector-tag">cgroupfs</span>给用户使用。类似于<span class="hljs-selector-tag">procfs</span>和<span class="hljs-selector-tag">sysfs</span>，<span class="hljs-selector-tag">cgroupfs</span>是一种虚拟文件系统，默认挂载在/<span class="hljs-selector-tag">sys</span>/<span class="hljs-selector-tag">fs</span>/<span class="hljs-selector-tag">cgroup</span>目录。比如说要限制内存是多少、要用 <span class="hljs-selector-tag">CPU</span> <span class="hljs-selector-tag">share</span> 为多少？直接把 <span class="hljs-selector-tag">pid</span> 写入对应的一个 <span class="hljs-selector-tag">cgroup</span> 文件，然后把对应需要限制的资源也写入相应的 <span class="hljs-selector-tag">memory</span> <span class="hljs-selector-tag">cgroup</span> 文件和 <span class="hljs-selector-tag">CPU</span> 的 <span class="hljs-selector-tag">cgroup</span> 文件就可以了。<br><br><span class="hljs-selector-tag">Systemd</span>也是对于<span class="hljs-selector-tag">Cgroup</span>接口的一个封装。使用<span class="hljs-selector-tag">systemd</span> 做 <span class="hljs-selector-tag">cgroup</span> 驱动的话，所有的 <span class="hljs-selector-tag">cgroup</span> 操作都必须通过 <span class="hljs-selector-tag">systemd</span> 的接口来完成，不能手动更改 <span class="hljs-selector-tag">cgroup</span> 的文件。<br><br>所以 <span class="hljs-selector-tag">systemd</span> 更加安全(不能手动去更改 cgroup 文件)。【<span class="hljs-selector-tag">k8s</span>官网推荐使用<span class="hljs-selector-tag">systmed</span>】因为在 <span class="hljs-selector-tag">kubelet</span> 和 <span class="hljs-selector-tag">Docker</span> 中配置为使用 <span class="hljs-selector-tag">cgroupfs</span> 而在其余进程中使用 <span class="hljs-selector-tag">systemd</span> 的节点在资源压力下变得不稳定。<br></code></pre></td></tr></table></figure><p>全部配置为cgroupfs: 在kubeadm.config中增加<code>--cgroup-driver=cgroupfs</code></p><p><code>sudo vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code></p><p>全部配置为systemd: 在docker配置文件中增加 <code>&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</code></p><p><code>sudo vim /etc/docker/daemon.json</code></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">最好顺便增加一个镜像源<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://bmtb46e4.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>再启动试一下，应该是成功了(或者报错没有配置文件)</p><p><code>sudo systemctl daemon-reload</code></p><p><code>sudo systemctl start kubelet</code></p><p>3、创建/加入集群</p><p><code>kubeadm --help</code>看看这个指令的用法，提示使用<code>kubeadm init</code>成为新集群的master, 使用<code>kubeadm join</code>加入一个创建好的集群中去。</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211026205701950.png" alt="image-20211026205701950"><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211026205736057.png" alt="image-20211026205736057"></p><p><strong>创建集群</strong></p><p>很大概率我们会碰到以下界面(国内连不上<a href="https://k8s.gcr.io/v2/,%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%95%9C%E5%83%8F">https://k8s.gcr.io/v2/,无法下载该网站下面的镜像</a>)</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211026213444925.png" alt="image-20211026213444925"></p><p>解决办法是增加init时的参数，image-repository指定镜像仓库地址, kubernetes-version指定k8s版本。当然也可以用pod-network-cidr指定集群内pod的ip段。</p><p><code>kubeadm reset</code></p><p><code>kubeadm init --image-repository=registry.aliyuncs.com/google_containers --pod-network-cidr=10.120.0.0/16 --kubernetes-version=v1.22.2</code></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211027170122692.png" alt="image-20211027170122692"></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211027170213733.png" alt="image-20211027170213733"></p><p>根据提示启动集群需要普通用户运行下面的语句</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo cp -i <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/admin.conf $HOME/</span>.kube/config<br>sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure><p>最后一行提示要加入worker节点只需要作为root执行下面的语句</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> join <span class="hljs-number">192.168.1.107:6443</span> --token t<span class="hljs-number">03</span>tuk.<span class="hljs-number">2</span>y<span class="hljs-number">6</span>op<span class="hljs-number">1</span>wor<span class="hljs-number">4</span>kq<span class="hljs-number">73</span>hc --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:<span class="hljs-number">65</span>b<span class="hljs-number">365706039857</span>be<span class="hljs-number">1</span>bdfa<span class="hljs-number">394</span>a<span class="hljs-number">0</span>eea<span class="hljs-number">973</span>bd<span class="hljs-number">1155</span>e<span class="hljs-number">3982</span>c<span class="hljs-number">1</span>f<span class="hljs-number">2</span>a<span class="hljs-number">7368</span>d<span class="hljs-number">78</span>a<span class="hljs-number">53</span>b<span class="hljs-number">4</span>f<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><strong>加入集群</strong></p><p>在另一台机器上按相似步骤，最后执行上述加入语句</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211027173425877.png" alt="image-20211027173425877"></p><p>因为token存在有效期，如果在有效期外使用上述命令则加入失败。在master上使用<code>kubeadm token list</code>获取所有token,然后用<code>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt |openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex |sed &#39;s/^.* //&#39;</code>获取证书。最后使用上述命令格式只需替换相应值即可。（注: 生成token命令<code>kubeadm token create</code>）</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029134152110.png" alt="image-20211029134152110"></p><p>注意要复制master的<code>/etc/kubernetes/admin.conf</code>给slave(我假设命名为slave.config)，slave同时设置环境变量<code>export KUBECONFIG=/etc/kubernetes/slave.config</code>。【kubectl命令需要使用kubernetes-admin来运行】</p><p>貌似成功了，但是coredns一直处于挂起状态，coredns插件需要网络插件的支持(master和slave都要安装)，安装calico或者flannel都可以可以，这里安装flannel。【BGP域间路由协议】</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211027174410428.png" alt="image-20211027174410428"></p><p><strong>安装网络插件flannel</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载yaml文件</span><br>wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br><br><span class="hljs-comment"># 将文件中10.244.0.0/16修改为10.120.0.0/16</span><br>sed -i <span class="hljs-string">&#x27;s/10.244.0.0/10.120.0.0/g&#x27;</span> calico.yaml<br><br><span class="hljs-comment"># 部署</span><br>kubectl apply -f kube-flannel.yml<br></code></pre></td></tr></table></figure><p><strong>安装网络插件calico</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载yaml文件</span><br>wget https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/v3.10/g</span>etting-started<span class="hljs-regexp">/kubernetes/i</span>nstallation<span class="hljs-regexp">/hosted/</span>kubernetes-datastore<span class="hljs-regexp">/calico-networking/</span><span class="hljs-number">1.7</span>/calico.yaml<br><br><span class="hljs-comment"># 将文件中192.168.0.0/16修改为10.120.0.0/16</span><br>sed -i <span class="hljs-string">&#x27;s/192.168.0.0/10.120.0.0/g&#x27;</span> calico.yaml<br><br><span class="hljs-comment"># 部署</span><br>kubectl apply -f calico.yaml<br></code></pre></td></tr></table></figure><p><strong>主节点将从节点踢出集群</strong></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029201745320.png" alt="image-20211029201745320"></p><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><p>主节点创建部署一个cron_master</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211028210010283.png" alt="image-20211028210010283"></p><p>这时候发现master主节点和ubuntu从节点都无法进入这个pod【所有在ubuntu从节点上的pod都无法进入】</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211028215053252.png" alt="image-20211028215053252"></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211028215116177.png" alt="image-20211028215116177"></p><p>通过在运行cron_master的节点上(ubuntu)使用docker命令获取到cron_master所在容器的id后进入容器</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029142336992.png" alt="image-20211029142336992"></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029142449168.png" alt="image-20211029142449168"></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029142547002.png" alt="image-20211029142547002"></p><p><strong>猜想：因为ubuntu是利用VMware软件运行在windows中的一个虚拟机，是否因为虚拟机的原因导致无法通过kubectl logs查看在该虚拟机上部署的容器的日志、也无法通过kubectl exec在容器内执行命令</strong></p><p>于是，我尝试在另一台物理机安装k8s，并且也加入该集群。【增加从节点slave】</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029141742339.png" alt="image-20211029141742339"></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029141838370.png" alt="image-20211029141838370"></p><p>这时，同样查看在slave从节点上利用<code>kubectl logs</code>和<code>kubectl exec</code>查看容器日志和在容器内执行命令，发现可以成功执行命令。</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029143202469.png" alt="image-20211029143202469"></p><h3 id="五、部署应用"><a href="#五、部署应用" class="headerlink" title="五、部署应用"></a>五、部署应用</h3><h4 id="yaml模板"><a href="#yaml模板" class="headerlink" title="yaml模板"></a>yaml模板</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># deployment.yaml文件</span><br><span class="hljs-comment"># k8s deployment资源创建流程：</span><br><span class="hljs-comment"># 1、用户通过 kubectl 创建 Deployment。</span><br><span class="hljs-comment"># 2、Deployment 创建 ReplicaSet。</span><br><span class="hljs-comment"># 3、ReplicaSet 创建 Pod。</span><br><span class="hljs-comment"># 创建对象的命名方式是：子对象的名字 = 父对象名字 + 随机字符串或数字</span><br><span class="hljs-comment"># 在 k8s 中,使用一种API对象(Deployment)管理另一种API对象(Pod)的方法叫作&quot;控制器&quot;模式(controller pattern)。Deployment扮演的正是Pod的控制器的角色。</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span>   <span class="hljs-comment"># 接口版本。每个版本内的功能都不一定相同，所以有时候会出现报错，指定kind类型找不到，那就是因为apiserver的版本没有指定正确。</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>                 <span class="hljs-comment"># 接口类型。</span><br><span class="hljs-comment"># Endpoints ==&gt; 可以把外部服务链接到k8s系统中</span><br><span class="hljs-comment"># Service ==&gt; 部署一个内部虚拟IP，其他deployment可以链接</span><br><span class="hljs-comment"># Deployment ==&gt; 部署一个无状态应用Pod，内部只能链接service，无法互相链接</span><br><span class="hljs-comment"># Daemonset ==&gt; 部署守护应用</span><br><span class="hljs-comment"># Cronjob =&gt; 部署定时任务</span><br><span class="hljs-comment"># job ==&gt; 部署定时任务</span><br><span class="hljs-comment"># statefulset ==&gt; 部署有状态应用</span><br><br><span class="hljs-attr">metadata:</span><span class="hljs-comment"># 元数据。key:value对</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cronmaster</span>               <span class="hljs-comment"># Deployment名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>           <span class="hljs-comment"># 命名空间</span><br>  <span class="hljs-attr">labels:</span><span class="hljs-comment"># 标签。标签的作用在于selector</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">cronmaster</span><br>  <span class="hljs-attr">annotations:</span><span class="hljs-comment"># 注释。key:value对,不会对执行有任何影响，用来标记一些信息</span><br>  <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <br><span class="hljs-attr">spec:</span><span class="hljs-comment"># 资源清单。在这定义deployment所需要的资源清单</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><span class="hljs-comment"># 该deployment的副本数量。</span><br>  <span class="hljs-attr">strategy:</span><span class="hljs-comment"># 部署策略。主要是2个:Recreate是停止旧的,然后启动新的,适用于开发环境; rolling-update是滚动升级,先启动一个新的,但并不立即加入使用,等到这个新的完全就绪后,就将一个老的停止,保证业务的连贯性。如果新的版本发布有错误，则会一直保持老的版本状态。</span><br>    <span class="hljs-attr">rollingUpdate:</span>  <br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span>      <span class="hljs-comment"># 滚动升级的幅度。升级时每次会先启动1个pod</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 滚动升级时允许的最大Unavailable的pod数量</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-comment"># pod模板。 </span><br>    <span class="hljs-attr">metadata:</span><span class="hljs-comment"># pod元数据</span><br>      <span class="hljs-attr">labels:</span><span class="hljs-comment"># pod标签</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">cronmaster</span><br>    <span class="hljs-attr">sepc:</span> <span class="hljs-comment"># pod资源清单。在这定义pod所需要的资源清单</span><br>      <span class="hljs-attr">containers:</span><span class="hljs-comment"># pod容器信息。</span><br>      <span class="hljs-string">-</span><span class="hljs-attr">image:</span> <span class="hljs-string">cron_master:v1.0.0</span><span class="hljs-comment"># 镜像</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">cronmaster</span><span class="hljs-comment"># 容器名称  </span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><span class="hljs-comment"># 镜像的拉取策略。always是每次都从镜像仓库拉取,IfNotPresent如果本地没有就拉取,never只从本地拉取</span><br>        <span class="hljs-attr">ports:</span><span class="hljs-comment"># pod暴露端口。</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>            <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><span class="hljs-comment"># 对service暴露端口</span><br>        <span class="hljs-attr">livenessProbe:</span>       <span class="hljs-comment"># pod健康检查。(存活探针，是否存活)</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/running</span> <br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span> <span class="hljs-comment"># 启动后延时多久开始运行检测</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><span class="hljs-comment"># 连接超时时间</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><span class="hljs-comment"># 决定成功的次数</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><span class="hljs-comment"># 决定失败的次数</span><br>        <span class="hljs-attr">readinessProbe:</span><span class="hljs-comment"># pod健康检查。(就绪探针,是否就绪)</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/ready</span> <br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span> <br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">resources:</span>              <span class="hljs-comment"># pod资源限制</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2048Mi</span><br>        <span class="hljs-attr">env:</span>                    <span class="hljs-comment"># pod环境变量</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOCAL_KEY</span>     <span class="hljs-comment"># 本地Key</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">value</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIG_MAP_KEY</span>  <span class="hljs-comment"># 局策略可使用configMap的配置Key，</span><br>            <span class="hljs-attr">valueFrom:</span><br>              <span class="hljs-attr">configMapKeyRef:</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><span class="hljs-comment"># configmap中找到name为special-config</span><br>                <span class="hljs-attr">key:</span> <span class="hljs-string">special.type</span><span class="hljs-comment"># 找到name为special-config里data下的key</span><br>      <span class="hljs-attr">volumeMounts:</span><span class="hljs-comment"># pod磁盘挂载</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><span class="hljs-comment"># 挂载空文件</span><br>          <span class="hljs-attr">mount:</span> <span class="hljs-string">/tmp/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span> <span class="hljs-comment"># 挂载本机文件</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/cron_master/config.ini</span>   <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfsType</span><span class="hljs-comment"># 挂载nfs。</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/nfs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">configMapPair</span><span class="hljs-comment"># 挂载ConfigMap</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span>       <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rbd-pvc</span>           <span class="hljs-comment"># 挂载PVC</span><br>  <br>    <span class="hljs-attr">volumes:</span>  <span class="hljs-comment"># 虚拟磁盘。pod的volumeMounts挂载在这里定义的磁盘上</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">log-cache</span><br><span class="hljs-attr">emptyDir:</span> &#123;&#125;<span class="hljs-comment"># 生命周期和Pod一致。在同一Pod内的不同容器之间共享文件。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sdb</span>  <br>    <span class="hljs-attr">hostPath:</span><span class="hljs-comment"># 挂载本机文件</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/config.ini</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">configMapPair</span>  <br>    <span class="hljs-attr">configMap:</span><span class="hljs-comment"># 供ConfigMap文件内容到指定路径使用</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">configMapPair</span>  <br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log-script</span>           <br>            <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/log-script</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">backup-script</span>        <br>            <span class="hljs-attr">path:</span> <span class="hljs-string">path/to/backup-script</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nfsType</span>         <br>        <span class="hljs-attr">nfs:</span><span class="hljs-comment"># 挂载NFS存储类型</span><br>        <span class="hljs-attr">server:</span> <span class="hljs-number">55.55</span><span class="hljs-number">.55</span><span class="hljs-number">.55</span>          <span class="hljs-comment"># NFS服务器地址</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/public</span>           <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pvc</span>                 <br>        <span class="hljs-attr">persistentVolumeClaim:</span><span class="hljs-comment"># 声明PVC。挂载PVC磁盘</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">nfspvc1</span>         <span class="hljs-comment"># nfspvc1创建方式见下面补充点</span><br></code></pre></td></tr></table></figure><p><strong>补充点：</strong>因为pod是无状态的,为了实现Pod内数据的存储管理,K8s引入了两个API资源：Persistent Volume(持久卷PV)和Persistent Volume Claim(持久卷申请PVC)。PV是k8s集群中的一种网络存储实现,跟Node一样属于集群的资源。PV跟Docker里的Volume类似,不过会有独立于Pod的生命周期(Pod消费Node的资源，PVC消费PV的资源)。</p><p><strong>两种PV供给方式：静态供应、动态供应</strong></p><p>静态供应是由管理员手动创建一堆PV，组成一个PV池，供PVC来绑定。</p><p>动态供应是指在现有PV不满足PVC的请求时，可以使用存储分类(StorageClass)来动态创建PV。大致过程为：PV先创建分类，PVC请求已创建的某个类（StorageClass）的资源，这样就达到动态配置的效果。即通过一个叫 Storage Class的对象由存储系统根据PVC的要求自动创建。</p><p><strong>1、静态供应</strong></p><p><strong>创建PV</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolume<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfspv1<span class="hljs-meta"># PV名称</span><br><span class="hljs-symbol">  labels:</span><span class="hljs-meta"># PV标签</span><br><span class="hljs-symbol">  app:</span> cronpool<br><span class="hljs-symbol">spec:</span><span class="hljs-meta"># 资源清单</span><br><span class="hljs-symbol">  capacity:</span><span class="hljs-meta"># 指定大小</span><br><span class="hljs-symbol">storage:</span> <span class="hljs-number">1</span>Gi <br><span class="hljs-symbol">  volumeMode:</span> Filesystem <span class="hljs-meta"># 文件类型</span><br><span class="hljs-symbol">  accessModes:</span> <span class="hljs-meta"># 指定访问模式</span><br>  - ReadWriteOnce <span class="hljs-meta"># 该卷可以被单个节点以读/写模式挂载</span><br><span class="hljs-meta"># ReadWriteOnce ==&gt; 该卷可以被单个节点以读/写模式挂载</span><br><span class="hljs-meta"># ReadOnlyMany ==&gt; 该卷可以被多个节点以只读模式挂载</span><br><span class="hljs-meta"># ReadWriteMany ==&gt; 该卷可以被多个节点以读/写模式挂载</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  persistentVolumeReclaimPolicy:</span> Recycle <span class="hljs-meta"># 回收策略。pvc资源释放后的事件。</span><br><span class="hljs-meta"># Retain ==&gt; 保留现场，等待用户手动去处理PV里的数据，处理完后，再手动删除PV。</span><br><span class="hljs-meta"># Delete ==&gt; K8s自动删除该PV及里面的数据。</span><br><span class="hljs-meta"># Recycle ==&gt; K8S会将PV里的数据删除，然后把PV的状态变成Available，又可以被新的PVC绑定使用。</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  storageClassName:</span> small <span class="hljs-meta"># 指定PV的class。为PV分类,PVC将从指定class申请PV</span><br><span class="hljs-symbol">  nfs:</span><span class="hljs-meta"># 指定PV所在位置</span><br><span class="hljs-symbol">path:</span> <span class="hljs-meta-keyword">/tmp/</span>cron/share <br><span class="hljs-symbol">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.101</span> <br></code></pre></td></tr></table></figure><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029170936053.png" alt="image-20211029170936053"></p><p>查看PV<code>kubectl get pv -o wide</code>、<code>kubectl describe pv nfspv1</code></p><p>删除PV<code>kubectl delete pv nfspv1</code></p><p><strong>创建PVC</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nfspvc1<span class="hljs-meta"># PVC名称</span><br><span class="hljs-symbol">  labels:</span><span class="hljs-meta"># PVC标签</span><br><span class="hljs-symbol">    app:</span> cron<br><span class="hljs-symbol">spec:</span><span class="hljs-meta"># PVC资源清单</span><br><span class="hljs-symbol">  accessModes:</span><span class="hljs-meta"># 访问模式。需要和PV一致</span><br>    - ReadWriteOnce<br><span class="hljs-symbol">  storageClassName:</span> small <span class="hljs-meta"># 指定PV类</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">200</span>Mi    <span class="hljs-meta"># 需要的大小，不超过PV</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029173350996.png" alt="image-20211029173350996"></p><p>查看PVC<code>kubectl get pvc -o wide</code>、<code>kubectl describe pvc nfspvc1</code></p><p>删除PVC后，PV的状态变为Released。<code>kubectl delete pvc nfspvc1</code></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029173500181.png" alt="image-20211029173500181"></p><p>通过<code>kubectl edit pv nfspv1</code>编辑删除其中的<code>claimRef</code>段落保存后即可恢复PV到Available状态。</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211029173804613.png" alt="image-20211029173804613"></p><p><strong>2、动态供应</strong></p><p><strong>创建StorageClass</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">```<br><br><br><br>#### 创建Endpoints和Service<br><br>这里假设外部有etcd服务，我们将该服务封装成k8s的一个服务供pod通过clusterIP使用。如果pod直接配置服务ip为外部服务的IP，那么就产生了**不必要的耦合性**。<br><br>Service是Kubernetes里最**核心**的资源对象之一,Service定义了一个服务的访问入口地址,前端的应用(Pod)通过这个入口地址访问其背后的一组由Pod副本组成的集群实力。 Service与其后端Pod副本集群之间则是通过Label Selector来实现<span class="hljs-string">&quot;无缝对接&quot;</span>。而RC的作用实际上是保证Service 的服务能力和服务质量处于预期的标准。<br><br>&lt;img src=<span class="hljs-string">&quot;k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211030144605264.png&quot;</span> alt=<span class="hljs-string">&quot;image-20211030144605264&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br>**service在四层转发的四种模式**<br><br></code></pre></td></tr></table></figure><p>ClusterIP<br>此类型会提供一个集群内部的虚拟IP（与Pod不在同一网段)，以供集群内部的pod之间通信使用。ClusterIP也是service的默认类型。</p><p>NodePort<br>NodePort模式除了使用cluster ip外，也将service的port映射到每个node的一个指定内部port上，映射的每个node的内部port都一样。为每个节点暴露一个端口，通过nodeip + nodeport可以访问这个服务，同时服务依然会有cluster类型的ip+port。内部通过clusterip方式访问，外部通过nodeport方式访问。</p><p>loadbalance<br>LoadBalancer在NodePort基础上，K8S可以请求底层云平台创建一个负载均衡器，将每个Node作为后端，进行服务分发。该模式需要底层云平台（例如GCE）支持。</p><p>Ingress<br>Ingress [n.进入; 进入权; 入境权]，是一种HTTP方式的路由转发机制，由Ingress Controller和HTTP代理服务器组合而成。【七层负载均衡】。Ingress Controller实时监控Kubernetes API，实时更新HTTP代理服务器的转发规则。HTTP代理服务器有GCE Load-Balancer、HaProxy、Nginx等开源方案。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**service的三种端口**</span><br><br></code></pre></td></tr></table></figure><p>port<br>service暴露在cluster ip上的端口提供给【集群内部客户访问】service的入口。</p><p>nodePort<br>nodePort是k8s提供给【集群外部客户访问】service入口的一种方式</p><p>targetPort<br>targetPort是【pod上的端口】，从port和nodePort上到来的数据最终经过kube-proxy流入到后端pod的targetPort上进入容器。</p><p>总之，port和nodePort都是service的端口，前者暴露给集群内客户访问服务，后者暴露给集群外客户访问服务。从这两个端口到来的数据都需要经过反向代理kube-proxy流入后端pod的targetPod，从而到达pod上的容器内。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">service</span>的yaml文件示例，如下部署一个集群内访问集群外【假设<span class="hljs-number">192.168.1.101</span>在集群外】etcd服务器的service。<br><br></code></pre></td></tr></table></figure><h1 id="cronetcd-endpoints"><a href="#cronetcd-endpoints" class="headerlink" title="cronetcd.endpoints"></a>cronetcd.endpoints</h1><p>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  name: cronetcd<br>subsets:</p><ul><li>addresses:<ul><li>ip: 192.168.1.101<br>ports:</li><li>port: 2379<br>protocol: TCP<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="cronetcd-svc"><a href="#cronetcd-svc" class="headerlink" title="cronetcd.svc"></a>cronetcd.svc</h1>apiVersion: v1<br>kind: Service<br>metadata:<br>name: cronetcd<br>spec:<br>clusterIP: 10.96.23.79<br>ports:</li><li>port: 2379             # service暴露在cluster ip上的端口【10.96.23.79:2379】<br>targetPort: 2379       # 经proxy转发给pod端口 【192.168.1.101：2379】<br>protocol: TCP<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>部署service<br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030155546685</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030155546685.</span>png)<br><br>同理可部署mongodb的service，etcd和mongodb部署好之后，更改master.config文件中的相关配置，并增加相应磁盘映射即可开启cron_master节点。<br><br>**master.config**<br><br></code></pre></td></tr></table></figure><h1 id="logger相关配置"><a href="#logger相关配置" class="headerlink" title="logger相关配置"></a>logger相关配置</h1>[logger]<br>LogFilePath=/tmp/cron_master/<br>LogFileName=log<h1 id="trace-debug-info-warn-fatal-panic"><a href="#trace-debug-info-warn-fatal-panic" class="headerlink" title="trace debug info warn fatal panic"></a>trace debug info warn fatal panic</h1>LogLevel=info</li></ul></li></ul><h1 id="etcd相关配置"><a href="#etcd相关配置" class="headerlink" title="etcd相关配置"></a>etcd相关配置</h1><p>[etcd]</p><h1 id="集群节点-如有多个节点则以逗号分隔开"><a href="#集群节点-如有多个节点则以逗号分隔开" class="headerlink" title="集群节点(如有多个节点则以逗号分隔开)"></a>集群节点(如有多个节点则以逗号分隔开)</h1><p>Endpoints=10.96.23.79:2379</p><h1 id="连接超时时间"><a href="#连接超时时间" class="headerlink" title="连接超时时间"></a>连接超时时间</h1><p>DialTimeout=5000</p><h1 id="task相关配置"><a href="#task相关配置" class="headerlink" title="task相关配置"></a>task相关配置</h1><p>[task]</p><h1 id="任务目录"><a href="#任务目录" class="headerlink" title="任务目录"></a>任务目录</h1><p>BaseDir=/cron/tasks/</p><h1 id="强杀目录"><a href="#强杀目录" class="headerlink" title="强杀目录"></a>强杀目录</h1><p>KillerDir=/cron/killer/</p><h1 id="警报目录"><a href="#警报目录" class="headerlink" title="警报目录"></a>警报目录</h1><p>WarnDir=/cron/warn/</p><h1 id="worker相关配置-服务注册、服务发现"><a href="#worker相关配置-服务注册、服务发现" class="headerlink" title="worker相关配置(服务注册、服务发现)"></a>worker相关配置(服务注册、服务发现)</h1><p>[worker]<br>WorkersDir=/cron/workers/</p><h1 id="master相关配置-选主"><a href="#master相关配置-选主" class="headerlink" title="master相关配置(选主)"></a>master相关配置(选主)</h1><p>[master]</p><h1 id="master注册目录"><a href="#master注册目录" class="headerlink" title="master注册目录"></a>master注册目录</h1><p>MastersDir=/corn/masters/</p><h1 id="主master抢锁的key"><a href="#主master抢锁的key" class="headerlink" title="主master抢锁的key"></a>主master抢锁的key</h1><p>LeaderKey=/cron/leader</p><h1 id="mongodb相关配置"><a href="#mongodb相关配置" class="headerlink" title="mongodb相关配置"></a>mongodb相关配置</h1><p>[database]</p><h1 id="数据库地址"><a href="#数据库地址" class="headerlink" title="数据库地址"></a>数据库地址</h1><p>DatabaseURI=mongodb://10.96.27.17:27017</p><h1 id="连接超时时间-ms"><a href="#连接超时时间-ms" class="headerlink" title="连接超时时间(ms)"></a>连接超时时间(ms)</h1><p>ConnectTimeOut=5000</p><h1 id="数据库名称"><a href="#数据库名称" class="headerlink" title="数据库名称"></a>数据库名称</h1><p>DatabaseName=cron</p><h1 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h1><p>Collection=log</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br><br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030155925479</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030155925479.</span>png)<br><br>将yaml文件中的replicas修改为<span class="hljs-number">3</span>，查看运行日志，部署cron_master应用成功！<br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160542889</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160542889.</span>png)<br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160802333</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160802333.</span>png)<br><br>OK，现在k8s集群内部的node可以通过pod IP来访问对应的cron_master,但**集群外的用户怎么办**呢？<br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160944515</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030160944515.</span>png)<br><br>我想你应该知道怎么办了，同样地，我们为这三个cron_master创建service，但**设置转发模式为nodePort**。<br><br>**注意：如果cronmaster的某个pod挂了，再次恢复时pod的IP可能已经发生变化了，那么此时该service怎么办。这里我选择避开选择器直接使用pod的IP创建service，事实上我们在service中要用selector选择器根据pod标签选择对应的IP，为所有包含所选标签的pod创建服务。选择器后面再学习。**<br><br><span class="hljs-string">`service是一个虚拟概念，逻辑上代理后端pod。pod生命周期短，状态不稳定，pod异常后新生成的pod ip会发生变化，之前pod的访问方式均不可达。通过service对pod做代理，service有固定的ip和port，ip:port组合自动关联后端pod，即使pod发生改变，kubernetes内部更新这组关联关系，使得service能够匹配到新的pod。这样，通过service提供的固定ip，用户再也不用关心需要访问哪个pod，以及pod是否发生改变，大大提高了服务质量。如果pod使用rc创建了多个副本，那么service就能代理多个相同的pod，通过kube-proxy，实现负载均衡。`</span><br><br></code></pre></td></tr></table></figure><p>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  name: cronmaster<br>subsets:</p><ul><li>addresses:<ul><li>ip: 10.120.2.24</li><li>ip: 10.120.2.25</li><li>ip: 10.120.2.26<br>ports:</li><li>port: 9090<br>protocol: TCP<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>apiVersion: v1<br>kind: Service<br>metadata:<br>name: cronmaster<br>spec:<br>type: NodePort<br>ports:</li><li>port: 9090<br>targetPort: 9090<br>nodePort: 30080<br>protocol: TCP<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030164314696</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030164314696.</span>png)<br><br>让我们来测试吧！结果OK。<br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211030164703495</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211030164703495.</span>png)<br><br>#### GUI/可视化<br><br>获取dashboard的yaml文件<span class="hljs-string">`wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml`</span><br><br>为了能让外部客户访问到dashboard, 这里修改recommend.yaml文件，设置service资源清单的type为NodePort，设置外部端口为<span class="hljs-number">30090</span>。<br><br></code></pre></td></tr></table></figure>kind: Service<br>apiVersion: v1<br>metadata:<br>labels:<br>k8s-app: kubernetes-dashboard<br>name: kubernetes-dashboard<br>namespace: kubernetes-dashboard<br>spec:<br>type: NodePort<br>ports:<ul><li>port: 443<br>targetPort: 8443<br>nodePort: 30090<br>selector:<br>k8s-app: kubernetes-dashboard<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br><span class="hljs-string">`kubectl apply -f recommended.yaml`</span><br><br>![<span class="hljs-keyword">image</span><span class="hljs-number">-20211101202650064</span>](k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/<span class="hljs-keyword">image</span><span class="hljs-number">-20211101202650064.</span>png)<br><br>**注意：**必须要使用<span class="hljs-string">`HTTPS`</span>协议。<br><br>这里使用Token登录，前面已经提过如何获取Token。但不幸的是，并不是所有角色的Token都能登录【角色与权限是绑定的，脱离了权限谈角色没有任何意义，就像数据库中所描述的一样：**角色是一组权限的集合**】。权限访问控制后面再学习，现在暂时跳过权限控制部分。[相关信息](https:<span class="hljs-comment">//zhuanlan.zhihu.com/p/281294170)</span><br><br>下面将创建一个叫做dashboard-user的角色，并放在kubernetes-dashboard 命名空间下，并将<span class="hljs-keyword">cluster</span>-admin角色绑定到dashboard-user角色，这样dashboard-user账户【kubeadm init创建集群时默认创建了<span class="hljs-keyword">cluster</span>-admin角色】就有了管理员的权限。<br><br></code></pre></td></tr></table></figure>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>name: dashboard-user<br>namespace: kubernetes-dashboard</li></ul></li></ul></li></ul><hr><p>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: dashboard-user<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-admin<br>subjects:</p><ul><li>kind: ServiceAccount<br>name: dashboard-user<br>namespace: kubernetes-dashboard<br>```</li></ul><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211101205233054.png" alt="image-20211101205233054"></p><p>查看kubernetes-dashboard命名空间下所有角色<code>kubectl get sa -n kubernetes-dashboard </code></p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211101205938348.png" alt="image-20211101205938348"></p><p>查看角色的详细信息<code>kubectl describe secret dashboard-user -n kubernetes-dashboard</code>。</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211101210803119.png" alt="image-20211101210803119"></p><p>复制Token登录即可看到以下图像交互界面。</p><p><img src="/2021/10/26/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/image-20211101210639342.png" alt="image-20211101210639342"></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reinterpret_cast</title>
    <link href="/2021/10/26/reinterpret_cast/"/>
    <url>/2021/10/26/reinterpret_cast/</url>
    
    <content type="html"><![CDATA[<h5 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h5><p>强制类型转换使用</p><h5 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h5><p>隐式类型转换使用</p><h5 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h5><p>用于基类和派生类指针之间的转换，dynamic_cast具有类型检查的功能，比static_cast更安全。</p><h5 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h5><p>用于去掉类型的const或volatile属性</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>费马小定理求逆元(组合数)</title>
    <link href="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/"/>
    <url>/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/</url>
    
    <content type="html"><![CDATA[<h3 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">一般方案求组合数O(nm)：动态规划c<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = c<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j-1]</span> + c<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j]</span><br>从i个中选取j个 == 从i-<span class="hljs-number">1</span>个中选取j-<span class="hljs-number">1</span>个和第i个本身 + 从i-<span class="hljs-number">1</span>个中选取j个<br><br>使用阶乘和逆元利用公式求O(n): c<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = i! / (j!(i-j)!)<br>fact<span class="hljs-selector-attr">[i]</span> = i*fact<span class="hljs-selector-attr">[i-1]</span><br>infact<span class="hljs-selector-attr">[i]</span> = qmi(<span class="hljs-selector-tag">i</span>, p-<span class="hljs-number">2</span>)*infact<span class="hljs-selector-attr">[i-1]</span><br>c<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = fact<span class="hljs-selector-attr">[i]</span>*infact<span class="hljs-selector-attr">[j]</span>*infact<span class="hljs-selector-attr">[i-j]</span><br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/4005/">题目链接1</a></p><p><img src="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/image-20211024174850646.png" alt="image-20211024174850646"></p><p><img src="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/image-20211024174903352.png" alt="image-20211024174903352"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 2 2</span><br><span class="hljs-comment">// 11 11 11 12 22</span><br><span class="hljs-comment">// 11 21 22 22 22</span><br><span class="hljs-comment">// res = 5</span><br><br><br><span class="hljs-comment">// a递增,b递减,则a[m] &lt;= b[m]就满足题目要求</span><br><span class="hljs-comment">// 将b反转，则a拼接b整个就是一个严格非单调递增的序列</span><br><span class="hljs-comment">// 题目转化为：求将[1~n]的数填入 2*m 个盒子, 满足非严格单调递增的方案数</span><br><span class="hljs-comment">// 又可转化为, 将 2*m 个无差别的小球放入一排 n 个盒子里面,每个盒子允许放多个球或者不放球</span><br><span class="hljs-comment">// 即将 2*m 个无差别的小球分成 n 组, 组内小球数量可以是 0</span><br><br><span class="hljs-comment">// 隔板法：2*m个小球共 2*m-1 个位置放隔板(小球1到小球2m-1后面), 由于组内小球数量可以是0，故n个盒子天然可以当成n个隔板</span><br><span class="hljs-comment">// C(2*m-1+n, n-1)</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1100</span>;<br><br><span class="hljs-comment">// 阶乘和阶乘逆元</span><br><span class="hljs-keyword">int</span> fact[N], infact[N]; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span>  <span class="hljs-comment">// 求a^k mod p</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1ll</span>*res * a % p;<br>        a = <span class="hljs-number">1ll</span>*a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 计算阶乘和阶乘逆元</span><br><span class="hljs-comment">// 费马小定理: a^(p-1) === 1 | p</span><br><span class="hljs-comment">// a * a^(p-2) === 1 | p</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> p)</span></span>&#123;<br>    fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        fact[i] = <span class="hljs-number">1ll</span>*fact[i<span class="hljs-number">-1</span>]*i % p;<br>        <span class="hljs-comment">// infact[i] = qmi(fact[i], p-2, p) % p;</span><br>        infact[i] = <span class="hljs-number">1ll</span>*infact[i<span class="hljs-number">-1</span>] * <span class="hljs-built_in">qmi</span>(i, p<span class="hljs-number">-2</span>, p) % p;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span></span>&#123;  <span class="hljs-comment">// 注意每乘一次都要取模</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*infact[b]*fact[a] % p *infact[a-b] % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">cal</span>(<span class="hljs-number">2</span>*m+n<span class="hljs-number">-1</span>, mod);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>*m+n<span class="hljs-number">-1</span>, n<span class="hljs-number">-1</span>, mod));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/4081/">题目链接2</a></p><p><img src="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/image-20211122201732179.png" alt="image-20211122201732179"></p><p><img src="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/image-20211122201746885.png" alt="image-20211122201746885"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 超时代码【因为k是恒定的，这里有很多重复计算】</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>; <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">int</span> n, k, l, r;<br><br><span class="hljs-function">ll <span class="hljs-title">qmi</span><span class="hljs-params">(ll a, ll b)</span></span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res = (res * a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (a * a) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">int</span> fact[N], infact[N];<br><br><span class="hljs-comment">// a^(p-1) === 1 mod p</span><br><span class="hljs-comment">// a*a^(p-2) === 1 mod p </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_fact</span><span class="hljs-params">()</span></span>&#123;<br>    fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )&#123;<br>        fact[i] = <span class="hljs-number">1ll</span>*fact[i<span class="hljs-number">-1</span>]*i % mod;<br>        infact[i] = <span class="hljs-number">1ll</span>*<span class="hljs-built_in">qmi</span>(fact[i], mod<span class="hljs-number">-2</span>) % mod;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// c(a, b) = a!/(b!*(a-b)!)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b) <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*fact[a]*infact[b]%mod *infact[a-b]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> len = l; len &lt;= r; ++len)&#123;<br>        <span class="hljs-comment">// g组连续k个1</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> g = <span class="hljs-number">0</span>; g &lt;= len/k; ++g)&#123;<br>            <span class="hljs-comment">// 剩余 len - g*k 个 0</span><br>            <span class="hljs-comment">// 将g组插入 len-g*k+1个缝隙</span><br>            <span class="hljs-comment">// 由于同一个缝隙可以插入多组[坑=&gt;可能重复计算]</span><br>            <span class="hljs-comment">// n个相同的球放入k个不同的盒子，盒子可以为空。方案数为 C(n+k-1, k-1) </span><br>            <span class="hljs-comment">// n个球,中间可以插入n-1块隔板，k个盒子看成这n-1块隔板之后的k块隔板。</span><br>            <span class="hljs-comment">// 问题就是：从n-1+k块隔板中选择k-1块隔板，将n个球分成k堆，可以有某些堆不含球。</span><br>            <span class="hljs-comment">// 如 n = 3, k = 3</span><br>            <span class="hljs-comment">// O | O | O + |  |  |</span><br>            <span class="hljs-comment">// 从5块隔板中选取两块隔板 c(5, 2) = 10</span><br>            res = (res + <span class="hljs-built_in">c</span>(g+len-g*k, len-g*k)) % mod;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">get_fact</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">while</span> (n -- )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">solve</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">// AC代码</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>; <br><span class="hljs-keyword">int</span> n, k, l, r;<br><br><span class="hljs-comment">// f[i]:长度是i的优秀字符串数量</span><br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt; N; ++len)&#123;<br>        <span class="hljs-comment">// 第len位是0</span><br>        f[len] = f[len<span class="hljs-number">-1</span>];<br>        <span class="hljs-comment">// 第len位是1</span><br>        <span class="hljs-keyword">if</span>(len&gt;=k) f[len] = (f[len] + f[len-k])%mod;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 前缀和，f[i]转为长度不超过i的优秀字符串数量</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt; N; ++len) f[len] = (f[len] + f[len<span class="hljs-number">-1</span>]) % mod;<br>    <br>    <span class="hljs-keyword">while</span> (n -- )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (f[r]-f[l<span class="hljs-number">-1</span>]+mod)%mod);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/number-of-ways-to-reorder-array-to-get-same-bst/">题目链接3</a></p><p><img src="/2021/10/24/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83(%E7%BB%84%E5%90%88%E6%95%B0)/image-20221102141723558.png" alt="image-20221102141723558"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 拓扑排序方案数</span><br>    <span class="hljs-comment">// 左子树拓扑排序方案数a * 右子树拓扑排序方案数b * C(a+b, a)</span><br>    <span class="hljs-comment">// 理解: 左子树任意一个序列和右子树任意一个序列进行合并的方案数为C(a+b, a)</span><br>    <span class="hljs-comment">// 因为左子树的序列和右子树的序列确定了，在合并时只要确定其中一个序列的数字所处的位置</span><br>    <span class="hljs-comment">// 那么就确定了整个序列的位置</span><br>    <span class="hljs-comment">// 在a+b个位置中挑选a个位置作为左子树的序列位置，剩下的b个位置就是右子树的序列位置</span><br>    <span class="hljs-comment">// 在a+b个位置中挑选a个位置作为左子树的序列位置的方案数就是 C(a+b, a)</span><br>    <span class="hljs-comment">// c(a+b, a) == (a+b)! / (a!*b!)</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">int</span> val;<br>        TreeNode *left, *right;<br>        <span class="hljs-built_in">TreeNode</span>(<span class="hljs-keyword">int</span> _v) : <span class="hljs-built_in">val</span>(_v), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123; &#125;<br>        ~<span class="hljs-built_in">TreeNode</span>() &#123;<br>            <span class="hljs-keyword">if</span> (left) <span class="hljs-keyword">delete</span> left;<br>            <span class="hljs-keyword">if</span> (right) <span class="hljs-keyword">delete</span> right;<br>        &#125;<br>    &#125;;<br>    TreeNode *root = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(TreeNode **cur, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(*cur)) *cur = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(v);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (v &lt; (*cur)-&gt;val) <span class="hljs-built_in">insert</span>(&amp;(*cur)-&gt;left, v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(&amp;(*cur)-&gt;right, v);<br>        &#125;<br>    &#125;<br><br>    unordered_map&lt;TreeNode*, <span class="hljs-keyword">int</span>&gt; cnt;<br>    <span class="hljs-keyword">int</span> fact[<span class="hljs-number">1010</span>];<br>    <span class="hljs-keyword">int</span> infact[<span class="hljs-number">1010</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(TreeNode *cur)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!cur) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-built_in">cal</span>(cur-&gt;left);<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-built_in">cal</span>(cur-&gt;right);<br>        <span class="hljs-keyword">int</span> cnt_l = cnt[cur-&gt;left];<br>        <span class="hljs-keyword">int</span> cnt_r = cnt[cur-&gt;right];<br>        cnt[cur] = cnt_l + cnt_r + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * left * right % mod * fact[cnt_l+cnt_r] % mod * infact[cnt_l] % mod * infact[cnt_r] % mod;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = (<span class="hljs-number">1ll</span> * res * a) % p;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>            a = <span class="hljs-number">1ll</span> * a * a % mod;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numOfWays</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : nums) <span class="hljs-built_in">insert</span>(&amp;root, v);<br>        <span class="hljs-comment">// 预计算阶乘和其逆元</span><br>        <span class="hljs-comment">// 费马小定理: a^(p-1) == 1 mod p  -----&gt; a * a*(p-2) == 1 mod p</span><br>        fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            fact[i] = <span class="hljs-number">1ll</span> * fact[i<span class="hljs-number">-1</span>] * i % mod;<br>            infact[i] = <span class="hljs-built_in">qmi</span>(fact[i], mod<span class="hljs-number">-2</span>, mod);<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-built_in">cal</span>(root);<br>        <span class="hljs-keyword">return</span> (res - <span class="hljs-number">1</span> + mod) %  mod;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile和docker-compose</title>
    <link href="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/"/>
    <url>/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/</url>
    
    <content type="html"><![CDATA[<h3 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h3><p>1、什么时候使用Dockerfile</p><p>通常我们直接使用命令<code>docker pull [image_name]</code>来拉取一个镜像到本地。但是有些时候，我们所需要的应用程序没有对应的镜像可供下载，于是乎，聪明的人们使用Dockerfile将该应用程序描述清楚，然后将Dockerfile和其描述信息中提到的(依赖的)数据一并打包发送给别人，别人收到这个打包数据后，使用命令<code>docker build -f [Dockerfile_path] -t [image_name:tag] .</code>(不要忽略最后的点，那个点是指Dockerfile中本机文件的当前路径)就可以创建出镜像。也就是说使用 <strong>Dockerfile 创建一个镜像</strong>，Dockerfile文件中描述了该镜像安装运行所需的环境、程序代码等相关依赖数据。</p><p>2、什么时候使用docker-compose</p><p>有了镜像之后，我们只需要使用命令<code>docker run [image_name]</code>即可在一个容器中运行该镜像，当然<code>docker run</code>命令可以使用参数来指定容器名称、容器环境变量、容器文件映射、容器端口映射等等。但是有些时候，我们的一个项目要同时运行很多个容器，如果还是逐个镜像执行<code>docker run</code>命令无疑是十分繁琐的，而且难以维护每次执行时的命令行参数。聪明的人们又很快想到使用<strong>docker-compose来编排这些容器</strong>(每个镜像运行在一个容器中)，只需要编写好docker-compose.yaml文件，docker就能按照在docker-compose.yaml文件中配置的那样帮助我们运行调控多个容器。</p><p><strong>docker-compose只能管理【当前主机】上的容器，如果要管理【其他主机】上的容器则需要使用docker-swarm或者kubernetes。</strong></p><h3 id="Dockerfile编写"><a href="#Dockerfile编写" class="headerlink" title="Dockerfile编写"></a>Dockerfile编写</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">####### 打包阶段</span><br><br><span class="hljs-comment"># 基础镜像</span><br>FROM golang:<span class="hljs-number">1.16</span> as build<br><br><span class="hljs-comment"># 环境变量</span><br>ENV GO111MODULE=on \<br>    GOPROXY=https:<span class="hljs-regexp">//g</span>oproxy.cn,direct \<br>    CGO_ENABLED=<span class="hljs-number">0</span> \<br>    GOOS=linux \<br>    GOARCH=amd64 <br><br><span class="hljs-comment"># 工作目录(如果不存在则同时创建该目录)</span><br>WORKDIR <span class="hljs-regexp">/app/</span>cache<br><br><span class="hljs-comment"># 依赖文件复制</span><br>COPY ./go.mod .<br>COPY ./go.sum .<br><br><span class="hljs-comment"># 下载编译时该应用程序所需要的包</span><br>RUN go mod download<br><br><span class="hljs-comment"># 工作目录</span><br>WORKDIR <span class="hljs-regexp">/app/</span>cron_master<br><br><span class="hljs-comment"># 依赖文件复制(从本地复制文件)</span><br>COPY . .<br><br><span class="hljs-comment"># 编译go程序[当前在工作目录下]</span><br><span class="hljs-comment"># RUN一次就会多生成一层，故因尽量使用 &amp;&amp; 合并RUN语句</span><br>RUN go build -o master .<span class="hljs-regexp">/src/m</span>ain.go<br><br><span class="hljs-comment">####### 运行阶段</span><br><br><span class="hljs-comment"># 基础镜像</span><br>FROM alpine as product<br><br><span class="hljs-comment"># 从指定阶段复制文件(从build阶段复制可执行文件过来)</span><br>COPY --from=build <span class="hljs-regexp">/app/</span>cron_master/master .<br>COPY --from=build <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br>COPY --from=build <span class="hljs-regexp">/app/</span>cron_master<span class="hljs-regexp">/src/</span>config<span class="hljs-regexp">/config.ini /</span>etc<span class="hljs-regexp">/cron_master/</span>config.ini<br><br><span class="hljs-comment"># ARG设置参数(ARG仅在构建Docker映像期间可用，而在创建映像并从其启动容器)</span><br><span class="hljs-comment"># ARG CONFIGPATH=/etc/cron_master/config.ini</span><br><br>ENV CONFIGPATH=<span class="hljs-regexp">/etc/</span>cron_master/config.ini<br><br><span class="hljs-comment"># 启动命令(该命令ARG参数不可用)</span><br>CMD [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;./master --config $CONFIGPATH&quot;</span>]<br></code></pre></td></tr></table></figure><p>创建镜像<code>docker build -f Dockerfile.master -t cron_master:v1.0.0 ./cron_master/</code></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023171709503.png" alt="image-20211023171709503"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023171801921.png" alt="image-20211023171801921"></p><p>可以看到最终的cron_master:v1.0.0镜像只有<strong>32.8MB</strong>。</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023172025018.png" alt="image-20211023172025018"></p><p>重新编写配置文件<code>master.config</code>，并在镜像运行时映射到对应的配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># web相关配置</span><br><span class="hljs-section">[web]</span><br><span class="hljs-attr">ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">9090</span><br><br><span class="hljs-comment"># logger相关配置</span><br><span class="hljs-section">[logger]</span><br><span class="hljs-attr">LogFilePath</span>=/tmp/cron_master/<br><span class="hljs-attr">LogFileName</span>=log<br><span class="hljs-comment"># trace debug info warn fatal panic</span><br><span class="hljs-attr">LogLevel</span>=info<br><br><span class="hljs-comment"># etcd相关配置</span><br><span class="hljs-section">[etcd]</span><br><span class="hljs-comment"># 集群节点(如有多个节点则以逗号分隔开)</span><br><span class="hljs-attr">Endpoints</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">162.128</span>:<span class="hljs-number">2379</span><br><span class="hljs-comment"># 连接超时时间</span><br><span class="hljs-attr">DialTimeout</span>=<span class="hljs-number">5000</span><br><br><span class="hljs-comment"># task相关配置</span><br><span class="hljs-section">[task]</span><br><span class="hljs-comment"># 任务目录</span><br><span class="hljs-attr">BaseDir</span>=/cron/tasks/<br><span class="hljs-comment"># 强杀目录</span><br><span class="hljs-attr">KillerDir</span>=/cron/killer/<br><span class="hljs-comment"># 警报目录</span><br><span class="hljs-attr">WarnDir</span>=/cron/warn/<br><br><span class="hljs-comment"># worker相关配置(服务注册、服务发现)</span><br><span class="hljs-section">[worker]</span><br><span class="hljs-attr">WorkersDir</span>=/cron/workers/<br><br><span class="hljs-comment"># master相关配置(选主)</span><br><span class="hljs-section">[master]</span><br><span class="hljs-comment"># master注册目录</span><br><span class="hljs-attr">MastersDir</span>=/corn/masters/<br><span class="hljs-comment"># 主master抢锁的key</span><br><span class="hljs-attr">LeaderKey</span>=/cron/leader<br><br><span class="hljs-comment"># mongodb相关配置</span><br><span class="hljs-section">[database]</span><br><span class="hljs-comment"># 数据库地址</span><br><span class="hljs-attr">DatabaseURI</span>=mongodb://<span class="hljs-number">192.168</span>.<span class="hljs-number">162.128</span>:<span class="hljs-number">27017</span><br><span class="hljs-comment"># 连接超时时间(ms)</span><br><span class="hljs-attr">ConnectTimeOut</span>=<span class="hljs-number">5000</span><br><span class="hljs-comment"># 数据库名称</span><br><span class="hljs-attr">DatabaseName</span>=cron<br><span class="hljs-comment"># 表名</span><br><span class="hljs-attr">Collection</span>=log<br></code></pre></td></tr></table></figure><p>运行命令, 指定容器名称为master_1，指定网段为静态网段diy-static-net【consul简单使用那一节有讲过怎么设置】，指定容器ip为该静态网段下的172.20.0.11，指定端口映射为本机9090:容器9090，指定文件映射为本机master.config:容器/etc/cron_master/config.ini，指定运行的镜像和版本(tag)为 cron_master:v1.0.0 </p><p><code>docker run -d --name master_1 --net diy-static-net --ip 172.20.0.11 -p 9090:9090 -v /home/gys/go/src/cron/master.config:/etc/cron_master/config.ini cron_master:v1.0.0</code></p><p>Waawoooooo,成功了！</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023173015928.png" alt="image-20211023173015928"></p><p>类似地，用docker部署cron_worker的部分【注意kafka要启动，这里是直接连接本机的kafka，也可以使用docker镜像的kafka(docker pull bitnami/kafka:3.0.0)】就不赘述了，在本文结尾部分，我们将测试master集群和worker集群能否正常协同配合工作。</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023173952084.png" alt="image-20211023173952084"></p><p><strong>注：</strong>若images创建失败、覆盖镜像、或者创建了一些匿名的中间镜像时会生成&lt;none&gt;:&lt;none&gt;镜像，这时可以使用<code>/home/gys/go/src/cron# docker images | grep none | awk &#39;&#123;print $3&#125;&#39; | xargs -I&#123;&#125; docker rmi &#123;&#125;</code>进行批量删除。</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023175012412.png" alt="image-20211023175012412"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023175038571.png" alt="image-20211023175038571"></p><h3 id="docker-compose-yaml编写"><a href="#docker-compose-yaml编写" class="headerlink" title="docker-compose.yaml编写"></a>docker-compose.yaml编写</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 指定版本</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-comment"># 指定要运行的服务(镜像/Dockerfile)</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master1:</span><br>    <span class="hljs-comment"># 服务除了可以基于指定的镜像，还可以基于一份 Dockerfile</span><br>    <span class="hljs-comment"># image 前增加 build</span><br>    <span class="hljs-comment"># build:</span><br>    <span class="hljs-comment">#   context: ./cron_master</span><br>    <span class="hljs-comment">#   dockerfile: Dockerfile.master</span><br>    <span class="hljs-comment">#   args:</span><br>    <span class="hljs-comment">#     args1: 1</span><br>    <span class="hljs-comment">#     params2: 4</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_master:v1.0.0</span><br>    <span class="hljs-comment"># 如果指定容器名称，则replicas不能超过1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_master_1</span><br>    <span class="hljs-comment"># 启动依赖(启动顺序)</span><br>    <span class="hljs-comment"># depends_on:</span><br>      <span class="hljs-comment"># - etcd</span><br>      <span class="hljs-comment"># - mongodb</span><br>    <span class="hljs-comment"># 端口映射(如果配置此项，一般来说replicas不超过1，否则bind error)</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;7071:9090&#x27;</span><br>    <span class="hljs-comment"># 文件映射(挂载)</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./master.config:/etc/cron_master/config.ini&#x27;</span><br>    <span class="hljs-comment"># 网络配置</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">mynet:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>    <span class="hljs-comment"># 部署配置</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-comment"># 指定同时运行的数量</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron master id=1&#x27;</span><br>      <span class="hljs-comment"># 资源限制(如果没有使用swarm, 启动时要加上--compatibility参数)</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-comment"># cpu 25%</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.25&#x27;</span><br>          <span class="hljs-comment"># 内存 100M</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br>      <span class="hljs-comment"># 重启设置</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-comment"># 多久之后重启</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 重启成功时间(启动时间超过window则认为启动成功)</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">30s</span><br><br>  <span class="hljs-attr">master2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_master:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_master_2</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;7072:9090&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./master.config:/etc/cron_master/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">mynet:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron master id=2&#x27;</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.25&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">30s</span><br><br>  <span class="hljs-attr">master3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_master:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_master_3</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;7073:9090&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./master.config:/etc/cron_master/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">another:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.1</span><span class="hljs-number">.13</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron master id=3&#x27;</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.25&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br>      <span class="hljs-attr">restart_policy:</span><br>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span><br>        <span class="hljs-attr">delay:</span> <span class="hljs-string">10s</span><br>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">window:</span> <span class="hljs-string">30s</span><br><br>  <span class="hljs-attr">worker1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_worker:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_worker_1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./worker.config:/etc/cron_worker/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">mynet:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron worker&#x27;</span><br><br>  <span class="hljs-attr">worker2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_worker:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_worker_2</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./worker.config:/etc/cron_worker/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">mynet:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.102</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron worker&#x27;</span><br><br>  <span class="hljs-attr">worker3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_worker:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_worker_3</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./worker.config:/etc/cron_worker/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">another:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.1</span><span class="hljs-number">.103</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron worker&#x27;</span><br><br>  <span class="hljs-attr">worker4:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_worker:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_worker_4</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./worker.config:/etc/cron_worker/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">another:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.1</span><span class="hljs-number">.104</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron worker&#x27;</span><br><br>  <span class="hljs-attr">worker5:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">cron_worker:v1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cron_worker_5</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./worker.config:/etc/cron_worker/config.ini&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">another:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.1</span><span class="hljs-number">.105</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a cron worker&#x27;</span><br><br><br><span class="hljs-comment">#volumes:</span><br><span class="hljs-comment">#  local:</span><br><br><br><span class="hljs-comment"># 如果不指定网络，默认情况下docker-compose会建立一个默认的网络【名称为docker-compose.yml所在目录名称小写形式加上“_default”】</span><br><span class="hljs-comment"># 这个默认网络会对所有services下面的服务生效，所以services下面的各个服务之间才能够通过service名称互相访问。</span><br><span class="hljs-comment">#  因为有默认网络的存在，所以我们什么都不配置，在services下面的服务的容器里面都可以通过service名称访问其端口，前提是service需要通过ports发布它的端口出来。</span><br><span class="hljs-comment"># 如果要自定义默认网络可以针对“default”网络进行设置，这样就会影响默认网络了。</span><br><br><span class="hljs-comment"># 需要注意的是，指定特殊网络后则默认网络失效，前面services中如果要使用默认网络则必须显示指定网络为default</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-comment"># 使用已经存在的网络 diy-static-net</span><br>  <span class="hljs-attr">mynet:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">diy-static-net</span><br><br>  <span class="hljs-comment"># 创建一个新网络, docker-compose up 后,docker network ls可以看到多了一个新网络 cron_another【当前在cron目录下,故命名为了cron_another】</span><br>  <span class="hljs-attr">another:</span><br>    <span class="hljs-attr">ipam:</span><br>      <span class="hljs-attr">driver:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span><br></code></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>使用<code>docker-compose --compatibility -f docker-compose.yaml up</code>即可拉起全部镜像。</p><p>Waawoooooo,成功了！</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023175446542.png" alt="image-20211023175446542"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023175745348.png" alt="image-20211023175745348"></p><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><p>接下来看看各个容器的日志，看是否正常工作！</p><p><strong>3个master</strong></p><p>1、只有leader才会给管理人员发送报警信息。</p><p>2、报警信息的时间正好是对应定时任务的执行周期，既没有重复报警也没用丢失报警信息。</p><p>master正常工作</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180054778.png" alt="image-20211023180054778"></p><p><strong>5个worker</strong></p><p>1、每个定时任务在对应执行时刻只有一个worker执行了，其他worker均处于加锁失败状态。</p><p>2、推送报警信息时，由master日志可以看出来，只对一个报警信息推送一次，所有worker不重复消费消息队列中的报警消息。</p><p>worker正常工作</p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180326510.png" alt="image-20211023180326510"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180420105.png" alt="image-20211023180420105"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180510148.png" alt="image-20211023180510148"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180548757.png" alt="image-20211023180548757"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180621574.png" alt="image-20211023180621574"></p><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><p>使用<code>docker-compose down</code></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180754616.png" alt="image-20211023180754616"></p><p><img src="/2021/10/22/Dockerfile%E5%92%8Cdocker-compose/image-20211023180845050.png" alt="image-20211023180845050"></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2021/10/20/Kafka/"/>
    <url>/2021/10/20/Kafka/</url>
    
    <content type="html"><![CDATA[<h3 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h3><p><a href="http://kafka.apache.org/downloads">下载地址</a>，方便起见，这里直接下载了编译好的二进制文件。</p><p><strong>注意</strong>设置好config/zookeeper.properties文件中的maxClientCnxns选项, 当连接到zookeeper的客户端数量超过maxClientCnxns的值就连接不上zookeeper了.</p><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p>此图感觉有误，现在版本更新后貌似producer和consumer都是直接访问broker集群的，zookeeper只对broker服务。</p><p><img src="/2021/10/20/Kafka/Center.jpeg" alt="img"></p><h4 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ConsumerGroup<br>消费者组，可以并行消费Topic中的<span class="hljs-keyword">partition</span>的消息。可以认为一个ConsumerGroup是一个“订阅者”，一个topic中的每个<span class="hljs-keyword">partition</span>只会被一个“订阅者”中的一个consumer消费，而一个consumer可以消费多个<span class="hljs-keyword">partition</span>中的消息。<br><br>Broker<br>缓存代理，Kafka集群中的一台或多台服务器统称Broker。<br><br>Topic<br>Kafka处理资源的消息源(feeds <span class="hljs-keyword">of</span> messages)的不同分类。<br><br><span class="hljs-keyword">Partition</span><br>Topic物理上的分组，一个topic可以分为多个<span class="hljs-keyword">partition</span>,每个<span class="hljs-keyword">partition</span>是一个有序的队列。<span class="hljs-keyword">partition</span>中每条消息都会被分配一个有序的Id(<span class="hljs-keyword">offset</span>)<br><br>Message<br>消息，以topic为基本单位组织的，不同的topic之间是相互独立的，每个topic又可以分成不同的<span class="hljs-keyword">partition</span>，每个<span class="hljs-keyword">partition</span>储存一部分，每个producer可以向一个topic发布一些消息。<br><br>Producers<br>消息和数据生成者，向Kafka的一个topic发布消息的 过程叫做producers<br><br>Consumers<br>消息和数据的消费者，订阅topic并处理其发布的消费过程叫做consumers<br></code></pre></td></tr></table></figure><p>Kafka是一款基于发布与订阅的消息系统,<strong>Kafka将元数据信息保存在zookeeper中，但是发送给topic的原始数据是保存在broker中的</strong>。通过日志来提供所有事物的持久化记录【重建这些日志可以重建系统的状态】。由于是顺序写磁盘日志，因此Kafka的写入性能较高。Kafka 和其他 消息队列 最大的区别在于 Kafka 中的消息在消费后不会被删除，而是会一直保留，直到过期。目前3.0版本Kafka还是要依赖zookeeper作为服务发现。</p><h3 id="Go使用Kafka"><a href="#Go使用Kafka" class="headerlink" title="Go使用Kafka"></a>Go使用Kafka</h3><p>以下采用库<code>github.com/Shopify/sarama</code></p><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;github.com/Shopify/sarama&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Msg <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span><span class="hljs-string">`json:&quot;name&quot;`</span><br>Age <span class="hljs-keyword">int</span><span class="hljs-string">`json:&quot;age&quot;`</span><br>Score <span class="hljs-keyword">float64</span><span class="hljs-string">`json:&quot;score&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span>(<br>errerror<br>addrs[]<span class="hljs-keyword">string</span><br>config *sarama.Config<br>client sarama.Client<br><br>producer sarama.AsyncProducer<br>message *sarama.ProducerMessage<br>forceQuit <span class="hljs-keyword">chan</span> os.Signal<br>)<br><br>addrs = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;192.168.162.128:9092&quot;</span>&#125;<br><br>config = sarama.NewConfig()<br><span class="hljs-comment">// 返回推送消息成功时的通知[开启后，则必须处理通知，否则后续消息将被阻塞]</span><br>config.Producer.Return.Successes = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 返回推送消息失败时的通知[开启后，则必须处理通知，否则后续消息将被阻塞]</span><br>config.Producer.Return.Errors = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 推送消息时，选择topic分区的算法，这里使用轮询</span><br>config.Producer.Partitioner = sarama.NewRoundRobinPartitioner<br><span class="hljs-comment">// 连接超时</span><br>config.Net.DialTimeout = <span class="hljs-number">3</span>*time.Second<br><br><span class="hljs-comment">// 连接broker</span><br><span class="hljs-keyword">if</span> client, err = sarama.NewClient(addrs, config); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = client.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 创建producer客户端[异步生产]</span><br><span class="hljs-keyword">if</span> producer, err = sarama.NewAsyncProducerFromClient(client); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> producer.AsyncClose()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span>(<br>producerMsg*sarama.ProducerMessage<br>)<br><span class="hljs-keyword">for</span> producerMsg = <span class="hljs-keyword">range</span> producer.Successes()&#123;<br>logrus.Infoln(producerMsg)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span>(<br>producerErr*sarama.ProducerError<br>)<br><span class="hljs-keyword">for</span> producerErr = <span class="hljs-keyword">range</span> producer.Errors()&#123;<br>logrus.Infoln(producerErr)<br>&#125;<br>&#125;()<br><br>forceQuit = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(forceQuit, os.Interrupt)<br><br><span class="hljs-comment">// 推送消息</span><br>SEND_LOOP:<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++&#123;<br>msg, _ :=  json.Marshal(Msg&#123;<br>Name:  <span class="hljs-string">&quot;gys&quot;</span>,<br>Age:   <span class="hljs-number">24</span>,<br>Score: <span class="hljs-number">99.6</span>,<br>&#125;)<br><span class="hljs-comment">// 构建消息</span><br>message = &amp;sarama.ProducerMessage&#123;<br>Topic:     <span class="hljs-string">&quot;cron_test&quot;</span>,<br>Key:       sarama.StringEncoder(<span class="hljs-string">&quot;/cron/warn/test1&quot;</span>),<br>Value:     sarama.ByteEncoder(msg),<br><span class="hljs-comment">// Headers:   []sarama.RecordHeader&#123;</span><br><span class="hljs-comment">// sarama.RecordHeader&#123;</span><br><span class="hljs-comment">// Key:  []byte(&quot;111&quot;),</span><br><span class="hljs-comment">// Value: []byte(&quot;222&quot;),</span><br><span class="hljs-comment">// &#125;,</span><br><span class="hljs-comment">// &#125;,</span><br><span class="hljs-comment">// Metadata:  nil,</span><br><span class="hljs-comment">// Offset:    0,</span><br><span class="hljs-comment">// Partition: 0,</span><br><span class="hljs-comment">// Timestamp: time.Now(),</span><br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 发送消息【如果producer不是异步的则这里会阻塞】</span><br><span class="hljs-keyword">case</span> producer.Input() &lt;- message:<br>logrus.Infoln(<span class="hljs-string">&quot;发送消息:&quot;</span>, i)<br><span class="hljs-comment">// ctrl+c</span><br><span class="hljs-keyword">case</span> &lt;-forceQuit:<br><span class="hljs-keyword">break</span> SEND_LOOP<br>&#125;<br><br>time.Sleep(time.Second)<br>&#125;<br>logrus.Infoln(<span class="hljs-string">&quot;退出。。。&quot;</span>)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-forceQuit:<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;github.com/Shopify/sarama&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Msg <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span><span class="hljs-string">`json:&quot;name&quot;`</span><br>Age <span class="hljs-keyword">int</span><span class="hljs-string">`json:&quot;age&quot;`</span><br>Score <span class="hljs-keyword">float64</span><span class="hljs-string">`json:&quot;score&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span>(<br>errerror<br>addrs[]<span class="hljs-keyword">string</span><br>config *sarama.Config<br>client sarama.Client<br><br>consumer sarama.Consumer<br>partitionIDs[]<span class="hljs-keyword">int32</span><br>partitionConsumersarama.PartitionConsumer<br><br>forceQuit <span class="hljs-keyword">chan</span> os.Signal<br>)<br><br>addrs = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;192.168.162.128:9092&quot;</span>&#125;<br>config = sarama.NewConfig()<br><br><span class="hljs-comment">// 返回读取消息失败时的通知</span><br>config.Consumer.Return.Errors = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 连接超时</span><br>config.Net.DialTimeout = <span class="hljs-number">3</span>*time.Second<br><br><span class="hljs-comment">// 连接broker</span><br><span class="hljs-keyword">if</span> client, err = sarama.NewClient(addrs, config); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = client.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 创建consumer客户端</span><br><span class="hljs-keyword">if</span> consumer, err = sarama.NewConsumerFromClient(client); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = consumer.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br><br><span class="hljs-comment">// 获取某一topic下的所有partition的id</span><br><span class="hljs-keyword">if</span> partitionIDs, err = consumer.Partitions(<span class="hljs-string">&quot;cron_test&quot;</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>logrus.Infoln(partitionIDs)<br>logrus.Infoln(consumer.Topics())<br><br><span class="hljs-comment">// 对指定id的partition从offset个消息开始订阅后续所有的消息</span><br><span class="hljs-keyword">for</span> i, id := <span class="hljs-keyword">range</span> partitionIDs&#123;<br><span class="hljs-comment">// 创建一个分区消费者</span><br><span class="hljs-keyword">if</span> partitionConsumer, err = consumer.ConsumePartition(<span class="hljs-string">&quot;cron_test&quot;</span>, <span class="hljs-number">0</span>, sarama.OffsetOldest); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;订阅该分区失败:&quot;</span>, id, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 消费该分区的消息</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pc *sarama.PartitionConsumer, idx <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span>(<br>err1 error<br>msg Msg<br>message*sarama.ConsumerMessage<br>)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err1 = (*pc).Close(); err1 != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err1)<br>&#125;<br>&#125; ()<br><span class="hljs-comment">// 阻塞读取</span><br><span class="hljs-keyword">for</span> message = <span class="hljs-keyword">range</span> (*pc).Messages()&#123;<br><span class="hljs-keyword">if</span> err = json.Unmarshal(message.Value, &amp;msg); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>logrus.Infoln(idx, <span class="hljs-string">&quot;收到消息&quot;</span>, <span class="hljs-keyword">string</span>(message.Key), msg)<br>&#125;<br>&#125;(&amp;partitionConsumer, i)<br>&#125;<br><br>forceQuit = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(forceQuit, os.Interrupt)<br><br><span class="hljs-comment">// 强制退出</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-forceQuit:<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;github.com/Shopify/sarama&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 消费者组句柄[ sarama.ConsumerGroup 接口，实现下面三个方法，作为自定义 ConsumerGroup]</span><br><span class="hljs-keyword">type</span> groupHandler <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><span class="hljs-comment">// 在获得新 session 后， 进行具体的消费逻辑之前执行 Setup</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(groupHandler)</span><span class="hljs-title">Setup</span><span class="hljs-params">(_ sarama.ConsumerGroupSession)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 在 session 结束前, 当所有 ConsumeClaim 协程都退出时，执行 Cleanup</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(groupHandler)</span><span class="hljs-title">Cleanup</span><span class="hljs-params">(_ sarama.ConsumerGroupSession)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 具体的消费逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(groupHandler)</span><span class="hljs-title">ConsumeClaim</span><span class="hljs-params">(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim)</span>  <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">var</span>(<br>message *sarama.ConsumerMessage<br>)<br><span class="hljs-keyword">for</span> message = <span class="hljs-keyword">range</span> claim.Messages()&#123;<br>logrus.Infoln(session.GenerationID(), session.MemberID(), <span class="hljs-keyword">string</span>(message.Key), <span class="hljs-keyword">string</span>(message.Value), message.Timestamp)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span>(<br>err error<br>addrs []<span class="hljs-keyword">string</span><br>client sarama.Client<br>config*sarama.Config<br>admin sarama.ClusterAdmin<br><br>group1 sarama.ConsumerGroup<br>group2sarama.ConsumerGroup<br>topics1[]<span class="hljs-keyword">string</span><br>topics2[]<span class="hljs-keyword">string</span><br>handler1groupHandler<br>handler2groupHandler<br><br>forceQuit <span class="hljs-keyword">chan</span> os.Signal<br>ctx context.Context<br>cancelFunccontext.CancelFunc<br>)<br>addrs = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;192.168.162.128:9092&quot;</span>&#125;<br>config = sarama.NewConfig()<br>config.Net.DialTimeout = <span class="hljs-number">3</span>*time.Second<br><br><span class="hljs-keyword">if</span> client, err = sarama.NewClient(addrs, config); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = client.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 元数据接口</span><br>logrus.Infoln(client.Topics())<br>logrus.Infoln(client.Leader(<span class="hljs-string">&quot;cron_test&quot;</span>, <span class="hljs-number">0</span>))<br>logrus.Infoln(client.Brokers())<br><span class="hljs-comment">// 获取kafka集群管理员客户端</span><br><span class="hljs-keyword">if</span> admin, err = sarama.NewClusterAdminFromClient(client); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(admin)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>logrus.Infoln(admin.ListConsumerGroups())<br>logrus.Infoln(admin.ListTopics())<br><br><br><span class="hljs-comment">// 加入消费者组1</span><br><span class="hljs-keyword">if</span> group1, err = sarama.NewConsumerGroupFromClient(<span class="hljs-string">&quot;id_1&quot;</span>, client); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = group1.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 加入消费者组2</span><br><span class="hljs-keyword">if</span> group2, err = sarama.NewConsumerGroupFromClient(<span class="hljs-string">&quot;id_2&quot;</span>, client); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = group2.Close(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><br>forceQuit = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(forceQuit, os.Interrupt)<br>ctx, cancelFunc = context.WithCancel(context.TODO())<br><br>topics1 = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;cron_test&quot;</span>, <span class="hljs-string">&quot;cron_test_1&quot;</span>&#125;<br><span class="hljs-keyword">go</span> ConsumerMemberInGroup(ctx, &amp;group1, topics1, handler1)<br><br>topics2 = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;cron_test&quot;</span>, <span class="hljs-string">&quot;cron_test_2&quot;</span>&#125;<br><span class="hljs-keyword">go</span> ConsumerMemberInGroup(ctx, &amp;group2, topics2, handler2)<br><br>logrus.Infoln(admin.ListConsumerGroups())<br><br><span class="hljs-comment">// ctrl+c</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-forceQuit:<br>cancelFunc()<br>&#125;<br><br>time.Sleep(time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConsumerMemberInGroup</span><span class="hljs-params">(ctx context.Context, group *sarama.ConsumerGroup, topics []<span class="hljs-keyword">string</span>, handler sarama.ConsumerGroupHandler)</span></span>  &#123;<br><span class="hljs-keyword">var</span>(<br>err error<br>)<br><span class="hljs-comment">// Consume方法为给定的topics加入消费者集群，并通过ConsumerGroupHandler启动一个阻塞的ConsumerGroupSession</span><br><span class="hljs-comment">// 会话将持续存在，直到其中一个ConsumeClaim()函数退出。这可以是父上下文被取消或服务器端重新平衡周期被启动。</span><br><span class="hljs-keyword">if</span> err = (*group).Consume(ctx, topics, groupHandler&#123;&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>差分约束</title>
    <link href="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="先考虑一些常见的问题"><a href="#先考虑一些常见的问题" class="headerlink" title="先考虑一些常见的问题"></a>先考虑一些常见的问题</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs llvm">题目一、<br>以下不等式中 k<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>k<span class="hljs-number">2</span><span class="hljs-punctuation">,</span>k<span class="hljs-number">3</span>均为常数，求<span class="hljs-keyword">max</span>(a-<span class="hljs-keyword">c</span>)。<br>            a - b &lt;<span class="hljs-operator">=</span> k<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>            b - <span class="hljs-keyword">c</span> &lt;<span class="hljs-operator">=</span> k<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>            a - <span class="hljs-keyword">c</span> &lt;<span class="hljs-operator">=</span> k<span class="hljs-number">3</span><span class="hljs-comment">;</span><br>   解：对于以上每个 &lt;<span class="hljs-operator">=</span> 不等式，建立边，如 a - b &lt;<span class="hljs-operator">=</span> k<span class="hljs-number">1</span> 则建边 a -&gt; b 边的权值为 k<span class="hljs-number">1</span>。则以上三个不等式构成了一个三角形，而三角形具有性质 |ac| &lt;<span class="hljs-operator">=</span> |ab| + |bc|， 故 a-<span class="hljs-keyword">c</span> &lt;<span class="hljs-operator">=</span> k<span class="hljs-number">1</span>+k<span class="hljs-number">2</span>。故而 <span class="hljs-keyword">max</span>(a-<span class="hljs-keyword">c</span>) <span class="hljs-operator">=</span> <span class="hljs-keyword">min</span>(k<span class="hljs-number">3</span><span class="hljs-punctuation">,</span> k<span class="hljs-number">1</span>+k<span class="hljs-number">2</span>)。 <br>   启发：任意两点xi<span class="hljs-punctuation">,</span> xj之间的最短路长度即为<span class="hljs-keyword">max</span>(xi-xj)<span class="hljs-punctuation">,</span> 也就是说 xi-xj &lt;<span class="hljs-operator">=</span> dist(xi<span class="hljs-punctuation">,</span> xj)<br>   <br>题目二、<br>设[ai<span class="hljs-punctuation">,</span> bi] <span class="hljs-operator">=</span>&gt; ci表示在数轴上区间[ai<span class="hljs-punctuation">,</span> bi]中，至少有ci个点。求满足以下式子的最小点数。【ai &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> bi &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> 点只能位于整数位置】<br>            [<span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">7</span>] <span class="hljs-operator">=</span>&gt; <span class="hljs-number">3</span><br>            [<span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>] <span class="hljs-operator">=</span>&gt; <span class="hljs-number">3</span><br>            [<span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>] <span class="hljs-operator">=</span>&gt; <span class="hljs-number">1</span><br>            [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span>] <span class="hljs-operator">=</span>&gt; <span class="hljs-number">1</span><br>            [<span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">11</span>] <span class="hljs-operator">=</span>&gt; <span class="hljs-number">1</span><br>    解：用数学语言来描述这几个式子，设<span class="hljs-keyword">prefix</span>[i]表示[<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> i]区间的点数。则，<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">7</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">6</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">1</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    显然，只需要两边同时乘以<span class="hljs-number">-1</span>即可更换不等号方向该不等式组就和题目一类似了。但该题求的即为满足上述式子的<span class="hljs-keyword">min</span>(<span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>])<span class="hljs-punctuation">,</span> 也就是<span class="hljs-keyword">min</span>(<span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>])<span class="hljs-comment">;</span><br>    同样地，我们可以对上述式子建立图，先不考虑边的方向，很容易可以想到<span class="hljs-keyword">min</span>(<span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>])必然是求<span class="hljs-number">0</span>和<span class="hljs-number">11</span>两点的距离，而上述式子中点<span class="hljs-number">0</span>和点<span class="hljs-number">11</span>不连通，故而求不了距离。但是，我们可以曲线救国，增加以下不等式，<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">7</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span><span class="hljs-number">-1</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span><span class="hljs-number">-1</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">6</span><span class="hljs-number">-1</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">1</span><span class="hljs-number">-1</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span><span class="hljs-number">-1</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">0</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    这样的话，相当于建立了一个超级源点<span class="hljs-number">0</span>，保证了图的连通性。然而，这里还存在一个问题【点只能存在于整数位置】<span class="hljs-punctuation">,</span>故还需增加不等式约束。<br>    <span class="hljs-keyword">prefix</span>[i] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[i<span class="hljs-number">-1</span>]<br>    <span class="hljs-keyword">prefix</span>[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span> &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[i]<br>    这两个不等式恰好增加了该约束【点只能存在于整数位置】<span class="hljs-punctuation">,</span>并且还使得点<span class="hljs-number">0</span>必然和任意一点连通。<br>    # <br>    综上，将不等式化为：<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">7</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">6</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">3</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">1</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] - <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span><span class="hljs-number">-1</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">prefix</span>[i] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[i<span class="hljs-number">-1</span>](i <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">,</span> <span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">prefix</span>[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span> &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[i](i <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">,</span> <span class="hljs-number">11</span>)<br>    由上述不等式我们可以反推：<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span><span class="hljs-number">-1</span>]+<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>]<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">8</span><span class="hljs-number">-1</span>]+<span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">10</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">9</span>]<br>    <span class="hljs-keyword">prefix</span>[<span class="hljs-number">9</span>] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">prefix</span>[<span class="hljs-number">9</span><span class="hljs-number">-1</span>]<br>    ...<br>    对任意<span class="hljs-keyword">prefix</span>[a] - <span class="hljs-keyword">prefix</span>[b] &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">c</span><span class="hljs-punctuation">,</span> 我们建边 b -&gt; a 边的权值为 <span class="hljs-keyword">c</span>。由反推过程，很明显<span class="hljs-keyword">min</span>(<span class="hljs-keyword">prefix</span>[<span class="hljs-number">11</span>])是求点<span class="hljs-number">0</span>到点<span class="hljs-number">11</span>的最长路径。<br></code></pre></td></tr></table></figure><h3 id="先复习关于差分的一些应用题"><a href="#先复习关于差分的一些应用题" class="headerlink" title="先复习关于差分的一些应用题"></a>先复习关于差分的一些应用题</h3><p><a href="https://www.acwing.com/problem/content/1954/">题目链接1</a></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20220310101256126.png" alt="image-20220310101256126"></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20220310101326579.png" alt="image-20220310101326579"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">20010</span>, MAX_SIZE = <span class="hljs-number">3</span>*M;<br><span class="hljs-keyword">int</span> N, X, Y, Z;<br><span class="hljs-keyword">int</span> x_v[MAX_SIZE], y_v[MAX_SIZE], z_v[MAX_SIZE];<br><span class="hljs-keyword">int</span> L[M], R[M];<br><br><span class="hljs-comment">// 对于每头牛的L和R</span><br><span class="hljs-comment">// x_v[0] ++, x_v[L] --;</span><br><span class="hljs-comment">// y_v[L] ++, y_v[R+1] --;</span><br><span class="hljs-comment">// z_v[R+1] ++, z_v[MAX_SIZE] --;</span><br><br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; discrete;<br>map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; recover;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;N, &amp;X, &amp;Y, &amp;Z);<br>    <br>    <span class="hljs-comment">// L,R离散化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;L[i], &amp;R[i]);<br>        discrete[L[i]] = discrete[R[i]] = discrete[R[i]+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [k, v]: discrete) &#123;<br>        recover[v] = tot;<br>        v = tot;<br>        tot ++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>        x_v[<span class="hljs-number">0</span>] ++, x_v[discrete[L[i]]] --;<br>        y_v[discrete[L[i]]] ++, y_v[discrete[R[i]+<span class="hljs-number">1</span>]] --;<br>        z_v[discrete[R[i]+<span class="hljs-number">1</span>]] ++, z_v[tot] --;<br>    &#125;<br>    <span class="hljs-keyword">int</span> res = x_v[<span class="hljs-number">0</span>]*X + y_v[<span class="hljs-number">0</span>]*Y + z_v[<span class="hljs-number">0</span>]*Z;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; tot; ++k)&#123;<br>        x_v[k] += x_v[k<span class="hljs-number">-1</span>];<br>        y_v[k] += y_v[k<span class="hljs-number">-1</span>];<br>        z_v[k] += z_v[k<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(x_v[k]*X + y_v[k]*Y + z_v[k]*Z &gt; res) res = x_v[k]*X + y_v[k]*Y + z_v[k]*Z;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="差分约束系统练习题"><a href="#差分约束系统练习题" class="headerlink" title="差分约束系统练习题"></a>差分约束系统练习题</h3><p><a href="https://www.acwing.com/problem/content/364/">题目1</a></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20211017171619403.png" alt="image-20211017171619403"></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20211017171646601.png" alt="image-20211017171646601"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5e4</span>+<span class="hljs-number">5</span>, M = <span class="hljs-number">4</span>*N;<br><br><span class="hljs-keyword">int</span> h[N], e[M], w[M], ne[M], idx;<br><span class="hljs-keyword">int</span> q[N], dis[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> m;<br><br><span class="hljs-comment">// 对于所有的点有(保证每个点取0或1次)</span><br><span class="hljs-comment">// prefix[i] &gt;= prefix[i-1]</span><br><span class="hljs-comment">// prefix[i-1]+1 &gt;= prefix[i]</span><br><br><span class="hljs-comment">// 对于所有的 [a, b] &gt;= c 有</span><br><span class="hljs-comment">// prefix[b]-prefix[a-1] &gt;= c</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-literal">false</span>));<br>    <span class="hljs-keyword">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    q[tt ++] = k;<br>    dis[k] = <span class="hljs-number">0</span>;<br>    vis[k] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">while</span>(hh != tt)&#123;<br>        <span class="hljs-keyword">int</span> c = q[hh ++];<br>        <span class="hljs-keyword">if</span>(hh == N) hh = <span class="hljs-number">0</span>;<br>        vis[c] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[c]; ~i; i = ne[i])&#123;<br>            <span class="hljs-keyword">if</span>(dis[e[i]] &lt; dis[c]+w[i])&#123;<br>                dis[e[i]] = dis[c]+w[i];<br>                <span class="hljs-keyword">if</span>(!vis[e[i]]) &#123;<br>                    q[tt ++] = e[i];<br>                    vis[e[i]] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span>(tt == N) tt = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">int</span> a, b, c;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N<span class="hljs-number">-1</span>; ++i) <span class="hljs-built_in">add</span>(i<span class="hljs-number">-1</span>, i, <span class="hljs-number">0</span>), <span class="hljs-built_in">add</span>(i, i<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-comment">// prefix[b] - prefix[a-1] &gt;= c</span><br>        <span class="hljs-built_in">add</span>(a<span class="hljs-number">-1</span>, b, c);<br>    &#125;<br>    <span class="hljs-built_in">spfa</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, dis[N<span class="hljs-number">-1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/t3fKg1/">题目2</a></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20211017195849865.png" alt="image-20211017195849865"></p><p><img src="/2021/10/17/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/image-20211017195915713.png" alt="image-20211017195915713"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 超时代码</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; discrete;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>, M = <span class="hljs-number">3</span>*N;<br>    <span class="hljs-keyword">int</span> h[N], e[M], w[M], ne[M], tot = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> q[N], dis[N];<br>    <span class="hljs-keyword">bool</span> vis[N];<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        e[tot] = y, w[tot] = v, ne[tot] = h[x], h[x] = tot++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>        <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>        dis[k] = <span class="hljs-number">0</span>;<br>        vis[k] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        q[tt ++] = k;<br><br>        <span class="hljs-keyword">while</span>(hh != tt)&#123;<br>            <span class="hljs-keyword">int</span> c = q[hh++];<br>            <span class="hljs-keyword">if</span>(hh == N) hh = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// spfa 从该点出发还能够回到该点 ==&gt; vis=false方能入队，入队时置vis=true，出队时置vis=false</span><br>            <span class="hljs-comment">// dijkstra + 堆优化 从该点出发不能回到该点 ==&gt; vis=false方能入队，入队不置vis标记，在出队时置vis=true。所以，当出队时如果vis已经是true了则代表该点已经vis了，continue即可。</span><br>            vis[c] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[c]; ~i; i = ne[i])&#123;<br>                <span class="hljs-keyword">int</span> j = e[i];<br>                <span class="hljs-keyword">if</span>(dis[j] &lt; dis[c]+w[i])&#123;<br>                    dis[j] = dis[c]+w[i];<br>                    <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                        vis[j] = <span class="hljs-literal">true</span>;<br>                        q[tt++] = j;<br>                        <span class="hljs-keyword">if</span>(tt == N) tt = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">processTasks</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;<br><br>        <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>        <br>        <span class="hljs-comment">// 离散化</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: tasks) &#123;<br>            <span class="hljs-comment">// 整体右移给0腾出空间作为源点</span><br>            discrete[p[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>] = discrete[p[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]) discrete[p[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>; <span class="hljs-comment">// prefix可能会用到 p[0]+1 - 1</span><br>        &#125;<br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: discrete) p.second = idx++;<br><br>        discrete[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">int</span> prepos = <span class="hljs-number">0</span>, i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">auto</span> cur = discrete.<span class="hljs-built_in">begin</span>();<br>        cur ++;<br>        <span class="hljs-keyword">while</span>(cur != discrete.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-comment">// prefix[i] &gt;= prefix[i-1]</span><br>            <span class="hljs-comment">// prefix[i-1] + (cur-&gt;first-prepos) &gt;= prefix[i]</span><br>            <span class="hljs-built_in">add</span>(i<span class="hljs-number">-1</span>, i, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">add</span>(i, i<span class="hljs-number">-1</span>, prepos - cur-&gt;first);<br>            prepos = cur-&gt;first;<br>            cur ++, i ++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p: tasks)&#123;<br>            <span class="hljs-comment">// prefix[discrete[p[1]+1]] - prefix[discrete[p[0]+1]-1] &gt;= p[2];</span><br>            <span class="hljs-built_in">add</span>(discrete[p[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>, discrete[p[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>], p[<span class="hljs-number">2</span>]);<br>        &#125;<br><br>        <span class="hljs-built_in">spfa</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> dis[i<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-comment">// 贪心代码 1000ms击败97%</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> pii = pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><br>    vector&lt;pii&gt; work_time; <span class="hljs-comment">// work时间段</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; total;     <span class="hljs-comment">// 截止到对应work时间段，总的工作时长</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">processTasks</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;<br>        <span class="hljs-comment">// 按任务截至时间升序排序，截止时间相同则按启动时间降序排序</span><br>        <span class="hljs-built_in">sort</span>(tasks.<span class="hljs-built_in">begin</span>(), tasks.<span class="hljs-built_in">end</span>(), [](vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; lhs, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; rhs)&#123;<br>            <span class="hljs-keyword">return</span> lhs[<span class="hljs-number">1</span>] == rhs[<span class="hljs-number">1</span>] ? lhs[<span class="hljs-number">0</span>] &gt; rhs[<span class="hljs-number">0</span>] : lhs[<span class="hljs-number">1</span>] &lt; rhs[<span class="hljs-number">1</span>];<br>        &#125;);<br><br>        <span class="hljs-comment">// 增加初始时间段，避免判空操作。因为-1可能会与0合并区间，故设置为-2</span><br>        work_time.<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>&#125;);<br>        total.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">int</span> n = tasks.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<br>            <span class="hljs-keyword">int</span> lt = tasks[i][<span class="hljs-number">0</span>], rt = tasks[i][<span class="hljs-number">1</span>], k = tasks[i][<span class="hljs-number">2</span>];<br><br>            <span class="hljs-comment">// 查找第一个包含(lt, rt)的work_time区间(ls, rs),其中(rs &gt;= lt)</span><br>            <span class="hljs-comment">// work_time[pos] = (ls, rs)</span><br>            <span class="hljs-keyword">int</span> pos = <span class="hljs-built_in">lower_bound</span>(work_time.<span class="hljs-built_in">begin</span>(), work_time.<span class="hljs-built_in">end</span>(), (pii)&#123;lt, rt&#125;, [](<span class="hljs-keyword">const</span> pii&amp; lhs, <span class="hljs-keyword">const</span> pii&amp; rhs)&#123;<br>                <span class="hljs-comment">// rhs是key</span><br>                <span class="hljs-comment">// 可写为：[](const auto&amp; item, const auto&amp; key)</span><br>                <span class="hljs-keyword">return</span> lhs.y &lt; rhs.x;<br>            &#125;) - work_time.<span class="hljs-built_in">begin</span>();<br><br>            <span class="hljs-keyword">if</span>(pos == work_time.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-comment">// 没找到, 新增区间(rt-k+1, rt), 新增工作时间k</span><br>                <span class="hljs-comment">// 可能会合并区间</span><br>                <span class="hljs-keyword">if</span>(work_time.<span class="hljs-built_in">back</span>().y + <span class="hljs-number">1</span> == rt-k+<span class="hljs-number">1</span>)&#123;<br>                    work_time.<span class="hljs-built_in">back</span>().y = rt;<br>                    total.<span class="hljs-built_in">back</span>() += k;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    work_time.<span class="hljs-built_in">push_back</span>(&#123;rt-k+<span class="hljs-number">1</span>, rt&#125;);<br>                    total.<span class="hljs-built_in">push_back</span>(total.<span class="hljs-built_in">back</span>()+k);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 找到了,判断work时间是否足够</span><br>                <span class="hljs-comment">// 该work时间段之后的总工作时长</span><br>                <span class="hljs-keyword">int</span> cur = total.<span class="hljs-built_in">back</span>()-total[pos];<br>                <span class="hljs-comment">// 额外加上(lt, rt)在(ls, rs)时间段内的时长 , rs &gt;= lt</span><br>                cur += <span class="hljs-built_in">min</span>(work_time[pos].y+<span class="hljs-number">1</span>, rt+<span class="hljs-number">1</span>) - <span class="hljs-built_in">max</span>(work_time[pos].x, lt);<br>                <span class="hljs-keyword">if</span>(cur &gt;= k) <span class="hljs-keyword">continue</span>;<br><br>                <span class="hljs-comment">// 工作时间不够</span><br>                k -= cur;<br>                <span class="hljs-comment">// 先填充尾部缝隙</span><br>                <span class="hljs-keyword">if</span>(work_time.<span class="hljs-built_in">back</span>().y &lt; rt)&#123;<br>                    <span class="hljs-keyword">if</span>(work_time.<span class="hljs-built_in">back</span>().y+k &gt;= rt)&#123;<br>                        k -= rt-work_time.<span class="hljs-built_in">back</span>().y;<br>                        total.<span class="hljs-built_in">back</span>() += rt-work_time.<span class="hljs-built_in">back</span>().y;<br>                        work_time.<span class="hljs-built_in">back</span>().y = rt;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        work_time.<span class="hljs-built_in">push_back</span>(&#123;rt-k+<span class="hljs-number">1</span>, rt&#125;);<br>                        total.<span class="hljs-built_in">push_back</span>(total.<span class="hljs-built_in">back</span>()+k);<br>                        k = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">// 从后向前，往work时间段缝隙里面插入新的work时间段</span><br>                <span class="hljs-keyword">while</span>(k &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">int</span> insert_pos = work_time.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>, gain = <span class="hljs-number">0</span>;<br>                    <span class="hljs-comment">// 合并两段</span><br>                    <span class="hljs-keyword">if</span>(work_time[insert_pos<span class="hljs-number">-1</span>].y + k &gt;= work_time[insert_pos].x<span class="hljs-number">-1</span>)&#123;<br>                        gain = work_time[insert_pos].x<span class="hljs-number">-1</span>-work_time[insert_pos<span class="hljs-number">-1</span>].y;<br>                        total[insert_pos<span class="hljs-number">-1</span>] = total[insert_pos]+gain;<br>                        work_time[insert_pos<span class="hljs-number">-1</span>].y = work_time[insert_pos].y;<br>                        k -= gain;<br>                        total.<span class="hljs-built_in">pop_back</span>();<br>                        work_time.<span class="hljs-built_in">pop_back</span>();<br>                    &#125;<br>                    <span class="hljs-comment">// 并入最后一段</span><br>                    <span class="hljs-keyword">else</span>&#123;<br>                        work_time[insert_pos].x -= k;<br>                        total.<span class="hljs-built_in">back</span>() += k;<br>                        k = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> total.<span class="hljs-built_in">back</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>对于a - b &lt;= k，我们会发现它类似最短路网络中的三角不等式 dj &lt;= di + wij，那是否可以通过最短路的形式解决呢？</p><p>显然是可以的，跑一遍最短路，此时最短路的答案 di 也正是原不等式组的一个解 xi。</p><p>此时，可将每个变量看成一个顶点，并设一个超级源点x0，它连向每个顶点（除了自身）且边权为 0，这时再对每一个不等式xj &lt;= xi + wij 连一条边权为 wij 的有向边，此时用xj表示超级源点到j的最短路，用 xi表示超级源点到i的最短路，由于有边&lt;i, j&gt;存在，从而有xj &lt;= xi + wij，即为原不等式的变形。</p><p>注意：等式变化为两个不等式即可。如x1 - x2 == 2变为x1 - x2 &lt;= 2和x1 - x2 &gt;= 2</p><p><strong>什么情况无解：</strong> 最短路里面有<strong>负环</strong>时无解。spfa存在负环的条件是某个点入队次数大于等于n次</p><p><a href="https://www.luogu.com.cn/problem/P5960">洛谷模板</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5050</span>, M = <span class="hljs-number">5050</span> + N;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], w[M], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>    e[tot] = v, ne[tot] = h[u], w[tot] = c, h[u] = tot ++;<br>&#125;<br><br><span class="hljs-keyword">int</span> dis[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-keyword">int</span> cnt[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dis));<br>    <span class="hljs-keyword">int</span> q[N];<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">1</span>;<br>    q[hh] = s;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(hh != tt) &#123;<br>        <span class="hljs-keyword">int</span> u = q[hh];<br>        <span class="hljs-keyword">if</span> (++hh == N) hh = <span class="hljs-number">0</span>;<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i];<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w[i]) &#123;<br>                dis[v] = dis[u] + w[i];<br>                <span class="hljs-keyword">if</span> (!vis[v]) &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q[tt] = v;<br>                    <span class="hljs-keyword">if</span> (++tt == N) tt = <span class="hljs-number">0</span>;<br>                    <span class="hljs-comment">// n+1是因为我们多了一个超级源点</span><br>                    <span class="hljs-keyword">if</span> (++cnt[v] &gt;= n+<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <span class="hljs-comment">// a - b &lt;= c</span><br>        <span class="hljs-comment">// a &lt;= b + c</span><br>        <span class="hljs-built_in">add</span>(b, a, c);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 超级源点x0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>, i, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// 有负边不能用dijkstra</span><br>    <span class="hljs-comment">// spfa</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">spfa</span>(<span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>差分约束</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql主从热备</title>
    <link href="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/"/>
    <url>/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h3 id="mysql主从热备"><a href="#mysql主从热备" class="headerlink" title="mysql主从热备"></a>mysql主从热备</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>【主库对于每一个从库创建一个I/O线程，将binlog发送给从库】</p><p>【从库建立一个I/O线程将收到的主库的binlog放到中继日志relaylog中】</p><p>【从库创建一个SQL线程执行中继日志，相当于执行跟主库相同的SQL语句来保证和主库一致】</p><p>一、主库db的更新事件(update、insert、delete)被写到二进制日志文件binlog中</p><p>二、从库发起连接，连接到主库</p><p>三、此时主库创建一个binlog dump thread线程，把binlog的内容发送到从库</p><p>四、从库启动后，也会创建一个I/O线程，读取主库传过来的binlog内容并写入到中继日志relay log中.</p><p>五、从库启动后，还会创建一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到slave的db。(重复master的sql语句)</p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211014170508406.png" alt="image-20211014170508406"></p><p>【实现主从热备mysql的版本应都高于3.2，从库的版本可以高于主库的版本，但不可以低于主库的版本。】</p><h4 id="mysql配置文件"><a href="#mysql配置文件" class="headerlink" title="mysql配置文件"></a>mysql配置文件</h4><p><code>/etc/mysql/mysql.conf.d/mysqld.conf</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <br><br><span class="hljs-comment">#### 基础设置</span><br><br><span class="hljs-comment"># 运行mysqld的用户(需在mysql组)</span><br><span class="hljs-attr">user</span>= mysql<br><br><span class="hljs-comment"># 保存mysqld进程id的文件</span><br><span class="hljs-attr">pid-file</span>= /var/run/mysqld/mysqld.pid<br><br><span class="hljs-comment"># 保存mysqld进程sock的文件</span><br><span class="hljs-attr">socket</span>= /var/run/mysqld/mysqld.sock<br><br><span class="hljs-comment"># mysql监听端口</span><br><span class="hljs-attr">port</span>= <span class="hljs-number">3306</span><br><br><span class="hljs-comment"># 表示 MySQL 数据文件的存储位置，也是数据表的存放位置</span><br><span class="hljs-attr">datadir</span>= /var/lib/mysql<br><br><span class="hljs-comment"># 临时文件保存路径(由于操作系统的/tmp空间有限,如有必要则需将tmpdir路径修改)</span><br><span class="hljs-attr">tmpdir</span>= /tmp<br><br><span class="hljs-comment"># 监听地址</span><br><span class="hljs-attr">bind-address</span>= <span class="hljs-number">192.168</span>.<span class="hljs-number">162.129</span><br><span class="hljs-attr">mysqlx-bind-address</span>= <span class="hljs-number">192.168</span>.<span class="hljs-number">162.129</span><br><br><span class="hljs-comment"># 事务隔离级别(安全性逐渐上升，效率逐渐下降)</span><br><span class="hljs-comment"># READ-UNCOMMITTED(读取未提交内容)</span><br><span class="hljs-comment"># READ-COMMITTED(读取提交内容)</span><br><span class="hljs-comment"># REPEATABLE-READ(可重读)</span><br><span class="hljs-comment"># SERIALIZABLE(可串行化)</span><br><span class="hljs-attr">transaction-isolation</span> = REPEATABLE-READ<br><br><span class="hljs-comment">#### 缓存设置</span><br><br><span class="hljs-comment"># 索引缓冲区大小</span><br><span class="hljs-attr">key_buffer_size</span>= <span class="hljs-number">16</span>M<br><br><span class="hljs-comment"># 查询缓冲区(QC)大小</span><br><span class="hljs-attr">query_cache_size</span>= <span class="hljs-number">16</span>M   <br><br><span class="hljs-comment"># 最大接受的数据包大小</span><br><span class="hljs-attr">max_allowed_packet</span>= <span class="hljs-number">64</span>M<br><br><span class="hljs-comment"># 每个连接线程被创建时，MySQL给它分配的内存大小。</span><br><span class="hljs-attr">thread_stack</span>= <span class="hljs-number">256</span>K<br><br><span class="hljs-comment"># 线程缓存数量。</span><br><span class="hljs-attr">thread_cache_size</span>       = <span class="hljs-number">16</span><br><br><span class="hljs-comment"># 自动修复MySQL的myisam表</span><br><span class="hljs-attr">myisam-recover-options</span>  = BACKUP<br><br><span class="hljs-comment"># 允许同时访问 MySQL 服务器的最大连接数。</span><br><span class="hljs-attr">max_connections</span>        = <span class="hljs-number">151</span><br><br><span class="hljs-comment"># 能够缓存的连接数量(达到max_connections后新连接被缓存，缓存数量到达back_log数量后将拒绝新连接)</span><br><span class="hljs-attr">back_log</span>    = <span class="hljs-number">10</span>                                            <br><br><span class="hljs-comment"># 所有进程打开表的总数</span><br><span class="hljs-attr">table_open_cache</span>       = <span class="hljs-number">4000</span><br><br><span class="hljs-comment">#### 日志设置</span><br><br><span class="hljs-comment"># 普通日志保存路径(性能急剧下降)</span><br><span class="hljs-attr">general_log_file</span>        = /var/log/mysql/query.log<br><br><span class="hljs-comment"># 开启普通日志</span><br><span class="hljs-comment"># general_log             = 1</span><br><br><span class="hljs-comment"># error日志文件路径</span><br><span class="hljs-attr">log_error</span> = /var/log/mysql/error.log<br><br><span class="hljs-comment"># 慢查询日志保存路径</span><br><span class="hljs-attr">slow_query_log_file</span>= /var/log/mysql/mysql-slow.log<br><br><span class="hljs-comment"># 开启慢查询日志</span><br><span class="hljs-attr">slow_query_log</span>= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 慢查询时间，超过2秒则为慢查询</span><br><span class="hljs-attr">long_query_time</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 记录没有使用索引查询的语句</span><br><span class="hljs-attr">log-queries-not-using-indexes</span>= <span class="hljs-number">1</span><br><br><span class="hljs-comment">#### 其他设置</span><br><br><span class="hljs-comment"># 表示本机的序号为1(用来标记binlog，集群内server-id要配置成不一样的序号)</span><br><span class="hljs-attr">server-id</span>= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># bin日志文件路径(从库可以不开启bin日志)</span><br><span class="hljs-attr">log_bin</span>= /var/log/mysql/mysql-bin.log<br><br><span class="hljs-comment"># bin日志过期时间</span><br><span class="hljs-attr">binlog_expire_logs_seconds</span>= <span class="hljs-number">2592000</span><br><br><span class="hljs-comment"># 单个bin日志文件的大小</span><br><span class="hljs-attr">max_binlog_size</span>   = <span class="hljs-number">100</span>M<br><br><span class="hljs-comment"># 对哪些数据库产生bin日志，默认记录所有数据库。(多个数据库则使用多条binlog_do_db)</span><br><span class="hljs-attr">binlog_do_db</span>= test<br><br><span class="hljs-comment"># 对哪些数据库不产生bin日志(多个数据库则使用多条binlog_ignore_db)</span><br><span class="hljs-comment"># binlog_ignore_db= include_database_name</span><br></code></pre></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="一、配置主库"><a href="#一、配置主库" class="headerlink" title="一、配置主库"></a>一、配置主库</h5><p>[预备] 按需修改配置文件，重新启动mysql。</p><p>1、创建用户<code>create user &#39;[name]&#39;@&#39;[addr]&#39; identified by &#39;[password]&#39;;</code></p><p><code>create user &#39;ms&#39;@&#39;%&#39; identified by &#39;ms123456&#39;;</code></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">%表示用户ms可以从在<span class="hljs-built_in">ip</span>上登陆该数据库,ms的密码是ms123456。<br></code></pre></td></tr></table></figure><p><strong>更改密码步骤：</strong></p><p><code>update user set authentication_string=&#39;&#39; where user=&#39;ms&#39;;</code></p><p><code>flush priviledges;</code></p><p><code>alter user &#39;ms&#39;@&#39;%&#39; identified with mysql_native_password by &#39;ms123456&#39;;</code></p><p>2、授权从库一个访问主库的账号<code>grant [all] on *.* to [name]@[addr] with grant option;</code></p><p><code>grant all on test.* to &#39;ms&#39;@&#39;%&#39;; </code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">all</span>表示所有权限<br>*.*表示所有库的所有表，test.*表示test库的所有表。<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>表示同时给他授权权限(套娃)。<br></code></pre></td></tr></table></figure><p>查看用户权限<code>show grants for &#39;[name]&#39;@&#39;[addr]&#39;</code></p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015120400010.png" alt="image-20211015120400010"></p><p><strong>该从库访问账户必须授予REPLICATION SLAVE权限。通常账户仅用于复制，则不需要再授予任何其它权限(推荐这样做)。</strong></p><p><strong>注意：</strong>replication权限是一个全局权限，不可以指定在某一个库上</p><p><code>grant replication slave on *.* to &#39;ms&#39;@&#39;%&#39;; </code></p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015140152803.png" alt="image-20211015140152803"></p><p>3、查看主库的状态<code>show master status;</code></p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015142237634.png" alt="image-20211015142237634"></p><h5 id="二、配置从库"><a href="#二、配置从库" class="headerlink" title="二、配置从库"></a>二、配置从库</h5><p>[预备] 按需修改配置文件，重新启动mysql。</p><p>1、执行主从同步SQL语句：<code>change master to master_host=&#39;[addr]&#39;, master_port=[port], master_user=&#39;[name]&#39;, master_password=&#39;[password]&#39;, master_log_file=&#39;[binlog_filename]&#39;, master_log_pos=[sync_start_position];</code></p><p><code>change master to master_host=&#39;192.168.162.129&#39;, master_port=3306, master_user=&#39;ms&#39;, master_password=&#39;ms123456&#39;, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=156;</code></p><p>2、重新启动slave线程<code>stop slave;reset slave;start slave;</code></p><p>3、查看从库状态<code>show slave status\G;</code></p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015142502260.png" alt="image-20211015142502260"></p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015142426109.png" alt="image-20211015142426109"></p><h5 id="三、测试同步"><a href="#三、测试同步" class="headerlink" title="三、测试同步"></a>三、测试同步</h5><p>完成配置后，在主库创建数据库test，并针对test数据库执行一系列操作。</p><p>1、主库对test库的操作</p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015143648181.png" alt="image-20211015143648181"></p><p>2、从库的变化</p><p><img src="/2021/10/15/mysql%E4%B8%BB%E4%BB%8E%E7%83%AD%E5%A4%87/image-20211015143803249.png" alt="image-20211015143803249"></p><p>mysql主从热备配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欧拉函数</title>
    <link href="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="常见的数论函数"><a href="#常见的数论函数" class="headerlink" title="常见的数论函数"></a>常见的数论函数</h4><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209092722902.png" alt="image-20211209092722902" style="zoom:50%;"><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">这<span class="hljs-number">5</span>个都是积性函数，前三个为完全积性函数。<br>积性函数是指：当x与y互质时,f<span class="hljs-comment">(x*y)</span>=f<span class="hljs-comment">(x)</span>*f<span class="hljs-comment">(y)</span>。<br>完全积性函数是指：对任意x和y,f<span class="hljs-comment">(x*y)</span>=f<span class="hljs-comment">(x)</span>*f<span class="hljs-comment">(y)</span>。<br></code></pre></td></tr></table></figure><h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p>1∼N 中与 N 互质的数的个数被称为为欧拉函数, 记为 φ(N)。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs excel">// φ(<span class="hljs-built_in">n</span>)：<span class="hljs-number">1</span>到<span class="hljs-built_in">n</span>中与<span class="hljs-built_in">n</span>互质的数的个数(模<span class="hljs-built_in">n</span>意义下该乘法群的幺元)<br>// 约定：φ(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span><br>// 对于质数p显然有：φ(p) = p-<span class="hljs-number">1</span><br>// 对于任意互质的数p、q有：φ(pq) = φ(p)φ(q)<br>// 对于质数p、q有：φ(pq) = φ(p)φ(q) = (p-<span class="hljs-number">1</span>)(q-<span class="hljs-number">1</span>)<br>// 对于质数p的m次方有：φ(p^m) = p^m - (p,<span class="hljs-number">2</span>p,<span class="hljs-number">3</span>p,...,p^m) = p^m - p^(m-<span class="hljs-number">1</span>) = p^(m-<span class="hljs-number">1</span>)(p-<span class="hljs-number">1</span>)<br>// 对于任意数<span class="hljs-built_in">n</span>有：φ(<span class="hljs-built_in">n</span>) = φ(<span class="hljs-symbol">p1</span>^(<span class="hljs-symbol">n1</span>)*<span class="hljs-symbol">p2</span>^(<span class="hljs-symbol">n2</span>)*...*pk^(nk)) = φ(<span class="hljs-symbol">p1</span>^(<span class="hljs-symbol">n1</span>))*φ(<span class="hljs-symbol">p2</span>^(<span class="hljs-symbol">n2</span>))*...*φ(pk^(nk))<br>// φ(<span class="hljs-built_in">n</span>) = <span class="hljs-symbol">p1</span>^(<span class="hljs-symbol">n1</span>-<span class="hljs-number">1</span>)(<span class="hljs-symbol">p1</span>-<span class="hljs-number">1</span>) * <span class="hljs-symbol">p2</span>^(<span class="hljs-symbol">n2</span>-<span class="hljs-number">1</span>)(<span class="hljs-symbol">p2</span>-<span class="hljs-number">1</span>) * ... * pk^(nk-<span class="hljs-number">1</span>)(pk-<span class="hljs-number">1</span>) = <span class="hljs-built_in">n</span>*(<span class="hljs-number">1</span>-<span class="hljs-number">1</span>/<span class="hljs-symbol">p1</span>)*(<span class="hljs-number">1</span>-<span class="hljs-number">1</span>/<span class="hljs-symbol">p2</span>)*...*(<span class="hljs-number">1</span>-<span class="hljs-number">1</span>/pk)<br><br>// <span class="hljs-number">1</span>∼<span class="hljs-built_in">n</span>中与<span class="hljs-built_in">n</span>互质的数的和为 <span class="hljs-built_in">n</span>∗φ(<span class="hljs-built_in">n</span>)/<span class="hljs-number">2</span>.<br>// 因为<span class="hljs-built_in">gcd</span>(<span class="hljs-built_in">n</span>,x)=<span class="hljs-built_in">gcd</span>(<span class="hljs-built_in">n</span>,<span class="hljs-built_in">n</span>−x), 所以<span class="hljs-number">1</span>∼<span class="hljs-built_in">n</span>中与<span class="hljs-built_in">n</span>互质的数是成对存在的, 共有φ(<span class="hljs-built_in">n</span>)/<span class="hljs-number">2</span> 对,每一对的和为<span class="hljs-built_in">n</span>,总和为<span class="hljs-built_in">n</span>∗φ(<span class="hljs-built_in">n</span>)/<span class="hljs-number">2</span>.<br><br>// ∑(d|<span class="hljs-built_in">n</span>) φ(d) = <span class="hljs-built_in">n</span><br>// 即∑(d|<span class="hljs-built_in">n</span>) φ(d) = id(<span class="hljs-built_in">n</span>)。该定理用莫比乌斯反演=&gt; φ(<span class="hljs-built_in">n</span>) = ∑(d|<span class="hljs-built_in">n</span>)μ(d)id(<span class="hljs-built_in">n</span>/d)<br></code></pre></td></tr></table></figure><p><strong>线性筛求法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> prime[N], tot;<br><span class="hljs-keyword">int</span> Euler[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-comment">// 利用欧拉函数是积性函数</span><br><span class="hljs-comment">// 类似筛选质数</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>Euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-comment">// 如果当前数是质数。</span><br><span class="hljs-keyword">if</span>(!vis[i]) &#123; <br>            prime[tot++] = i, <br>            Euler[i] = i<span class="hljs-number">-1</span>;  <br>        &#125;<br><span class="hljs-comment">// 否则当前数的Euler值被之前的数更新过了</span><br><br><span class="hljs-comment">// 如果i%prime[j]!=0,那么(i,prime[j])==1, 则有φ(i∗prime[j])=φ(i)∗(prime[j]−1)</span><br><span class="hljs-comment">// 该式子很容易证明</span><br>        <span class="hljs-comment">// 如果i%prime[j]==0,则φ(i∗prime[j])=φ(i)∗prime[j] </span><br>        <span class="hljs-comment">// 不如设p=prime[j], i = A*(p^m), φ(i) = φ(A*(p^m)) = φ(A)*φ(p^m) = φ(A)*(p^(m-1))*(p-1)</span><br>        <span class="hljs-comment">// φ(i*p) = φ(A*(p^(m+1))) = φ(A)*(p^m)*(p-1) = φ(i)*p。即得证</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i*prime[j] &lt;= n; j++)&#123;<br>    <span class="hljs-comment">// 更新非质数位置</span><br>vis[i*prime[j]] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<br>&#123;<br>Euler[i*prime[j]] = Euler[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>            Euler[i*prime[j]] = Euler[i]*(prime[j]<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h4><p>若a,m互质，<code>a^φ(m) ≡ 1 | m</code>。费马小定理则是m为质数时的特殊情况。</p><h4 id="莫比乌斯函数和莫比乌斯反演定理"><a href="#莫比乌斯函数和莫比乌斯反演定理" class="headerlink" title="莫比乌斯函数和莫比乌斯反演定理"></a>莫比乌斯函数和莫比乌斯反演定理</h4><p><strong>莫比乌斯函数(属于积性函数)</strong></p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/20160309190249569.png" alt="img" style="zoom: 80%;"><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/20160309190929213.png" alt="img"></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/20160309190941197.png" alt="img"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">μ<span class="hljs-comment">(1)</span>=<span class="hljs-number">1</span>。<br>当d存在一个因子为质数p的平方时,则μ<span class="hljs-comment">(d)</span>=<span class="hljs-number">0</span>。<br>否则d是不同质数的连乘积,当d是奇数个质数连乘时,μ<span class="hljs-comment">(d)</span>=<span class="hljs-number">-1</span>,当d是偶数个质数连乘时，μ<span class="hljs-comment">(d)</span>=<span class="hljs-number">1</span>。<br></code></pre></td></tr></table></figure><p><strong>莫比乌斯反演定理</strong></p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209090311997.png" alt="image-20211209090311997" style="zoom:50%;"><p><strong>线性筛求法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> prime[N], tot;<br><span class="hljs-keyword">int</span> mu[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Moblus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;<br>    <span class="hljs-comment">// 如果当前数是质数</span><br>        <span class="hljs-keyword">if</span> (!vis[i])&#123;<br>            prime[tot++] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 否则当前数的Euler值被之前的数更新过了</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i*prime[j] &lt;= n; j++)&#123;<br>            vis[i * prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>            <span class="hljs-comment">// i*prime[j]存在平方因子 prime[j]*prime[j]</span><br>                mu[i * prime[j]] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果mu[i] == 0，那么mu[i*prime[j]] == 0</span><br>            <span class="hljs-comment">// 否则i是不同质数的连乘积，i*prime[j]也是不同质数的连乘积</span><br>            <span class="hljs-comment">// 则mu[i*prime[j]] == -mu[i]</span><br>            mu[i * prime[j]] = -mu[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迪利克雷卷积"><a href="#迪利克雷卷积" class="headerlink" title="迪利克雷卷积"></a>迪利克雷卷积</h4><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211208200344799.png" alt="image-20211208200344799" style="zoom:50%;"><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><p><strong>题目解析：</strong>比如求下述式子的结果，即求：i在[1,n]范围内，j在[1,m]范围内，i和j互质的数量。 由以上分析可知，前二步中因为d整除最大公约数，所以d整除i并且d整除j。后面更换枚举方式，先枚举d【d整除i和j，1<del>gcd(i,j)】，再枚举i【i是d的几倍, 1</del>n/d】，再枚举j【j是d的几倍，1~m/d】，组合起来有n/d * m/d种方式。又 φ(d)与i、j无关，故可以把 φ(d)提到前面，如此就得到第三步。</p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209100937863.png" alt="image-20211209100937863"></p><p><strong>题目解析：</strong>再比如求下面式子的结果，所有最大公约数的和，同样的我们更换枚举方式，先枚举d【d整除i和j，1<del>gcd(i,j)】，再枚举i【i是d的几倍, 1</del>n/d】，再枚举j【j是d的几倍，1<del>m/d】。<code>gcd(i, j)</code>可以转为<code>Σ[gcd(i,j)=d]*d</code>，而 <code>gcd(i,j)=d可以转化为gcd(i/d, j/d) = 1</code>，令i = i/d, j = j/d。则i的枚举范围变为【1</del>n/d]，j的枚举范围变为【1~m/d】。此时就转化为了多个【要枚举d累加】例一的情形，i在[1,n/d]范围内，j在[1,m/d]范围内，i和j互质的数量。最后整理式子发现与例一的区别就是结果式中moblus变为了Euler【求数量变为求值的和】。</p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209100825255.png" alt="image-20211209100825255"></p><p><a href="https://www.acwing.com/problem/content/description/203/">题目链接1</a></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211208212903887.png" alt="image-20211208212903887"></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211208212923365.png" alt="image-20211208212923365"></p><p><strong>思考：</strong>没有经过任何点表示(x,y)坐标点x和y互质。因为该线的方程Y = (y/x) X，在(0,x)只经过了这一点，表示x和y不可以约分。即求哪两个数是互质的。但是该题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">int</span> prime[N], tot;<br><span class="hljs-keyword">int</span> Euler[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Phi</span><span class="hljs-params">()</span></span>&#123;<br>    Euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) prime[tot++] = i, Euler[i] = i<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i*prime[j] &lt; N; ++j)&#123;<br>            vis[i*prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j] == <span class="hljs-number">0</span>)&#123;<br>                Euler[i*prime[j]] = Euler[i]*prime[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            Euler[i*prime[j]] = Euler[i]*(prime[j]<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">// 方法一：</span><br>    <span class="hljs-comment">// 累加Euler[1]~Euler[n]</span><br>    <span class="hljs-comment">// 由对称性可得以下式子</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*<span class="hljs-built_in">accumulate</span>(Euler+<span class="hljs-number">1</span>, Euler+n+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 方法二：</span><br>    <span class="hljs-comment">// 利用莫比乌斯反演：后面的整除直接可以在前缀和中进行</span><br>    <span class="hljs-comment">// prefix[0] = 0;</span><br>    <span class="hljs-comment">// prefix[i] = prefix[i-1]+mu[i]*(n/i)*(m/i)</span><br>    <span class="hljs-comment">// return prefix[n];</span><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = <span class="hljs-number">1</span>; d &lt;= n; d ++ )&#123;<br>        res += mu[d]*(n/d)*(n/d);<br>    &#125;<br>    <span class="hljs-comment">// 还有(1,0)和(0,1)两个特殊点</span><br>    <span class="hljs-keyword">return</span> res+<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Phi</span>();<br>    <br>    <span class="hljs-keyword">int</span> T, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> idx = <span class="hljs-number">1</span>; idx &lt;= T; ++idx)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, idx, n, <span class="hljs-built_in">cal</span>(n));<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/222/">题目链接2</a></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211208212955354.png" alt="image-20211208212955354"></p><p>解法：</p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209111321824.png" alt="image-20211209111321824" style="zoom: 33%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 该题题意是求i与j的最大公约数为质数的情形</span><br><span class="hljs-comment">// i与j互质是特殊情形</span><br><span class="hljs-comment">// 但该题仍然可以转化为i与j互质的情形</span><br><span class="hljs-comment">// gcd(x,y)=p 转为 gcd(x/p, y/p)=1</span><br><br><span class="hljs-comment">// Σ(p)ΣΣ[gcd(x, y) = p]</span><br><span class="hljs-comment">// Σ(p)ΣΣ[gcd(x, y) = 1]   // 枚举上限除以p</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> prime[N], tot;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> Euler[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-comment">// 利用欧拉函数是积性函数</span><br><span class="hljs-comment">// 类似筛选质数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[i]) prime[tot++] = i, Euler[i] = i<span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果当前数是质数。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= tot &amp;&amp; i*prime[j] &lt;= n; j++)<br>&#123;<br>    <span class="hljs-comment">// 更新非质数位置</span><br>vis[i*prime[j]] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<br>&#123;<br>Euler[i*prime[j]] = Euler[i]*prime[j];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>Euler[i*prime[j]] = Euler[i]*(prime[j]<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">Phi</span>(n);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 枚举质数p，求和</span><br>    <span class="hljs-comment">// 可以在计算Euler时直接计算前缀和,不用每次都accumulate，这里只是为了方便理解。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>; d &lt; tot; ++d)&#123;<br>        <span class="hljs-keyword">int</span> cur_n = n / prime[d];<br>        res += <span class="hljs-number">2</span>*<span class="hljs-built_in">accumulate</span>(Euler+<span class="hljs-number">1</span>, Euler+cur_n+<span class="hljs-number">1</span>, <span class="hljs-number">0ll</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">// 减一是因为(1,1)重复</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/978/">题目链接3</a></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209145417757.png" alt="image-20211209145417757"></p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209145442181.png" alt="image-20211209145442181" style="zoom:50%;"><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209145508169.png" alt="image-20211209145508169"></p><p><img src="/2021/10/11/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/image-20211209145523137.png" alt="image-20211209145523137"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">// 互质的数,gcd(x,y)==1表示该线上只有一个点(不包含原点),能量损失1===&gt;2*1-1</span><br><span class="hljs-comment">// gcd(x,y)==d表示该线上共有d个点(不包含原点),能量损失2*(d-1)+1===&gt;2*d-1</span><br><span class="hljs-comment">// 题意即为:求i在[1,n],j在[1,m]内所有点2*d-1的和</span><br><span class="hljs-comment">// 2ΣΣgcd(i,j) - m*n</span><br><br><span class="hljs-comment">// 为什么gcd(x,y)表示直线 Y = y/x * X上的正点数？</span><br><span class="hljs-comment">// 最大公约数d意味着d|y并且d|x，也就是说y能分成d份，x也能分成d份。【长方形等分为d*d的网格】</span><br><span class="hljs-comment">// 相等等分点恰好在该直线上:(x/d,y/d),(x/d*2,y/d*2),...,(x/d*d,y/d*d)</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> prime[N], tot;<br><span class="hljs-keyword">int</span> Euler[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    Euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            prime[tot++] = i;<br>            Euler[i] = i<span class="hljs-number">-1</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i*prime[j] &lt;= n; ++j)&#123;<br>            vis[i*prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j] == <span class="hljs-number">0</span>)&#123;<br>                Euler[i*prime[j]] = Euler[i]*prime[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            Euler[i*prime[j]] = Euler[i]*(prime[j]<span class="hljs-number">-1</span>);<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-built_in">Phi</span>(<span class="hljs-built_in">max</span>(n, m));<br>    <br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d = <span class="hljs-number">1</span>; d &lt;= <span class="hljs-built_in">min</span>(n, m); ++d)&#123;<br>        res += <span class="hljs-number">1ll</span>*Euler[d]*(n/d)*(m/d);<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">2</span>*res-m*n);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LVS+keepalived</title>
    <link href="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="LVS-Linux-Virtual-Server"><a href="#LVS-Linux-Virtual-Server" class="headerlink" title="LVS = Linux Virtual Server"></a>LVS = Linux Virtual Server</h3><p>(Linux虚拟服务器) </p><p>LVS集群采用IP负载均衡技术和基于内容请求分发技术。调取器具有很好的吞吐率，将请求均衡的转移到不同的服务器执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能，高可用的虚拟服务器。</p><p>linux内核支持LVS功能模块。也就是说，LVS是内核提供的一个功能模块。</p><p>apt install ipvsadm。使用ipvsadm命令(ipvs的管理器)来管理LVS，如果安装了keepalive，则可以通过keepalive的配置文件来管理LVS。</p><h4 id="相关简称"><a href="#相关简称" class="headerlink" title="相关简称"></a>相关简称</h4><p>DS：Director Server。前端负载均衡器节点。</p><p>RS：Real Server。后端真实的工作服务器。</p><p>VIP：向外部直接面向用户请求，作为用户请求的目标的IP地址。</p><p>DIP：Director Server IP，主要用于和内部主机通讯的IP地址。</p><p>RIP：Real Server IP，后端服务器的IP地址。</p><p>CIP：Client IP，访问客户端的IP地址</p><h4 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h4><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p>将请求报文中的目标地址和目标端口修改为某挑RS的RIP和PORT实现转发。</p><p><em>路由</em></p><p>1、当用户请求到达DS，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP</p><p>2、PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</p><p>3、IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP</p><p>4、POSTROUTING链通过选路，将数据包发送给RS</p><p>5、RS比对发现目标为自己的IP，开始构建响应报文发回给DS。 此时报文的源IP为RIP，目标IP为CIP</p><p>6、DS在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011170126020.png" alt="image-20211011170126020"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011165436840.png" alt="image-20211011165436840"></p><p><em>特性</em></p><p>1、RS应该和DIP应该使用私网地址，且RS的网关要指向DIP；</p><p>2、<b>请求和响应报文都要经由DS转发；极高负载的场景中，DS可能会成为系统瓶颈</b>；</p><p>3、支持端口映射；</p><p>4、RS可以使用任意OS；</p><p>5、RS的RIP和DS的DIP必须在同一IP网络；</p><p><em>缺陷</em></p><p>1、对DS压力会比较大，请求和响应都需经过DS</p><h4 id="DR"><a href="#DR" class="headerlink" title="DR"></a>DR</h4><p>(为了解决RS回送给Client的报文全部要经过DS而造成DS成为该系统的瓶颈，想一个办法使得RS可以直接给Client回送报文)</p><p>为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是某挑选出的RS的RIP所在接口的MAC地址；源IP/PORT，以及目标IP/PORT均保持不变。</p><p><em>路由</em></p><p>1、当用户请求到达DS，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP</p><p>2、PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</p><p>3、 IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源MAC地址修改为DIP的MAC地址，将目标MAC地址修改RIP的MAC地址，然后将数据包发至POSTROUTING链。 此时的源IP和目的IP均未修改，仅修改了源MAC地址为DIP的MAC地址，目标MAC地址为RIP的MAC地址</p><p>4、 由于DS和RS在同一个网络中，所以是通过二层来传输。POSTROUTING链检查目标MAC地址为RIP的MAC地址，那么此时数据包将会发至RS。(RS知道VIP，所以直接修改IP源为VIP)</p><p>5、 RS发现请求报文的MAC地址是自己的MAC地址，就接收此报文。处理完成之后，将响应报文通过lo接口传送给eth0网卡然后向外发出。 此时的源IP地址为VIP，目标IP为CIP</p><p>6、 响应报文最终送达至客户端</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011170617265.png" alt="image-20211011170617265"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011171431518.png" alt="image-20211011171431518"></p><p><em>特性</em></p><p>1、确保前端路由器将目标IP为VIP的请求报文发往DS：</p><p>(a) 在前端网关做静态绑定；</p><p>(b) 在RS上使用arptables；</p><p>(c) 在RS上修改内核参数以限制arp通告及应答级别；</p><hr><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs tex">修改RS上内核参数（arp<span class="hljs-built_in">_</span>ignore和arp<span class="hljs-built_in">_</span>announce）将RS上的VIP配置在lo接口的别名上，并限制其不能响应对VIP地址解析请求(RS的VIP对外隐藏，对内可见)。<br><br>配置【每一台RS】的VIP：<br>RS &lt;====&gt; Client<br>ifconfig lo:0 192.168.162.100 netmask 255.255.255.255（配置RS的VIP，不对外响应）<br>route add -host 192.168.162.100 dev lo:0 （添加访问本地VIP的主机路由，报文目标IP为192.168.162.100的接口为lo:0。[arp<span class="hljs-built_in">_</span>ignore=1，接收到arp的网卡地址和该arp请求的网卡地址一样]DS将数据包通过链路层发送给了RS，RS的lo:0[只有lo:0的IP地址和该arp请求的网卡地址一样，故只有lo:0响应了arp]接收到了此包。回复该数据包时,[arp<span class="hljs-built_in">_</span>announce=2, 以发送网卡的IP地址作为源IP发送arp]将回复数据包的源IP设为lo:0的IP，目的IP设置为Client的IP，故RS将该数据包直接发送给了Client）<br><br><br>arp<span class="hljs-built_in">_</span>ignore参数的作用是控制系统在收到外部的arp请求时，是否要返回arp响应。<br>arp<span class="hljs-built_in">_</span>ignore参数常用的取值主要有0、1、2。3~8较少用到：<br>0：响应任意网卡上接收到的对本机IP地址的arp请求,而不管该目的IP是否在接收网卡上。[接收到arp的网卡地址和该arp请求的网卡地址在同一台计算机上]<br>1：只响应目的IP地址为接收网卡上的本地地址的arp请求。[接收到arp的网卡地址和该arp请求的网卡地址一样]<br>2：只响应目的IP地址为接收网卡上的本地地址的arp请求,并且arp请求的源IP必须和接收网卡同网段。[接收到arp的网卡地址和该arp请求的网卡地址一样，并且该arp请求的源IP跟接收到该arp请求的网卡的IP在同一个网段]<br><br>arp<span class="hljs-built_in">_</span>announce的作用是控制系统在对外发送arp请求时，如何选择arp请求数据包的源IP地址。<br>arp<span class="hljs-built_in">_</span>announce参数常用的取值有0、1、2。<br>0：允许使用任意网卡上的IP地址作为arp请求的源IP，通常就是使用数据包的源IP。[以本机上任意网卡的IP地址作为源IP发送arp]<br>1：尽量避免使用不属于该发送网卡子网的本地地址作为发送arp请求的源IP地址。[尽量以发送网卡的IP地址作为源IP发送arp]<br>2：忽略IP数据包的源IP地址，选择该发送网卡上最合适的本地地址作为arp请求的源IP地址。[以发送网卡的IP地址作为源IP发送arp]<br><br>DR模式下，每个RS节点都要在环回网卡上绑定虚拟服务IP。这时候，如果客户端对于VIP的arp请求广播到了各个真实服务器节点，如果arp<span class="hljs-built_in">_</span>ignore参数配置为0，则各RS节点都会响应该arp请求，此时客户端就无法正确获取LVS节点上正确的VIP所在网卡的MAC地址。假如某个RS节点A的网卡eth1响应了该arp请求，客户端把A节点的eth1网卡的MAC地址误认为是LVS节点的VIP所在网卡的MAC，从而将业务请求消息直接发到了A节点的eth1网卡。这时候虽然因为A节点在环回网卡上也绑定了VIP，所以A节点也能正常处理请求，业务暂时不会受到影响。但时此时由于客户端请求没有发到LVS的VIP上，所以LVS的负载均衡能力没有生效。造成的后果就是，A节点一直在单节点运行，业务量过大时可能会出现性能瓶颈。<br>所以DR模式下要求arp<span class="hljs-built_in">_</span>ignore参数要求配置为1。<br><br>每个机器或者交换机中都有一张arp表，该表用于存储对端通信节点IP地址和MAC地址的对应关系。当收到一个未知IP地址的arp请求，就会再本机的arp表中新增对端的IP和MAC记录；当收到一个已知IP地址（arp表中已有记录的地址）的arp请求，则会根据arp请求中的源MAC刷新自己的arp表。<br>如果arp<span class="hljs-built_in">_</span>announce参数配置为0，则网卡在发送arp请求时，可能选择的源IP地址并不是该网卡自身的IP地址，这时候收到该arp请求的其他节点或者交换机上的arp表中记录的该网卡IP和MAC的对应关系就不正确，可能会引发一些未知的网络问题，存在安全隐患。<br>所以DR模式下要求arp<span class="hljs-built_in">_</span>announce参数要求配置为2<br><br>更改方式：<br>1、更改arp<span class="hljs-built_in">_</span>ignore和arp<span class="hljs-built_in">_</span>announce文件<br>不能直接用vim编辑arp<span class="hljs-built_in">_</span>ignore和arp<span class="hljs-built_in">_</span>announce文件,使用重定向来向文件中输入字符<br>echo 1 &gt;/proc/sys/net/ipv4/conf/lo/arp<span class="hljs-built_in">_</span>ignore<br>echo 2 &gt;/proc/sys/net/ipv4/conf/lo/arp<span class="hljs-built_in">_</span>announce<br>echo 1 &gt;/proc/sys/net/ipv4/conf/all/arp<span class="hljs-built_in">_</span>ignore<br>echo 2 &gt;/proc/sys/net/ipv4/conf/all/arp<span class="hljs-built_in">_</span>announce<br>2、修改系统变量/etc/sysctl.conf文件，然后用命令sysctl -p刷新到内存。<br>net.ipv4.conf.all.arp<span class="hljs-built_in">_</span>ignore=1<br>net.ipv4.conf.lo.arp<span class="hljs-built_in">_</span>ignore=1<br>net.ipv4.conf.all.arp<span class="hljs-built_in">_</span>announce=2<br>net.ipv4.conf.lo.arp<span class="hljs-built_in">_</span>announce=2<br>3、使用命令sysctl -w直接写入内存：<br>sysctl -w net.ipv4.conf.all.arp<span class="hljs-built_in">_</span>ignore=1<br>sysctl -w net.ipv4.conf.lo.arp<span class="hljs-built_in">_</span>ignore=1<br>sysctl -w net.ipv4.conf.all.arp<span class="hljs-built_in">_</span>announce=2<br>sysctl -w net.ipv4.conf.lo.arp<span class="hljs-built_in">_</span>announce=2<br><br><br>配置DS的VIP:<br>ifconfig ens33:0 192.168.162.100 netmask 255.255.255.0 （配置DS的VIP）<br>echo 1 &gt;/proc/sys/net/ipv4/ip<span class="hljs-built_in">_</span>forward （开启路由转发功能，ens33:0。出于安全考虑，Linux系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将包发往本机另一网卡，该网卡根据路由表继续发送数据包。这通常就是路由器所要实现的功能。）<br><br>配置DS调度器<br>ipvsadm -A -t 192.168.162.100:80 -s rr<br>ipvsadm -a -t 192.168.162.100:80 -r 192.168.162.129 -g (可通过-w来设置权重, 默认-w 1)<br>ipvsadm -a -t 192.168.162.100:80 -r 192.168.162.130 -g (可通过-w来设置权重, 默认-w 1)<br></code></pre></td></tr></table></figure><hr><p>2、RS的RIP可以使用私网地址，也可以是公网地址；RIP与DIP在同一IP网络；RIP的网关不能指向DIP，以确保响应报文不会经由DS；</p><p>3、RS跟Director要在同一个物理网络；</p><p>4、请求报文要经由DS，但响应不能经由DS，而是由RS直接发往Client；</p><p>5、不支持端口映射；</p><p><em>缺陷</em></p><p>1、RS和DS必须在同一局域网内</p><h4 id="TUN"><a href="#TUN" class="headerlink" title="TUN"></a>TUN</h4><p>在原有的IP报文外再次封装多一层IP首部，内部IP首部(源地址为CIP，目标IIP为VIP)，外层IP首部(源地址为DIP，目标IP为RIP)</p><p><em>路由</em></p><p>1、当用户请求到达DS，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP 。</p><p>2、 PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</p><p>3、IPVS比对数据包请求的服务是否为集群服务，若是，在请求报文的首部再次封装一层IP报文，封装源IP为为DIP，目标IP为RIP。然后发至POSTROUTING链。 此时源IP为DIP，目标IP为RIP</p><p>4、 POSTROUTING链根据最新封装的IP报文，将数据包发至RS（隧道传输）。 此时源IP为DIP，目标IP为RIP</p><p>5、 RS接收到报文后发现是自己的IP地址，就将报文接收下来，拆除掉最外层的IP后，会发现里面还有一层IP首部，而且目标是自己的lo接口VIP，那么此时RS开始处理此请求，处理完成之后，通过lo接口送给eth0网卡，然后向外传递。 此时的源IP地址为VIP，目标IP为CIP</p><p>6、响应报文最终送达至客户端</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011172926837.png" alt="image-20211011172926837"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211011171854193.png" alt="image-20211011171854193"></p><p><em>特性</em></p><p>1、DIP, VIP, RIP都应该是公网地址；</p><p>2、RS的网关不能，也不可能指向DIP；</p><p>3、请求报文要经由Director，但响应不能经由Director；</p><p>4、不支持端口映射；</p><p>5、RS的OS得支持隧道功能；</p><p><em>缺陷</em></p><p>1、隧道模式的RS节点需要合法IP，这种方式需要所有的服务器均支持“IP Tunneling”。</p><h4 id="常用调度算法"><a href="#常用调度算法" class="headerlink" title="常用调度算法"></a>常用调度算法</h4><p>• <strong>轮询（Round Robin）</strong></p><p>将收到的访问请求按照顺序轮流分配给群集中的各节点（真实服务器），均等地对待每一台服务器，而不是服务器实际的连接数和系统负载</p><p>• <strong>加权轮询（Weighted Round Robin）</strong></p><p>根据调度设置的权重值来分发请求，权重值高的节点优先获得任务，分配的请求数越多</p><p>保证性能强的服务器承担更多的访问流量</p><p>• <strong>最少连接 （Least Connections）</strong></p><p>根据真实服务器已建立的连接进行分配，将收到的访问请求优先分配给连接数最少的节点</p><p>• <strong>加权最少连接（Weighted Least Connections）</strong></p><p>在服务器节点的性能差异较大时，可以为真实服务器自动调整权重</p><p>性能较高的节点承担更大比例的活动连接负载</p><h4 id="DR配置示例"><a href="#DR配置示例" class="headerlink" title="DR配置示例"></a>DR配置示例</h4><h5 id="使用ipvsadm"><a href="#使用ipvsadm" class="headerlink" title="使用ipvsadm"></a>使用ipvsadm</h5><p><code>apt install ipvsadm</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tex">ipvsadm 工具选项说明：<br>-A：添加虚拟服务器<br>-D：删除整个虚拟服务器<br>-s：指定负载调度算法（轮询：rr、加权轮询：wrr、最少连接：lc、加权最少连接：wlc）<br>-a：表示添加真实服务器（节点服务器）<br>-d：删除某一个节点<br>-t：指定 VIP地址及 TCP端口<br>-r：指定 RIP地址及 TCP端口<br>-m：表示使用 NAT群集模式<br>-g：表示使用 DR模式<br>-i：表示使用 TUN模式<br>-w：设置权重（权重为 0 时表示暂停节点）<br>-p 60：表示保持长连接60秒<br>-l：列表查看 LVS 虚拟服务器（默认为查看所有）<br>-n：以数字形式显示地址、端口等信息，常与“-l”选项组合使用。ipvsadm -ln<br></code></pre></td></tr></table></figure><p>一、配置RS</p><p>配置第一个RS (192.168.162.129)</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012134222185.png" alt="image-20211012134222185"></p><p>同理配置第二个RS (192.168.162.130)</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012134440462.png" alt="image-20211012134440462"></p><p>二、配置DS (192.168.162.128)</p><p>1、配置VIP</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012134759615.png" alt="image-20211012134759615"></p><p>2、开启路由转发功能</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012135009851.png" alt="image-20211012135009851"></p><p>3、配置LVS</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012135335140.png" alt="image-20211012135335140"></p><p>三、测试</p><p>分别在RS中部署nginx服务器，Client使用postman请求VIP看能否得到响应。</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012135707422.png" alt="image-20211012135707422"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012135725098.png" alt="image-20211012135725098"></p><p>成功！Client以轮询方式获取到了两台RS中的nginx页面。（注意Connection: close不要持久连接）</p><p>Client开启持久连接后，通过netstat -natp查看DS和RS的tcp连接情况, 可以看到Client和某一个RS建立了tcp连接，DS只负责IP层的转发因而不与Client建立连接。</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211012140309877.png" alt="image-20211012140309877"></p><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><p><code>apt install keepalived</code></p><p>上述设计存在<b>单点故障</b>，比如某个RS已经挂了，那么一部分负载给该RS的数据包就相当于丢失了。再比如DS挂了，那么整个系统直接瘫痪了。</p><p>使用<b>keepalived来实现高可用(HA)</b>： Keekpalived通过<code>vrrp</code>协议(<code>Virtual Router Redundancy Protocol</code>)实现。</p><p><strong>注意：</strong>DS的时间需要统一。一些可能有用的<a href="https://www.cnblogs.com/haoworld/p/nginxlvskeepalivednginx-shi-xian-gao-xing-neng-fu-.html">信息</a></p><hr><p>如果在没有部署VRRP之前，两台互相备份和负载分担的设备就存在2个不同的IP地址，都可以充当某个集群的网关，而他们又没有很好的检测机制来判断目前网关是否出故障，从而方便的进行切换。如果没有VRRP之前，则只能通过人工进行修改。这个工作量是非常巨大的。特别是在大型网络当中，非常不实际。</p><p>所以，VRRP解决的问题就是，通过VRRP技术协商，虚拟一个IP地址出来（VRRP可能直接使用某个接口地址），这样做的好处就是，备用设备只需要定义VRRP虚拟的那个IP地址作为网关即可，当主设备故障出现故障后，会自动切换到备用上面，从而对客户来说是透明的。</p><p> 在一个一主多备的Keepalived集群中，priority值最大的将成为集群中的Master节点，而其他都是Backup节点。在Master节点发生故障后，Backup节点之间将进行“民主选举”，<b>通过对节点优先级值priority和weight的计算，选出新的MASTER节点</b>接管集群服务。</p><hr><h4 id="keepalived作用"><a href="#keepalived作用" class="headerlink" title="keepalived作用"></a>keepalived作用</h4><p>1、管理VIP(管理LVS)：即存在主备分发器(主备DS)，当主分发器挂掉时，VIP自动转移到备分发器上，这时备分发器作为新的主分发器。当主分发器修复后，由于主分发器比备分发器的优先级高，故VIP又会从备分发器转移到原先的主分发器上。</p><p>2、对LVS集群节点做健康检查：在Keepalived服务正常工作时，<b>Master节点会不断地向Backup节点发送（组播的方式）心跳消息 (VRRP 报文)，用以告诉Backup节点自己还处于健康状态</b>，当Master节点发生故障时，就无法发送心跳消息，Backup节点无法检测到来自Master节点心跳了，于是调用自身的接管程序，接管Master节点的IP资源及服务，转为Master角色。而当Master节点恢复时，Backup节点又会释放Master节点故障时自身接管的IP资源及服务，恢复到原来的Backup角色。</p><p>3、对RS集群节点做健康检查：keepalived会定期访问RS（常用的方式包括<strong>tcp_check</strong> <strong>和http_get</strong>），看是否正常。如果不正常，则剔除该RS。</p><h4 id="keepalived工作方式"><a href="#keepalived工作方式" class="headerlink" title="keepalived工作方式"></a>keepalived工作方式</h4><p>1、抢占式</p><p>直接设置某个DS为Master角色，其他DS为Backup角色。当Master角色恢复成健康状态后直接抢占当前暂任Master的Backup角色的IP资源及服务，继续担任Master角色，而暂任Master的Backup则恢复成Backup角色。</p><p>2、非抢占式</p><p>没有主从之分，所有DS均为Backup，并且要在所有DS中keepalived配置nopreempt来标志非抢占式。</p><h4 id="keepalived健康检查方式"><a href="#keepalived健康检查方式" class="headerlink" title="keepalived健康检查方式"></a>keepalived健康检查方式</h4><p>• <strong>TCP_CHECK：</strong>工作在第4层，keepalived向RS发起一个tcp连接请求，如果RS没有响应或超时，那么这个RS将从服务器池中移除。</p><p>• <strong>HTTP_GET：</strong>工作在第5层，向指定的URL执行http请求，将得到的结果用md5加密并与指定的md5值比较看是否匹配，不匹配则从服务器池中移除；此外还可以指定http返回码来判断检测是否成功。HTTP_GET可以指定多个URL用于检测，这个一台服务器有多个虚拟主机的情况下比较好用。</p><p>• <strong>SSL_GET：</strong>跟上面的HTTP_GET相似，不同的只是用SSL连接</p><p>• <strong>MISC_CHECK：</strong>用脚本来检测，脚本如果带有参数，需将脚本和参数放入双引号内。脚本的退出值(exit 0;)需为：<code>0: 检测成功。1: 检测失败，将从服务器池中移除。2－255: 检测成功。</code>如果定义了字段misc_dynamic，表示当故障时将RS权重改为返回值减去2。如返回值为51，该RS权重自动调整为49。</p><p>• <strong>SMTP_CHECK：</strong>检测邮件服务</p><h4 id="keepalived配置文件模板"><a href="#keepalived配置文件模板" class="headerlink" title="keepalived配置文件模板"></a>keepalived配置文件模板</h4><p>一些帮助信息：</p><p>1、<code>man 5 keepalived.conf</code>2、<a href="https://blog.51cto.com/wangaimin/2465827">博客</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">解释一下：<br><span class="hljs-number">1</span>是普通的命令<br><span class="hljs-number">2</span>是系统调用,如open,write之类的(通过这个，至少可以很方便的查到调用这个函数，需要加什么头文件)<br><span class="hljs-number">3</span>是C库函数,如printf,fread<br><span class="hljs-number">4</span>是特殊文件,也就是/dev下的各种设备文件<br><span class="hljs-number">5</span>是指文件的格式,比如passwd, 就会说明这个文件中各个字段的含义<br><span class="hljs-number">6</span>是给游戏留的,由各个游戏自己定义<br><span class="hljs-number">7</span>是附件还有一些变量,比如向environ这种全局变量在这里就有说明<br><span class="hljs-number">8</span>是系统管理用的命令,这些命令只能由root使用,如ifconfig<br></code></pre></td></tr></table></figure><p>Master的/etc/keepalived/keepalived.conf文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-params">#</span> 全局定义模块<br>! Configuration File for keepalived<br><br>global<span class="hljs-built_in">_</span>defs &#123;<br>  notification<span class="hljs-built_in">_</span>email &#123;<br>    acassen@firewall.loc<br>    failover@firewall.loc<br>    sysadmin@firewall.loc              <span class="hljs-params">#</span> 邮件报警，可以不设置，后期nagios统一监控。<br>  &#125;<br>  <br>  notification<span class="hljs-built_in">_</span>email<span class="hljs-built_in">_</span>from Alexandre.Cassen@firewall.loc<br>  <br>  smtp<span class="hljs-built_in">_</span>server 192.168.162.128<br>  <br>  smtp<span class="hljs-built_in">_</span>connect<span class="hljs-built_in">_</span>timeout 30<br>  <br>  router<span class="hljs-built_in">_</span>id LVS<span class="hljs-built_in">_</span>DEVEL                  <span class="hljs-params">#</span> 此处注意router<span class="hljs-built_in">_</span>id为负载均衡标识。【本服务器的名称，备份组内唯一】<br>  <br>  vrrp<span class="hljs-built_in">_</span>skip<span class="hljs-built_in">_</span>check<span class="hljs-built_in">_</span>adv<span class="hljs-built_in">_</span>addr<br>  <br>  <span class="hljs-params">#</span> vrrp<span class="hljs-built_in">_</span>strict                          <span class="hljs-params">#</span> 严格遵守VRRP协议。【未验证！==&gt;若包含字段vrrp<span class="hljs-built_in">_</span>strict则下列情况将会阻止启动Keepalived：1. 没有VIP地址。2. 单播。3. 在VRRP版本2中有IPv6地址。】<br>  <br>  vrrp<span class="hljs-built_in">_</span>garp<span class="hljs-built_in">_</span>interval 0.001             <span class="hljs-params">#</span> 免费ARP的通告间隔用于IPV4<br>  <br>  vrrp<span class="hljs-built_in">_</span>gna<span class="hljs-built_in">_</span>interval 0.000001           <span class="hljs-params">#</span> 免费NA的通告间隔用于IPV6<br>&#125;<br><br><br><span class="hljs-params">#</span> VRRP实例定义块<br>vrrp<span class="hljs-built_in">_</span>instance VI<span class="hljs-built_in">_</span>1 &#123;<br>    state MASTER                <span class="hljs-params">#</span> 状态只有MASTER和BACKUP两种，并且要大写，MASTER为工作状态，BACKUP是备用状态。<br>    <br>    interface ens33   <span class="hljs-params">#</span> 承载VIP地址的物理接口<br>    <br>    lvs<span class="hljs-built_in">_</span>sync<span class="hljs-built_in">_</span>daemon<span class="hljs-built_in">_</span>interface ens33    <span class="hljs-params">#</span> DS之间的心跳监控接口(DR模式中同interface)。<br>        <br>    virtual<span class="hljs-built_in">_</span>router<span class="hljs-built_in">_</span>id 55               <span class="hljs-params">#</span> 虚拟路由标识，同一个vrrp<span class="hljs-built_in">_</span>instance的MASTER和BACKUP的虚拟路由标识是一致的。【服务分区,每一个vrrp<span class="hljs-built_in">_</span>instance对应一个服务】<br>    <br>    priority 100                       <span class="hljs-params">#</span> 优先级，同一个vrrp<span class="hljs-built_in">_</span>instance的MASTER优先级必须比BACKUP高。<br>    <br>    advert<span class="hljs-built_in">_</span>int 1                       <span class="hljs-params">#</span> MASTER与BACKUP之间同步检查的时间间隔，单位为秒。(组播信息发送间隔，两个节点设置必须一样，默认 1s)<br>    <br>    authentication &#123;<br>        auth<span class="hljs-built_in">_</span>type PASS                 <span class="hljs-params">#</span> 验证authentication。包含验证类型和验证密码。类型主要有PASS、AH 两种，通常使用的类型为PASS。<br>        <br>auth<span class="hljs-built_in">_</span>pass 1407                 <span class="hljs-params">#</span> 此密码最多只支持八位数，最好不要有特殊字符、汉字。验证密码为明文，同一vrrp 实例MASTER 与BACKUP 使用相同的密码才能正常通信。<br>    &#125;<br>    <br>    virtual<span class="hljs-built_in">_</span>ipaddress &#123;                <span class="hljs-params">#</span> VIP,可以有多个地址，每个地址占一行，不需要子网掩码，同时这个ip必须与我们在RS设定的vip一致！<br>        192.168.162.100 dev ens33 label ens33:0<br>        <span class="hljs-params">#</span> 192.168.162.101<br>        <span class="hljs-params">#</span> 192.168.162.102<br>    &#125;<br>&#125;<br><br><br><span class="hljs-params">#</span> 虚拟服务器定义块<br>virtual<span class="hljs-built_in">_</span>server 192.168.162.100 80 &#123;   <span class="hljs-params">#</span> VIP，来源于上面的VIP地址，后面加空格加端口号<br>    delay<span class="hljs-built_in">_</span>loop 6                      <span class="hljs-params">#</span> 健康检查间隔，单位为秒<br>    <br>    lb<span class="hljs-built_in">_</span>algo rr                        <span class="hljs-params">#</span> 负载均衡调度算法，一般用wrr、rr、wlc<br>    <br>    lb<span class="hljs-built_in">_</span>kind DR                        <span class="hljs-params">#</span> 负载均衡转发规则。一般包括DR,NAT,TUN 3种。<br>    <br>    persistence<span class="hljs-built_in">_</span>timeout 0             <span class="hljs-params">#</span> 会话保持时间(秒)，在该时间段内同一IP连接会被分配到同一台服务器。【不然用户可能刚在服务器1上提交完帐号密码，就跳转到另一台服务器2上了】【经测试! ==&gt; 若该选项不为0，则rr算法没用按照预想的方式切换RS，每次都负载到了同一个RS上】<br>    <br>    protocol TCP                      <span class="hljs-params">#</span> 转发协议，有TCP和UDP两种。<br><br>    real<span class="hljs-built_in">_</span>server 192.168.162.129 80 &#123;  <span class="hljs-params">#</span> RS，包括IP和端口号<br>        weight 1                      <span class="hljs-params">#</span> 权重<br>        <br>        TCP<span class="hljs-built_in">_</span>CHECK &#123;                   <span class="hljs-params">#</span> 通过tcp<span class="hljs-built_in">_</span>check判断RS的健康状态<br>            connect<span class="hljs-built_in">_</span>timeout 3         <span class="hljs-params">#</span> 连接超时时间<br>            retry 3              <span class="hljs-params">#</span> 重连次数<br>            delay<span class="hljs-built_in">_</span>before<span class="hljs-built_in">_</span>retry 3      <span class="hljs-params">#</span> 重连时间间隔<br>            connect<span class="hljs-built_in">_</span>port 80           <span class="hljs-params">#</span> 检测端口<br>        &#125;<br>        <br><br>        HTTP<span class="hljs-built_in">_</span>GET &#123;  <span class="hljs-params">#</span> 通过http<span class="hljs-built_in">_</span>get判断RS的健康状态<br>            url &#123;<br>                path /<br>                status<span class="hljs-built_in">_</span>code 200       <span class="hljs-params">#</span> 返回状态码<br>            &#125;<br>            connect<span class="hljs-built_in">_</span>timeout 3         <span class="hljs-params">#</span> 连接超时时间<br>            retry 3              <span class="hljs-params">#</span> 重连次数<br>            delay<span class="hljs-built_in">_</span>before<span class="hljs-built_in">_</span>retry 3      <span class="hljs-params">#</span> 重连时间间隔<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-params">#</span> 其实配置文件中主要要修改的选项没有很多，有三个参数要注意<br><span class="hljs-params">#</span> route<span class="hljs-built_in">_</span>id  XXX                       <span class="hljs-params">#</span> MASTER和BACKUP不同<br><span class="hljs-params">#</span> virtual<span class="hljs-built_in">_</span>router<span class="hljs-built_in">_</span>id 51                <span class="hljs-params">#</span> 同一个实例下，MASTER和BACKUP相同<br><span class="hljs-params">#</span> priority 100                        <span class="hljs-params">#</span> 优先级，同一个实例下，MASTER高于BACKUP<br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>对于RS，均按照上述ipvsadm中所述配置。</p><p>对于DS中的Master使用上述配置文件；Backup也使用上述文件，但是将state设置为BACKUP，将priority设置为50。</p><p>接下来，测试DS的MASTER, BACKUP模式(即抢占模式)。先开启BACKUP，然后开启MASTER：</p><p><strong>BACKUP：</strong>Backup开启后首先是进入了Backup状态，然后组播自己的priority，由于目前该Backup具有最高的priority，故当前Backup成为了新的Master。后来，真正的Master开启，该Backup收到了具有更大priority的组播信息，于是让出IP资源和服务，重新回到Backup状态，VIP被down掉(IP漂移)，因为只有Master才真正具有VIP。</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211013164844754.png" alt="image-20211013164844754"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211013171155821.png" alt="image-20211013171155821"></p><p><strong>MASTER：</strong>Master开启后首先是进入了Backup状态，然后组播自己的priority，最后理所应当的成为了新的Master。</p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211013164908386.png" alt="image-20211013164908386"></p><p><img src="/2021/10/11/LVS+keepalived%E9%85%8D%E7%BD%AE/image-20211013171339810.png" alt="image-20211013171339810"></p><h4 id="keepalived脑裂"><a href="#keepalived脑裂" class="headerlink" title="keepalived脑裂"></a>keepalived脑裂</h4><p>脑裂（split-brain) 是指在一个高可用（HA）系统中，当联系着的两个节点断开联系时，本来为一个整体的系统，分裂为两个独立节点，这时两个节点开始争抢共享资源，结果会导致系统混乱，数据损坏。</p><p>对于无状态服务的HA，无所谓脑裂不脑裂；但对有状态服务(比如MySQL)的HA，必须要严格防止脑裂。</p><p>可能的解决方式：</p><p>1、当LVS使用DR工作模式时，由于DS和RS在同一个局域网下，故而所有DS也应该在用一个局域网下。这个工作模式下，可以为DS编写shell脚本用来循环ping该DS的网关，如果连续失败一定次数则关闭该DS的keepalived服务，当发现能ping通时再来重启keepalived服务。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>负载均衡</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多重背包的单调队列优化</title>
    <link href="/2021/10/10/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96/"/>
    <url>/2021/10/10/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="多重背包单调队列优化"><a href="#多重背包单调队列优化" class="headerlink" title="多重背包单调队列优化"></a>多重背包单调队列优化</h3><p>这是<a href="https://www.acwing.com/problem/content/description/6/">题目链接</a></p><p><img src="/2021/10/10/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96/image-20211010193944026.png" alt="image-20211010193944026"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">20010</span>;<br><br><span class="hljs-keyword">int</span> n, maxv;<br><br><span class="hljs-keyword">int</span> v[N], w[N], c[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;maxv);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, v+i, w+i, c+i);<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> f[N];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <br>    <span class="hljs-comment">// 一般做法 O(n*V*C) ==&gt; O(n*logC*V)</span><br>    <span class="hljs-comment">// for (int i = 0; i &lt; n; i ++ )&#123;</span><br>    <span class="hljs-comment">//     // 枚举体积</span><br>    <span class="hljs-comment">//     for(int j = maxv; j &gt;= v[i]; j--)&#123;</span><br>    <span class="hljs-comment">//         // 枚举数量 [优化数量下降 ==&gt; 1+2+4+...+rest 即将此处枚举的物品加入到总物品n中转为01背包]</span><br>    <span class="hljs-comment">//         for(int num = 1; num &lt;= c[i] &amp;&amp; j &gt;= num*v[i]; ++num)&#123;</span><br>    <span class="hljs-comment">//             f[j] = max(f[j], f[j-num*v[i]]+num*w[i]);</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <br>    <br>    <span class="hljs-comment">// 单调队列优化做法 O(n*V)</span><br>    <span class="hljs-comment">// g: 滚动数组(上一次的f)</span><br>    <span class="hljs-comment">// q: 单调递减队列(按照同余类体积对应的最大价值排序，入队的是体积)</span><br>    <span class="hljs-keyword">int</span> g[N], q[N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-comment">// 如上一般做法时的状态转移: </span><br>        <span class="hljs-comment">// f[j] = max(f[j], f[j-v[i]]+w[i], f[j-2*v[i]]+2*w[i], ... , f[j-c[i]*v[i]]+c[i]*w[i])</span><br>        <br>        <br>        <span class="hljs-comment">// 滚动数组</span><br>        <span class="hljs-built_in">memcpy</span>(g, f, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>        <br>        <span class="hljs-comment">// 将f[0 ~ maxv]按体积分类 </span><br>        <span class="hljs-comment">// mod v[i] = 0 : f[0, v[i], 2*v[i], ... , k*v[i]]  </span><br>        <span class="hljs-comment">// mod v[i] = 1 : f[1, v[i]+1, 2*v[i]+1, ..., k*v[i]+1]</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// mod v[i] = r : f[r, v[i]+r, 2*v[i]+r, ..., k*v[i]+r]</span><br>        <br>        <span class="hljs-comment">// 再重新看看f如何更新(j 从 maxv 到 0)</span><br>        <span class="hljs-comment">// f[k*v[i]+r] = max(f[k*v[i]+r], f[(k-1)*v[i]+r]+w[i], ... , f[r]+k*w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[k*v[i]+1] = max(f[k*v[i]+1], f[(k-1)*v[i]+1]+w[i], ... , f[1]+k*w[i])</span><br>        <span class="hljs-comment">// f[k*v[i]] = max(f[k*v[i]], f[(k-1)*v[i]]+w[i], ... , f[0]+k*w[i])</span><br>        <br>        <span class="hljs-comment">// f[(k-1)*v[i]+r] = max(f[(k-1)*v[i]+r], f[(k-2)*v[i]+r]+w[i], ... , f[r]+(k-1)*w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[(k-1)*v[i]] = max(f[(k-1)*v[i]], f[(k-2)*v[i]]+w[i], ... , f[0]+(k-1)*w[i])</span><br>        <br>        <span class="hljs-comment">// f[(k-2)*v[i]+r] = max(f[(k-2)*v[i]+r], f[(k-3)*v[i]+r]+w[i], ... , f[r]+(k-2)*w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[(k-2)*v[i]] = max(f[(k-2)*v[i]], f[(k-3)*v[i]]+w[i], ... , f[0]+(k-2)*w[i])</span><br>        <br>        <span class="hljs-comment">// f[v[i]+r] = max(f[v[i]+r], f[r]+w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[v[i]] = max(f[v[i]], f[0]+w[i])</span><br>        <br>        <span class="hljs-comment">// f[r] = f[r]</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[0] = f[0]</span><br>        <br>        <span class="hljs-comment">// 显然 f[j]通过物品i更新时，只依赖于mod v[i]同余类</span><br>        <br>        <span class="hljs-comment">// 如此一来，我们大可不必反向更新体积，直接正向更新体积，只需要额外保存上一次的状态即可(滚动数组f,g)</span><br>        <span class="hljs-comment">// 然后可以用单调队列来优化选取最大值</span><br>        <br>        <span class="hljs-comment">// f[0] = g[0]</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[r] = g[r]</span><br>        <br>        <span class="hljs-comment">// f[v[i]] = max(g[v[i]], g[0]+w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[v[i]+r] = max(g[v[i]+r], g[r]+w[i])</span><br>        <br>        <span class="hljs-comment">// f[k*v[i]] = max(g[k*v[i]], g[(k-1)*v[i]]+w[i], ... , g[0]+k*w[i])</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// f[k*v[i]+r] = max(g[k*v[i]+r], g[(k-1)*v[i]+r]+w[i], ... , g[r]+k*w[i])</span><br>        <br>        <br>        <span class="hljs-comment">// 观察f[k*v[i]+r]和f[v[i]+r]的更新</span><br>        <span class="hljs-comment">// max中是所有同余类体积(不超过当前要更新的体积j也就是k*v[i]+r, 然后观察g[r]+k*w[i]和g[r]+*w[i])</span><br>        <span class="hljs-comment">// 为了更看得更清晰，将r同余的更新多写一点点</span><br>        <span class="hljs-comment">// f[0*v[i]+r] = g[r]</span><br>        <span class="hljs-comment">// f[1*v[i]+r] = max(g[1*v[i]+r], g[r]+w[i])</span><br>        <span class="hljs-comment">// f[2*v[i]+r] = max(g[2*v[i]+r], g[1*v[i]+r]+w[i], g[r]+2*w[i])</span><br>        <span class="hljs-comment">// f[3*v[i]+r] = max(g[3*v[i]+r], g[2*v[i]+r]+w[i], g[1*v[i]+r]+2*w[i], g[r]+3*w[i])</span><br>        <span class="hljs-comment">// f[4*v[i]+r] = max(g[4*v[i]+r], g[3*v[i]+r]+w[i], g[2*v[i]+r]+2*w[i], g[1*v[i]+r]+3*w[i], g[r]+4*w[i])</span><br>        <br>        <span class="hljs-comment">// 注意g是上一次的状态，是不变的</span><br>        <span class="hljs-comment">// 注意f[k*v[i]+r]更新时max里面的值，是f[(k-1)*v[i]+r]里面的值统统加上w[i]</span><br>        <span class="hljs-comment">//                                                                      g[r]</span><br>        <span class="hljs-comment">//                                                           g[v[i]+r], g[r]+1*w[i]</span><br>        <span class="hljs-comment">//                                         g[2*v[i]+r], g[v[i]+r]+w[i], g[r]+2*w[i]</span><br>        <span class="hljs-comment">//                     g[3*v[i]+r], g[2*v[i]+r]+w[i], g[v[i]+r]+2*w[i], g[r]+3*w[i]</span><br>        <span class="hljs-comment">// g[4*v[i]+r], g[3*v[i]+r]+w[i], g[2*v[i]+r]+2*w[i], g[v[i]+r]+3*w[i], g[r]+4*w[i]</span><br>        <br>        <span class="hljs-comment">// 最后，稍微变换一下这几行</span><br>        <span class="hljs-comment">//                                                                                g[r]</span><br>        <span class="hljs-comment">//                                                             (g[v[i]+r]-1*w[i], g[r]) + 1*w[i]</span><br>        <span class="hljs-comment">//                                         (g[2*v[i]+r]-2*w[i], g[v[i]+r]-1*w[i], g[r]) + 2*w[i]</span><br>        <span class="hljs-comment">//                     (g[3*v[i]+r]-3*w[i], g[2*v[i]+r]-2*w[i], g[v[i]+r]-1*w[i], g[r]) + 3*w[i]</span><br>        <span class="hljs-comment">// (g[4*v[i]+r]-4*w[i], g[3*v[i]+r]-3*w[i], g[2*v[i]+r]-2*w[i], g[v[i]+r]-1*w[i], g[r]) + 4*w[i]</span><br>        <br>        <span class="hljs-comment">// 正向更新。于是每次入队比较的就是g[k*v[i]+r]-k*w[i]</span><br>        <span class="hljs-comment">// 当然前面早已经提到(按照同余类体积对应的最大价值排序，入队的是体积),故入队的是k*v[i]+r也就是j</span><br>        <br>        <span class="hljs-comment">// 枚举余数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; v[i]; r ++)&#123;<br>            <br>            <span class="hljs-comment">// 枚举该同余类体积, 正向更新</span><br>            <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = r; j &lt;= maxv; j += v[i])&#123;   <span class="hljs-comment">// j = k*v[i]+r</span><br>                f[j] = g[j];<br>                <br>                <span class="hljs-comment">// 更新队列。</span><br>                <span class="hljs-comment">// 由上面的分析知道: 队列中每个体积对应的价值都增加w[i],因此大小关系不变</span><br>                <span class="hljs-comment">// 但是，当队尾插入新元素时，需要根据大小关系来移除队尾元素，保持队列性质。</span><br>                <br>                <span class="hljs-comment">// 队头不在窗口内</span><br>                <span class="hljs-comment">// j-c[i]*v[i] &gt; q[hh]表示超出了c[i]件物品</span><br>                <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; j-c[i]*v[i] &gt; q[hh]) hh++;          <br>                <br>                <span class="hljs-comment">// 队尾不满足递减(注意：于是每次入队比较的是 g[k*v[i]+r]-k*w[i])</span><br>                <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; g[q[tt]] - (q[tt]-r)/v[i] * w[i] &lt;= g[j] - (j-r)/v[i] * w[i]) tt--;<br>                <br>                <span class="hljs-comment">// 加入队列</span><br>                q[++tt] = j;                                          <br>                <br>                <span class="hljs-comment">// 更新f[j]: 只需要用队头元素来更新就行(单调递减队列)</span><br>                <span class="hljs-comment">// g[v] + (j-v)/v[i]*w[i]   注: v == q[hh]</span><br>                f[j] = <span class="hljs-built_in">max</span>(f[j], g[q[hh]] + (j-q[hh])/v[i] * w[i]);   <br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f[maxv]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单跳表demo</title>
    <link href="/2021/10/09/%E7%AE%80%E6%98%93%E8%B7%B3%E8%A1%A8demo/"/>
    <url>/2021/10/09/%E7%AE%80%E6%98%93%E8%B7%B3%E8%A1%A8demo/</url>
    
    <content type="html"><![CDATA[<h3 id="简单跳表设计"><a href="#简单跳表设计" class="headerlink" title="简单跳表设计"></a>简单跳表设计</h3><p><a href="https://leetcode-cn.com/problems/design-skiplist/comments/">题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Skiplist</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">int</span> cur_level;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>        <span class="hljs-keyword">int</span> val;<br>        node* Next[N];<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> _v): <span class="hljs-built_in">val</span>(_v)&#123; <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) Next[i] = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(node* ptr, <span class="hljs-keyword">int</span> idx)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;Next[idx] = ptr;<br>        &#125;<br><br>        <span class="hljs-function">node* <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;Next[idx];<br>        &#125;<br>    &#125;;<br><br>    node *head;<br><br>    <span class="hljs-built_in">Skiplist</span>() &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>);<br>        cur_level = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) head-&gt;<span class="hljs-built_in">setNext</span>(<span class="hljs-literal">nullptr</span>, i);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        node * pos = <span class="hljs-built_in">getGreaterEqual</span>(key);<br>        <span class="hljs-keyword">return</span> pos &amp;&amp; pos-&gt;val == key;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        node* prePos[N];<br>        node* posAt0Level = <span class="hljs-built_in">getGreaterEqual</span>(key, prePos);<br><br>        <span class="hljs-comment">// 随机选择一个层数</span><br>        <span class="hljs-keyword">int</span> random_level = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">random</span>() % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; random_level &lt; N) ++random_level;<br><br>        <span class="hljs-comment">// 额外增加需要插入的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur_level; i &lt; random_level; ++i) prePos[i] = head;<br>        <span class="hljs-keyword">if</span>(random_level &gt; cur_level) cur_level = random_level;<br><br>        node* cur_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(key);<br><br>        <span class="hljs-comment">// 插入</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; random_level; ++i)&#123;<br>            cur_node-&gt;<span class="hljs-built_in">setNext</span>(prePos[i]-&gt;<span class="hljs-built_in">getNext</span>(i), i);<br>            prePos[i]-&gt;<span class="hljs-built_in">setNext</span>(cur_node, i);<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        node* prePos[N];<br>        node* posAt0Level = <span class="hljs-built_in">getGreaterEqual</span>(key, prePos);<br>        <br>        <span class="hljs-keyword">if</span>(!posAt0Level || posAt0Level-&gt;val != key) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 删除</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cur_level; ++i)&#123;<br>            node* ptr = prePos[i]-&gt;<span class="hljs-built_in">getNext</span>(i);<br>            <span class="hljs-keyword">if</span>(ptr) prePos[i]-&gt;<span class="hljs-built_in">setNext</span>(ptr-&gt;<span class="hljs-built_in">getNext</span>(i), i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function">node* <span class="hljs-title">getGreaterEqual</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, node** prePos = <span class="hljs-literal">nullptr</span>)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> h = cur_level<span class="hljs-number">-1</span>;<br>        node* temp = head, *next_temp;<br><br>        <span class="hljs-comment">// prePos[i] 至少是 head [即prePos必不为空]</span><br>        <span class="hljs-comment">// 因为 head-&gt;getNext[i] 如果不存在, 则prePos[i] = head</span><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            next_temp = temp-&gt;<span class="hljs-built_in">getNext</span>(h);<br>            <span class="hljs-keyword">if</span>(next_temp &amp;&amp; key &gt; next_temp-&gt;val) temp = next_temp;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(prePos) prePos[h] = temp;<br>                <span class="hljs-keyword">if</span>(h == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-comment">// 在下一层中找</span><br>                h --;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回第0层的 第一个大于等于该key的节点的地址 prePos[0]-&gt;getNext(0)</span><br>        <span class="hljs-keyword">return</span> next_temp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置文件</title>
    <link href="/2021/10/06/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/10/06/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="nginx配置文件的结构"><a href="#nginx配置文件的结构" class="headerlink" title="nginx配置文件的结构"></a>nginx配置文件的结构</h3><p>apt install nginx后/etc/nginx/目录下有一个nginx.conf文件，nginx.conf由多个块组成，最外面的块是main，main包含events和http，http包含upstream和多个server，server又包含多个location。更新nginx.conf中的server时，如果直接更改该文件，则当虚拟主机(server)增多了之后该文件将越来越大，这样势必会造成管理的混乱。因此，我们通常根据不同的服务编写不同的conf文件【每块upstream+server】，将这些conf文件保存在/etc/nginx/conf.d/目录下，而/etc/nginx/nginx.conf文件中只需要在http块中增加以下语句(默认的nginx.conf文件已经包含该语句)   <code>include/etc/nginx/conf.d/*.conf</code>。</p><p><img src="/2021/10/06/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-20211013200643459.png" alt="image-20211013200643459"></p><h3 id="编写nginx配置文件"><a href="#编写nginx配置文件" class="headerlink" title="编写nginx配置文件"></a>编写nginx配置文件</h3><p>[预备]</p><p>nginx支持热配置，修改完配置文件后只需要执行<code>nginx -s reload</code>即可使配置文件生效。</p><p><code>cat /proc/sys/fs/file-max</code>查看系统级别的能够打开的fd的数量,是对整个<strong>系统的限制</strong>。</p><p><code>ulimit -a</code>查看对用户的资源的限制，可以看到该用户最多打开1024个fd，可以使用<code>ulimit -SHn 10240</code>来设置用户打开fd的数量上限为10240。</p><p><img src="/2021/10/06/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-20211013203151458.png" alt="image-20211013203151458"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 定义nginx运行的用户</span><br>user nobody;<br><br><span class="hljs-comment"># nginx的worker进程数，建议设置为CPU核心数。</span><br>worker_processes <span class="hljs-number">2</span>;<br> <br><span class="hljs-comment"># 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br>error_log <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log warn;<br><br><span class="hljs-comment"># 保存master进程id的文件</span><br>pid <span class="hljs-regexp">/run/</span>nginx.pid;<br><br><span class="hljs-comment"># 一个worker进程打开的最多文件描述符数目，理论值应该是该用户最多打开文件数（ulimit -n）与nginx的worker进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值(也就是最多的fd数量)保持一致。</span><br>worker_rlimit_nofile <span class="hljs-number">65535</span>;<br><br><span class="hljs-comment"># include /etc/nginx/modules-enabled/*.conf;</span><br><br>events<br>&#123;<br>    <span class="hljs-comment"># 事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];</span><br>    use epoll;<br><br>    <span class="hljs-comment"># 单个worker进程能并发处理最大连接数（最大连接数=连接数*进程数），不能超过最大文件打开数</span><br>    worker_connections <span class="hljs-number">65535</span>;<br>    <br>    <span class="hljs-comment"># 设置网络连接序列化，防止惊群现象(同时唤醒多个worker进程)发生，默认为on</span><br>    accept_mutex on; <br>    <br>    <span class="hljs-comment"># 设置一个进程是否同时接受多个网络连接，默认为off</span><br>    multi_accept on; <br>&#125;<br> <br> <br><span class="hljs-comment"># 设置http服务器，利用它的反向代理功能提供负载均衡</span><br>http<br>&#123;<br>    <span class="hljs-comment"># 文件扩展名与文件类型映射表</span><br>    include <span class="hljs-regexp">/etc/</span>nginx/mime.types;<br><br>    <span class="hljs-comment"># 默认文件类型</span><br>    default_type application/octet-stream;<br><br>    <span class="hljs-comment"># 默认编码</span><br>    <span class="hljs-comment"># charset utf-8;</span><br>    <br>    <span class="hljs-comment"># 服务器名字的hash键长度极限</span><br>    server_names_hash_max_size <span class="hljs-number">512</span>;<br><br>    <span class="hljs-comment"># 服务器名字的hash键长度(域名过长)</span><br>    server_names_hash_bucket_size <span class="hljs-number">128</span>;<br><br>    <span class="hljs-comment"># 客户端请求头部的缓冲区大小。该值必须设置为“系统分页大小”的整倍数[getconf PAGESIZE查看环境变量]。</span><br>    client_header_buffer_size <span class="hljs-number">4</span>k;<br><br>    <span class="hljs-comment"># 客户端请求头部的最大缓冲区大小(此值应大于前者，为节约空间，此buffer有个数限制，这里设置为4个,每个大小为32k)。该值必须设置为“系统分页大小”的整倍数。</span><br>    large_client_header_buffers <span class="hljs-number">4</span> <span class="hljs-number">32</span>k;<br><br>    <span class="hljs-comment"># 设置通过nginx上传文件的大小</span><br>    client_max_body_size <span class="hljs-number">10</span>m;<br><br>    <span class="hljs-comment"># 开启高效文件传输模式，nginx调用sendfile函数(零拷贝方式, 比read和write函数要高效得多，因为read和write函数要把数据从内核缓冲区拷贝到应用层缓冲区再进行操作)来输出文件。【对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，建议设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意! ==&gt; 如果图片显示不正常把这个改成off】</span><br>    sendfile on;<br><br>    <span class="hljs-comment"># 开启目录列表访问，适合下载服务器，默认关闭。</span><br>    <span class="hljs-comment"># autoindex on;</span><br><br>    <span class="hljs-comment"># 禁止使用socket的TCP_CORK的选项，此选项仅在开启sendfile的时候使用，默认为on。允许把http响应头和文件的开始部分放在一个文件里发布，以减少网络报文段的数量</span><br>    tcp_nopush on;<br>    <br>    <span class="hljs-comment"># 数据在传输的过程中不进入缓存直接发送，只有在长连接的时候才启用，默认为on。看上去是和tcp_nopush相反的功能，但是两者都为on时(默认设置)nginx也可以平衡这两个功能的使用。</span><br>    tcp_nodelay on;<br>    <br>    <span class="hljs-comment"># 长连接超时时间(秒)</span><br>    keepalive_timeout <span class="hljs-number">60</span>;<br>    <br>    <span class="hljs-comment"># 为打开文件指定缓存，默认不启用。max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br>    open_file_cache max=<span class="hljs-number">65535</span> inactive=<span class="hljs-number">60</span>s;<br><br>    <span class="hljs-comment"># 这个是指多长时间检查open_file_cache中缓存项目的有效信息。</span><br>    open_file_cache_valid <span class="hljs-number">60</span>s;<br><br>    <span class="hljs-comment"># inactive参数时间内文件的最少使用次数(默认为1)。</span><br>    open_file_cache_min_uses <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment"># 是否在搜索一个文件的时候记录cache错误.</span><br>    open_file_cache_errors on;<br><br><span class="hljs-comment"># fastcgi模块</span><br>    <span class="hljs-comment"># nginx如果要解析php脚本语言，就必须通过配置fastcgi模块来提供对php支持</span><br>    fastcgi_connect_timeout <span class="hljs-number">30</span>;<br>    fastcgi_send_timeout <span class="hljs-number">30</span>;<br>    fastcgi_read_timeout <span class="hljs-number">30</span>;<br>    fastcgi_buffer_size <span class="hljs-number">64</span>k;<br>    fastcgi_buffers <span class="hljs-number">4</span> <span class="hljs-number">64</span>k;<br>    fastcgi_busy_buffers_size <span class="hljs-number">128</span>k;<br>    fastcgi_temp_file_write_size <span class="hljs-number">128</span>k;<br><br>    <span class="hljs-comment"># gzip模块设置</span><br>    <span class="hljs-comment"># 开启gzip压缩输出</span><br>    gzip on; <br>    <br>    <span class="hljs-comment"># 最小压缩文件大小</span><br>    gzip_min_length <span class="hljs-number">1</span>k; <br>    <br>    <span class="hljs-comment"># 压缩缓冲区</span><br>    gzip_buffers <span class="hljs-number">4</span> <span class="hljs-number">16</span>k; <br>    <br>    <span class="hljs-comment"># 压缩版本（默认1.1，前端如果是squid2.5使用1.0）</span><br>    gzip_http_version <span class="hljs-number">1.0</span>; <br>    <br>    <span class="hljs-comment"># 压缩等级</span><br>    gzip_comp_level <span class="hljs-number">2</span>;    <br>    <br>    <span class="hljs-comment"># 压缩类型</span><br>    gzip_types text<span class="hljs-regexp">/plain application/</span>x-javascript text<span class="hljs-regexp">/css application/</span>xml;  <br>    <br>    <span class="hljs-comment"># 设置在使用Gzip功能时是否发送带有“Vary：Accept-Encoding”头域的响应头部，开启后端效果是在响应头部Accept-Encoding: gzip</span><br>    gzip_vary on;<br>    <br>    <span class="hljs-comment"># 设置日志格式(格式log_format NAME LOG_CONTENT_FORMAT)</span><br>    <span class="hljs-comment"># $remote_addr与$http_x_forwarded_for客户端的ip地址；</span><br>    <span class="hljs-comment"># $remote_user：客户端用户名；</span><br>    <span class="hljs-comment"># $time_local： 访问时间与时区；</span><br>    <span class="hljs-comment"># $request：请求的url与http协议；</span><br>    <span class="hljs-comment"># $status： 状态码，</span><br>    <span class="hljs-comment"># $body_bytes_sent ：发送给客户端body大小；</span><br>    <span class="hljs-comment"># $http_referer：从哪个页面链接访问过来的；</span><br>    <span class="hljs-comment"># $http_user_agent：客户浏览器的相关信息；</span><br>    log_format access<span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;</span>;<br><br>    <span class="hljs-comment"># access日志(格式access_log FILE_PATH LOG_FORMAT,主要用于记录客户端的请求)</span><br>    access_log <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log  access;<br><br>    <span class="hljs-comment"># error日志(格式error_log FILE_PATH LEVEL,记录了访问出错的信息，可以用于定位错误的原因)</span><br>    error_log <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log error<br>    <br><br>    <span class="hljs-comment"># 负载均衡配置(如不指定端口则默认为80端口)</span><br>    upstream cron &#123;<br>        <span class="hljs-comment"># 使用带权分配</span><br>        server <span class="hljs-number">192.168</span>.<span class="hljs-number">162.129</span>:<span class="hljs-number">80</span> weight=<span class="hljs-number">3</span>;<br>        server <span class="hljs-number">192.168</span>.<span class="hljs-number">162.130</span>:<span class="hljs-number">80</span> weight=<span class="hljs-number">2</span> max_conns=<span class="hljs-number">300</span>;<br>        <span class="hljs-comment"># server 192.168.162.131:80 weight=3 max_fails=2 fail_timeout=10s backup;   </span><br><br>        <span class="hljs-comment"># nginx的upstream支持以下分配方式</span><br>        <span class="hljs-comment"># 1、轮询（默认）</span><br>        <span class="hljs-comment"># 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br>        <span class="hljs-comment"># 2、weight</span><br>        <span class="hljs-comment"># 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br>        <span class="hljs-comment"># 3、ip_hash</span><br>        <span class="hljs-comment"># 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br>        <span class="hljs-comment"># upstream backend &#123;</span><br>        <span class="hljs-comment">#    server 192.168.162.129:80;</span><br>        <span class="hljs-comment">#    server 192.168.162.130:80;</span><br>        <span class="hljs-comment">#    ip_hash;</span><br>        <span class="hljs-comment"># &#125;</span><br>        <span class="hljs-comment"># 4、fair（安装第三方upstream_fair模块）</span><br>        <span class="hljs-comment"># 按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br>        <span class="hljs-comment"># upstream backend &#123;</span><br>        <span class="hljs-comment">#    server 192.168.162.129;</span><br>        <span class="hljs-comment">#    server 192.168.162.130:80;</span><br>        <span class="hljs-comment">#    fair;</span><br>        <span class="hljs-comment"># &#125;</span><br>        <span class="hljs-comment"># 5、url_hash（安装第三方hash软件包，不能设置server状态参数）</span><br>        <span class="hljs-comment"># 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br>        <span class="hljs-comment"># upstream backend &#123;</span><br>        <span class="hljs-comment">#    server 192.168.162.129;</span><br>        <span class="hljs-comment">#    server 192.168.162.130:80;</span><br>        <span class="hljs-comment">#    hash $request_uri;</span><br>        <span class="hljs-comment">#    hash_method crc32;</span><br>        <span class="hljs-comment"># &#125;</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># server的状态参数:</span><br>        <span class="hljs-comment"># 1、down表示该server暂时不参与负载</span><br>        <span class="hljs-comment"># 2、weight定义权重。</span><br>        <span class="hljs-comment"># 3、max_fails定义允许请求失败的最大次数(默认1).当超过最大次数时，返回proxy_next_upstream模块定义的错误。</span><br>        <span class="hljs-comment"># 4、fail_timeout定义max_fails次失败后，暂停的时间。</span><br>        <span class="hljs-comment"># 5、backup表示只有其它所有的非backup机器处于down状态或者繁忙的时候，才请求该backup机器。【这台机器压力会最轻。】</span><br>        <span class="hljs-comment"># 6、max_conns定义限制上游服务器的最大连接数(默认值是0表示没有限制)，用于避免过载，可以起到限流的作用。</span><br>    &#125;<br>       <br>    <span class="hljs-comment"># 虚拟主机配置</span><br>    server&#123;<br>    <span class="hljs-comment"># 默认的server块丢弃每个请求，使Host不符合条件的请求全部不予响应</span><br>        listen <span class="hljs-number">80</span>;<br>        return <span class="hljs-number">444</span>;<br>&#125;<br>    server<br>    &#123;<br>        <span class="hljs-comment"># 监听端口</span><br>        listen <span class="hljs-number">80</span>;<br><br>        <span class="hljs-comment"># 该server对应的主机名(对应浏览器的Host字段。可以写多个。若都不匹配则默认转发到第一个server块)</span><br>        <span class="hljs-comment"># 可以在该server之前再设置一个默认的server块丢弃每个请求，使Host不符合条件的请求全部不予响应。</span><br>        server_name www.cron.com cron.com;<br>        <br>        <span class="hljs-comment"># 设置index文件(可以写多个，按顺序查找一个可用的)</span><br>        <span class="hljs-comment"># index index.html index.htm index.php;</span><br>        <br>        <span class="hljs-comment"># 指定虚拟主机的网页根目录(【index和root选项用来访问静态资源】)</span><br>        <span class="hljs-comment"># root /api/v1;</span><br><br>        <span class="hljs-comment"># 对php进行负载均衡</span><br>        location ~ .*.(php|php5)?$<br>        &#123;<br>            fastcgi_pass <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;<br>            fastcgi_index index.php;<br>            include <span class="hljs-regexp">/etc/</span>nginx/fastcgi.conf;<br>        &#125;<br>         <br>        <span class="hljs-comment"># 图片缓存过期时间(一般来说图片一旦发布几乎不会再改动。为了减小对服务器请求的压力，提高用户浏览速度，通过设置nginx中的expires，让用户访问一次后，将图片缓存在用户的浏览器中，且缓存时间较长。)</span><br>        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$<br>        &#123;<br>            expires    <span class="hljs-number">30</span>d;<br>        &#125;<br>         <br>        <span class="hljs-comment"># JS和CSS缓存过期时间</span><br>        location ~ .*.(js|css)?$<br>        &#123;<br>            expires <span class="hljs-number">1</span>h;<br>        &#125;<br>         <br>        <span class="hljs-comment"># 对 &quot;/&quot; 目录启用反向代理</span><br>        location / &#123;<br>        <span class="hljs-comment"># IP限制</span><br>        <span class="hljs-comment"># deny 192.168.162.128；</span><br>            <span class="hljs-comment"># allow 192.168.162.0/24;</span><br>            <span class="hljs-comment"># deny all;</span><br>            <br>            <span class="hljs-comment"># 代理转发</span><br>            proxy_pass http:<span class="hljs-regexp">//</span>cron;<br>            <br>            <span class="hljs-comment"># 重定向</span><br>            proxy_redirect off;<br>            <span class="hljs-comment"># proxy_redirect http://192.168.162.131/;</span><br>            <br>            <span class="hljs-comment"># 设置头部(该值$remote_add是反向代理服务器的iP地址)</span><br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>             <br>            <span class="hljs-comment"># 设置头部(该值$proxy_add_x_forwarded_for是原客户端的IP地址【后端可能需要该信息】)</span><br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>             <br>            <span class="hljs-comment"># 设置头部(请求域名)</span><br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br><br>            <span class="hljs-comment"># 允许客户端请求的最大单文件字节数(content-length)</span><br>            client_max_body_size <span class="hljs-number">10</span>m;<br><br>            <span class="hljs-comment"># Nginx分配给请求数据的Buffer大小(若大于该值则先保存在临时文件中)</span><br>            client_body_buffer_size <span class="hljs-number">128</span>k;<br><br>            <span class="hljs-comment"># 使nginx阻止HTTP应答代码为400或者更高的应答。</span><br>            proxy_intercept_errors on;<br><br>            <span class="hljs-comment"># nginx跟后端服务器连接超时时间(代理连接超时)</span><br>            proxy_connect_timeout <span class="hljs-number">3</span>;<br><br>            <span class="hljs-comment"># 后端服务器数据回传时间(代理发送超时)</span><br>            proxy_send_timeout <span class="hljs-number">5</span>;<br><br>            <span class="hljs-comment"># 连接成功后，后端服务器响应时间(代理接收超时)</span><br>            proxy_read_timeout <span class="hljs-number">5</span>;<br><br>            <span class="hljs-comment"># 设置nginx保存用户头信息的缓冲区大小(针对后端传输数据过多)</span><br>            proxy_buffer_size <span class="hljs-number">4</span>k;<br><br>            <span class="hljs-comment"># proxy_buffers缓冲区，网页平均在32k以下的设置</span><br>            proxy_buffers <span class="hljs-number">4</span> <span class="hljs-number">32</span>k;<br><br>            <span class="hljs-comment"># 高负载下缓冲大小（proxy_buffers*2）</span><br>            proxy_busy_buffers_size <span class="hljs-number">64</span>k;<br><br>            <span class="hljs-comment"># 设置缓存文件大小，大于这个值，将直接通过upstream服务器传输</span><br>            proxy_temp_file_write_size <span class="hljs-number">64</span>k;<br>        &#125;<br>        <br>        <span class="hljs-comment"># 设置jsp、php、jspx这类动态应用程序不做缓存</span><br>        location ~ .*\.(jsp|php|jspx)?$ &#123; <br>            proxy_set_header Host <span class="hljs-variable">$host</span>; <br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>; <br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;   <br>            proxy_pass http:<span class="hljs-regexp">//</span>cron;<br>&#125; <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="location语法"><a href="#location语法" class="headerlink" title="location语法"></a>location语法</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">location [=|~|~*|^~] /uri/ &#123;<br><span class="hljs-code">...</span><br>&#125;<br><br><span class="hljs-section">=精确匹配</span><br>^~不用正则匹配<br>~区分大小写的正则匹配<br>~*不区分大小写的正则匹配<br>!~区分大小写不匹配的正则<br>!~*不区分大小写不匹配的正则<br>/通用匹配<br><br>匹配优先级顺序： [精确匹配 =] &gt; [非正则匹配 ^~] &gt; [正则匹配(按location的定义顺序)] &gt; [通用匹配 /]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建systemctl自启动服务</title>
    <link href="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="systemctl目录"><a href="#systemctl目录" class="headerlink" title="systemctl目录"></a>systemctl目录</h3><p>这是<a href="https://www.linuxidc.com/Linux/2018-08/153545.htm">相关信息1</a> <a href="https://blog.csdn.net/taoxicun/article/details/119240944">相关信息2</a></p><p>系统服务存放的目录（/user/lib/systemd/system/）</p><p>用户服务存放的目录（/etc/systemd/system/）</p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004193547601.png" alt="image-20211004193547601"></p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004193515112.png" alt="image-20211004193515112"></p><p>这两个目录下存放的都是Unit文件, 编写风格类似.ini文件，例如用户服务中的etcd2.service文件内容如下:</p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004193851809.png" alt="image-20211004193851809"></p><h3 id="Unit文件内容"><a href="#Unit文件内容" class="headerlink" title="Unit文件内容"></a>Unit文件内容</h3><p>Unit文件通常由三部分(三个段)组成：</p><p>1、Unit段的常用选项：定义与Unit类型无关的通用选项；用于提供unit的描述信息，unit行为及依赖关系等。</p><p>  Description：描述信息，意义性描述；</p><p>  After：定义unit的启动次序；表示当前unit应晚于哪些unit启动；其功能与Before相反；</p><p>  Requies：依赖到其它的units；强依赖，被依赖的units无法激活时，当前的unit即无法激活；</p><p>  Wants：依赖到其它的units；弱依赖；</p><p>  Confilcts：定义units 的冲突关系；</p><p>2、Service段的常用选项：定义与特定类型相关的专用选项；</p><p>  Type：用于定义影响ExecStart及相关参数的功能的unit进程类型；</p><p>  EnvironmentFile：环境配置文件；</p><p>  ExecStart：指明启动unit要运行的命令或脚本；</p><p>  ExecStop：指明停止unit要运行的命令或脚本；</p><p>  RestartSec：重启当前服务间隔的秒数，默认是 100ms。</p><p>  Restart: 定义何种情况 会自动重启当前服务。</p><p>  User：指定运行unit的用户</p><p>  Group：指定运行unit的用户组</p><p>3、Install段的常用配置：定义由”systemctl enable”及”systemctl disable”命令在实现服务启用或禁用时用到的一些选项；<br>  Alias：别名；</p><p>  RequiredBy：被哪些unit所依赖；</p><p>  WantBy：被哪些unit所依赖；</p><h3 id="服务的状态信息"><a href="#服务的状态信息" class="headerlink" title="服务的状态信息"></a>服务的状态信息</h3><p>以etcd服务为例，看一下该服务的状态输出信息</p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004194655895.png" alt="image-20211004194655895"></p><p>第一行是对该Unit的基本描述。对应于Unit文件的 Unit.Description</p><p>第二行的 Loaded 描述启动该服务的配置文件路径为：/lib/systemd/system/etcd.service。以及是否开机自启动。</p><p>第三行 的 Active 描述服务当前的状态，active (running) 表示服务正在运行中。如果是 inactive (dead) 则表示服务当前没有运行。最后面是服务启动的时间。</p><p>第四行的 Docs 提供了在线文档的地址。对应于Unit文件的 Unit.Docmentation</p><p>Main PID 表示该服务进程的 ID，接下来是任务的数量，占用的内存和 CPU 资源。</p><p>Cgroup 描述的是 cgrpup 相关的信息。</p><p>后面的都是是该Unit输出的日志信息。</p><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>systemctl enable etcd.service（设置开机自启）。设置开机自启本质上就是在/etc/systemd/system/multi-user.target.wants/目录下新建一个到该Unit的软链接。同理，禁止开机自启就是删除该软链接。</p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004201413731.png" alt="image-20211004201413731"></p><h3 id="编写Unit文件"><a href="#编写Unit文件" class="headerlink" title="编写Unit文件"></a>编写Unit文件</h3><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004203218575.png" alt="image-20211004203218575"></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004203154413.png" alt="image-20211004203154413"></p><p><img src="/2021/10/04/linux%E4%B8%8B%E5%88%9B%E5%BB%BAsystemctl%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/image-20211004210835629.png" alt="image-20211004210835629"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1、/lib/systemd<span class="hljs-built_in">/system </span> 编辑.service文件<br>[Unit]<br><span class="hljs-attribute">Description</span>=gys&#x27;s tencent ecs based frp<span class="hljs-built_in"> client</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">Type</span>=forking<br><span class="hljs-attribute">User</span>=UESTC-1<br><span class="hljs-attribute">ExecStart</span>=<span class="hljs-string">&quot;/home/UESTC-1/gys_frp/tencent_ecs/frpc&quot;</span> -c <span class="hljs-string">&quot;/home/UESTC-1/gys_frp/tencent_ecs/frpc.ini&quot;</span><br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=5<br><br>[Install]<br><span class="hljs-attribute">Alias</span>=gys_frp_tencent<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br><br>2、sudo systemctl <span class="hljs-builtin-name">enable</span> xx设置开机自启<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump和tshark简单使用</title>
    <link href="/2021/10/03/tcpdump%E5%92%8Ctshark/"/>
    <url>/2021/10/03/tcpdump%E5%92%8Ctshark/</url>
    
    <content type="html"><![CDATA[<h3 id="tcpdump常用指令"><a href="#tcpdump常用指令" class="headerlink" title="tcpdump常用指令"></a>tcpdump常用指令</h3><p><a href="https://linux.cn/article-10587-1.html">可能用到的&amp;后台运行暂停恢复</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tex">-a 将网络地址和广播地址转变成名字；<br>-d 将匹配信息包的代码以人们能够理解的汇编格式给出；<br>-dd 将匹配信息包的代码以c语言程序段的格式给出；<br>-ddd 将匹配信息包的代码以十进制的形式给出；<br>-e 在输出行打印出数据链路层的头部信息；<br>-f 将外部的Internet地址以数字的形式打印出来；<br>-l 使标准输出变为缓冲行形式；<br>-n 不把网络地址转换成名字；<br>-t 在输出的每一行不打印时间戳；<br>-v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；<br>-vv 输出详细的报文信息；<br>-c 在收到指定的包的数目后，tcpdump就会停止；<br>-C 指定保存时的文件大小(MB)，超过则另外保存一个文件。<br>-F 从指定的文件中读取表达式,忽略其它的表达式；<br>-i 指定监听的网络接口；<br>-r 从指定的文件中读取包(这些包一般通过-w选项产生)；<br>-w 直接将包写入文件中，并不分析和打印出来；<br>-T 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc（远程过程调用）和snmp（简单网络管理协议；）<br></code></pre></td></tr></table></figure><p><code>tcpdump -s 0 -x|X -n </code>     -s限制包大小，0表示不限制，默认限制为65536。-x显示完整内容 -X显示为字符形式, -n不解析域名。</p><p><code>tcpdump -i ens33</code>    -i指定网卡，若不指定则默认指定为第一块网卡</p><p><code>tcpdump host 210.27.48.1 </code>     host指定IP (默认选项为<code>src or dst</code>)</p><p><code>tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \) </code>    指定通信双方IP</p><p><code>tcpdump ip host 210.27.48.1 and ! 210.27.48.2</code> 指定通信双方IP</p><p><code>tcpdump -i ens33 src host 210.27.48.1</code>    src指定源IP</p><p><code>tcpdump -i ens33 dst host 210.27.48.1</code>    dst指定目的IP</p><p><code>tcpdump tcp port 23 and host 210.27.48.1</code>    tcp指定协议<code>ip,ip6,arp,rarp,tcp,udp</code>  port指定端口</p><p><code>tcpdump -s 0 port 55944 and  dst 10.15.72.125 -x -n -tttt -C 256 -w /tmp/tcpdump_$(date +&quot;%Y%m%d-%H%M%S&quot;).pcap</code>    -tttt指定时间格式，-C指定保存本次抓包保存单个文件的极限大小。</p><h3 id="tshark常用指令"><a href="#tshark常用指令" class="headerlink" title="tshark常用指令"></a>tshark常用指令</h3><p>相比于tcpdump而言，tshark是比较新的工具，是wireshark的命令行版。两者都是基于libpcap的，也都是生成的cap格式文件。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">捕获接口:</span><br><span class="hljs-section">-i: &lt;interface&gt; 指定捕获接口，默认是第一个非本地循环接口;</span><br><span class="hljs-section">-f: &lt;capture filter&gt; 设置抓包过滤表达式，遵循libpcap过滤语法，这个是在抓包的过程中过滤，如果是分析本地文件则用不到。</span><br><span class="hljs-section">-s: &lt;snaplen&gt; 设置快照长度，用来读取完整的数据包，因为网络中传输有65535的限制，值0代表快照长度65535，默认也是这个值；</span><br><span class="hljs-section">-p: 以非混合模式工作，即只关心和本机有关的流量。</span><br><span class="hljs-section">-B: &lt;buffer size&gt; 设置缓冲区的大小，默认是2M;</span><br><span class="hljs-section">-y: &lt;link type&gt; 设置抓包的数据链路层协议，不设置则默认为-L找到的第一个协议，局域网一般是EN10MB等;</span><br><span class="hljs-section">-D: 打印接口的列表并退出;</span><br>-L 列出本机支持的数据链路层协议，供-y参数使用。<br><br><span class="hljs-section">捕获停止选项:</span><br><span class="hljs-section">-c: &lt;packet count&gt; 捕获n个包之后结束，默认捕获无限个;</span><br><span class="hljs-section">-a: &lt;autostop cond.&gt; 停止条件(key:value),可以有多个。</span><br>        duration: num  ==&gt; 在num秒之后停止捕获;<br>        filesize: num  ==&gt; 在num KB之后停止捕获;<br>        files: num  ==&gt; 在捕获num个文件之后停止捕获;<br>        packets: num ==&gt; 在捕获num个包之后停止捕获;<br><br><span class="hljs-section">捕获输出选项:</span><br>-b &lt;ringbuffer opt.&gt; (key:value) 文件名由-w参数决定<br>        duration: num ==&gt; 在num秒后(相对时间)切换到下一个文件;<br>        filesize: num ==&gt; 在num KB之后切换到下一个文件;<br>        files: num ==&gt; 到达num个文件后循环使用这些文件,若不设定则会一直创建新文件直到写满磁盘;<br>        packets: num ==&gt; 捕获num个包后切换到下一个文件;<br>        interval: num ==&gt; 间隔num秒(绝对时间)切换到下一个文件;<br><br><span class="hljs-section">输入文件:</span><br><span class="hljs-section">-r: &lt;infile&gt; 读取本地文件</span><br><br><span class="hljs-section">处理选项:</span><br><span class="hljs-section">-2: 执行两次分析</span><br><span class="hljs-section">-R: &lt;read filter&gt;,包的读取过滤器，可以在wireshark的filter语法上查看；在wireshark的视图-&gt;过滤器视图，在这一栏点击表达式，就会列出来对所有协议的支持。</span><br><span class="hljs-section">-Y: &lt;display filter&gt;,使用读取过滤器的语法，在单次分析中可以代替-R选项;</span><br><span class="hljs-section">-n: 禁止所有地址名字解析（默认为允许所有）</span><br><span class="hljs-section">-N: 启用某一层的地址名字解析。“m”代表MAC层，“n”代表网络层，“t”代表传输层，“C”代表当前异步DNS查找。如果-n和-N参数同时存在，-n将被忽略。如果-n和-N参数都不写，则默认打开所有地址名字解析。</span><br><span class="hljs-section">-d: 将指定的数据按有关协议解包输出,如要将tcp 8888端口的流量按http解包，应该写为“-d tcp.port==8888,http”; [tshark -d.]可以列出所有支持的有效选择器。</span><br>　　<br><span class="hljs-section">输出选项:</span><br><span class="hljs-section">-w: &lt;outfile|-&gt; 设置raw数据的输出文件。</span><br><span class="hljs-section">-F: &lt;output file type&gt;,设置输出的文件格式，默认是.pcapng,使用[tshark -F]可列出所有支持的输出文件类型。</span><br><span class="hljs-section">-V: 增加细节输出;</span><br><span class="hljs-section">-O: &lt;protocols&gt;,只显示此选项指定的协议的详细信息。</span><br><span class="hljs-section">-P: 即使将解码结果写入文件中，也打印包的概要信息；</span><br><span class="hljs-section">-S: &lt;separator&gt; 行分割符</span><br><span class="hljs-section">-x: 设置在解码输出结果中，每个packet后面以HEX dump的方式显示具体数据。</span><br><span class="hljs-section">-T: pdml|ps|text|fields|psml,设置解码结果输出的格式，包括text,ps,psml和pdml，默认为text</span><br><span class="hljs-section">-e: 如果-T fields选项指定，-e用来指定输出哪些字段;</span><br><span class="hljs-section">-E: &lt;fieldsoption&gt;=&lt;value&gt; 如果-T fields选项指定，使用-E来设置一些属性，比如</span><br>　　　　header=y|n<br>　　　　separator=/t|/s|&lt;char&gt;<br>　　　　occurrence=f|l|a<br>　　　　aggregator=,|/s|&lt;char&gt;<br><span class="hljs-section">-t: a|ad|d|dd|e|r|u|ud 设置解码结果的时间格式。“ad”表示带日期的绝对时间，“a”表示不带日期的绝对时间，“r”表示从第一个包到现在的相对时间，“d”表示两个相邻包之间的增量时间（delta）。</span><br><span class="hljs-section">-u: s|hms 格式化输出秒；</span><br><span class="hljs-section">-l: 在输出每个包之后flush标准输出</span><br><span class="hljs-section">-q: 结合-z选项进行使用，来进行统计分析；</span><br><span class="hljs-section">-X: &lt;key&gt;:&lt;value&gt; 扩展项，lua_script、read_format，具体参见 man pages；</span><br>-z：统计选项，具体的参考文档;tshark -z help,可以列出，-z选项支持的统计方式。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩展欧几里得算法</title>
    <link href="/2021/10/02/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    <url>/2021/10/02/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="模板题1"><a href="#模板题1" class="headerlink" title="模板题1"></a>模板题1</h3><p><a href="https://www.acwing.com/problem/content/206/">题目链接</a></p><p><img src="/2021/10/02/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/image-20220914160127143.png" alt="image-20220914160127143"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-comment">// a*x + b*y == gcd(x, y) == res</span><br><span class="hljs-function">ll <span class="hljs-title">ext_gcd</span><span class="hljs-params">(ll x, ll y, ll &amp;a, ll &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>) &#123;<br>        a = <span class="hljs-number">1</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    ll res = ext_gcd(y, x%y, b, a);    <span class="hljs-comment">// 注意a和b换了位置，因为x和y换了位置</span><br>    <span class="hljs-comment">// b*y + a*(x%y) == res</span><br>    <span class="hljs-comment">// 消除%符号：因为 x%y == x - (x/y)*y， 所以 b*y + a*(x-(x/y)*y) == res</span><br>    <span class="hljs-comment">// 即 a*x + (b - a*x/y)*y == res</span><br>    <span class="hljs-comment">// 对比 a*x + b*y == res可得</span><br>    b -= x/y * a;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    ll ta = <span class="hljs-number">0</span>, tb = <span class="hljs-number">1</span>;   <span class="hljs-comment">// x == 0 | 1</span><br>    ll a, b;<br>    ll k1, k2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; b &gt;&gt; a;    <span class="hljs-comment">// x == a | b</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            合并这两个同余式</span><br><span class="hljs-comment">            x == k1*tb + ta</span><br><span class="hljs-comment">            x == k2*b + a</span><br><span class="hljs-comment">            即 k1*tb - k2*b = a - ta</span><br><span class="hljs-comment">            用 扩展gcd求出k1和k2的一组解</span><br><span class="hljs-comment">            ext_gcd(tb, -b, k1, k2)     ===&gt; k1*tb + k2*(-b) = gcd(tb, -b) = d</span><br><span class="hljs-comment">            如果 (a-ta)/d != 0，则无解</span><br><span class="hljs-comment">            否则 k1 = k1*(a-ta)/d, k2 = k1*(a-ta)/d</span><br><span class="hljs-comment">            此时 k1*tb - k2*b = a - ta 成立</span><br><span class="hljs-comment">            但我们的目的是求最小的正整数k1和k2使得等式成立</span><br><span class="hljs-comment">            因为任何 k1=k1+k*b/d、k2=k2+k*tb/d都能使上式成立，不妨代入证明一下</span><br><span class="hljs-comment">            k1*tb + k*tb*b/d - k2*b - k*tb*b/d = a - ta, 即k1*tb - k2*b = a - ta</span><br><span class="hljs-comment">            所以我们取 k1 = k1 % abs(b/d), k2 = k2 % abs(tb/d)</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            把k1代入原式有 x == (k1 + k*b/d)*tb + ta</span><br><span class="hljs-comment">            即 x == tb*b/d * k + k1*tb+ta</span><br><span class="hljs-comment">            所以经过新的合并后产生的 ta = k1*tb+ta, tb = tb*b/d</span><br><span class="hljs-comment">        */</span><br>        <br>        ll d = ext_gcd(tb, -b, k1, k2);<br>        <span class="hljs-keyword">if</span> ((a - ta) % d != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        k1 *= (a - ta) / d;<br>        ll k = <span class="hljs-built_in">abs</span>(b / d);<br>        k1 = (k1 % k + k) % k;<br>        <br>        ta = k1*tb+ta;<br>        tb = tb*k;<br>    &#125;<br>    <br>    <span class="hljs-built_in">cout</span> &lt;&lt; ta &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机Ubuntu突然无法DNS</title>
    <link href="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/"/>
    <url>/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/image-20210928150703938.png" alt="image-20210928150703938"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="以下方案在本次故障中不可行"><a href="#以下方案在本次故障中不可行" class="headerlink" title="以下方案在本次故障中不可行"></a>以下方案在本次故障中不可行</h4><p><code>sudo vim /var/lib/NetworkManager/NetworkManager.state</code>全部修改为true！</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/image-20210928150907394.png" alt="image-20210928150907394"></p><p><code>sudo service network-manager restart</code>重启服务，发现依然无法DNS。</p><p>重启虚拟机，再次查看<code>sudo vim /var/lib/NetworkManager/NetworkManager.state</code>发现上一次修改的true又变为了false。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/image-20210928150907394.png" alt="image-20210928150907394"></p><h4 id="以下方案在本次故障中可行"><a href="#以下方案在本次故障中可行" class="headerlink" title="以下方案在本次故障中可行"></a>以下方案在本次故障中可行</h4><p><code>sudo service network-manager stop </code>停止服务</p><p><code>sudo rm /var/lib/NetworkManager/NetworkManager.state</code>删除该文件</p><p><code>sudo service network-manager start </code>启动服务</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95DNS/image-20210928152258848.png" alt="image-20210928152258848"></p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongoDB安装</title>
    <link href="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/"/>
    <url>/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.mongodb.com/manual/administration/install-on-linux/">安装步骤链接</a></p><p><code>systemctl start mongod</code>启动mongoDB，默认监听127.0.0.1:27017</p><p>连接数据库</p><p><img src="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/image-20210927204152882.png" alt="image-20210927204152882"></p><p><img src="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/image-20210927204215785.png" alt="image-20210927204215785"></p><p><code>show databases</code>和mysql一样展示所有数据库。</p><p>mongoDB不需要创建database</p><p><code>use db1</code>和mysql一样使用db1数据库。需要注意的是，mongoDB这里的数据库只是一个命名空间而已。</p><p><code>db.createCollection(&quot;table1&quot;)</code>创建表，由于是非关系型数据库，建表时并不需要指定表结构。</p><p><code>show collections</code>展示所有表</p><p><code>db.table1.drop()</code>删除表</p><p><img src="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/image-20210927215224844.png" alt="image-20210927215224844"></p><p><code>db.table1.insert()</code>插入一个(返回<a href="https://docs.mongodb.org/manual/reference/method/db.collection.insert/#writeresults-insert">WriteResult</a>对象)或者多个(返回<a href="https://docs.mongodb.org/manual/reference/method/db.collection.insert/#bulkwriteresults-insert">BulkWriteResult</a>对象)</p><p><code>db.table1.insertOne(&#123;&#125;)</code>插入一个</p><p><code>db.insertMany([&#123;&#125;,...,&#123;&#125;])</code>插入多个</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">_</span>id是mongoDB的默认主键。<br>插入多个时使用数组。<br>`insert()`方法在主要驱动程序中已弃用，因此，如果要将单个文档插入集合中，则应使用`.insertOne()`方法;如果要将多个文档插入集合中，则应使用`.insertMany`。<br></code></pre></td></tr></table></figure><p><code>db.table1.find()</code>查询表，相当于<code>select * from table1;</code></p><p><code>db.table1.find(&#123;name: &quot;gys&quot;&#125;)</code>查询表，相当于<code>select * from table1 where name = &quot;gys&quot;;</code></p><p><code>db.table1.remove(&#123;name: &quot;gys&quot;&#125;)</code>删除记录，相当于<code>delete from table1 where name = &quot;gys&quot;;</code></p><p><img src="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/image-20210927215521279.png" alt="image-20210927215521279"></p><p><code>db.table1.createIndex(&#123;uid:-1&#125;)</code>创建索引, 1代表正向索引，-1代表反向索引</p><p><img src="/2021/09/27/mongoDB%E5%AE%89%E8%A3%85/image-20210927215734255.png" alt="image-20210927215734255"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span><br><span class="hljs-string">&quot;go.mongodb.org/mongo-driver/bson/primitive&quot;</span><br><span class="hljs-string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span><br><span class="hljs-string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> TimeStamp <span class="hljs-keyword">struct</span> &#123;<br>StartTime <span class="hljs-keyword">int64</span><span class="hljs-string">`bson:&quot;start_time&quot;`</span><br>FinishTime <span class="hljs-keyword">int64</span><span class="hljs-string">`bson:&quot;finish_time&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> TaskLog <span class="hljs-keyword">struct</span> &#123;<br>TaskName <span class="hljs-keyword">string</span><span class="hljs-string">`bson:&quot;task_name&quot;`</span><br>TaskCommand <span class="hljs-keyword">string</span><span class="hljs-string">`bson:&quot;task_command&quot;`</span><br>TaskErrMsg<span class="hljs-keyword">string</span><span class="hljs-string">`bson:&quot;task_err_msg&quot;`</span><br>TaskOutput<span class="hljs-keyword">string</span><span class="hljs-string">`bson:&quot;task_output&quot;`</span><br>TaskTimestampTimeStamp<span class="hljs-string">`bson:&quot;task_timestamp&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span>(<br>err error<br>mongoClient*mongo.Client<br>ctxcontext.Context<br>cancelFunccontext.CancelFunc<br>db*mongo.Database<br>collection*mongo.Collection<br><br>insertOneResult*mongo.InsertOneResult<br>cursor*mongo.Cursor<br>documentIDprimitive.ObjectID<br><br>updateResult*mongo.UpdateResult<br>deleteResult*mongo.DeleteResult<br><br>taskLog*TaskLog<br>)<br><br>ctx, cancelFunc = context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br><span class="hljs-comment">// 连接数据库</span><br><span class="hljs-keyword">if</span> mongoClient, err = mongo.Connect(ctx, options.Client().ApplyURI(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017&quot;</span>)); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> err = mongoClient.Ping(ctx, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;连接成功&quot;</span>)<br>&#125;<br><span class="hljs-keyword">defer</span> mongoClient.Disconnect(ctx)<br><br><span class="hljs-comment">// 选择数据库</span><br>db = mongoClient.Database(<span class="hljs-string">&quot;db1&quot;</span>)<br><br><span class="hljs-comment">// 选择表（collection）</span><br>collection = db.Collection(<span class="hljs-string">&quot;table1&quot;</span>)<br><br><span class="hljs-comment">// CRUD</span><br><br><span class="hljs-comment">// Create</span><br>taskLog = &amp;TaskLog&#123;<br>TaskName:      <span class="hljs-string">&quot;打印hello&quot;</span>,<br>TaskCommand:   <span class="hljs-string">&quot;echo hello&quot;</span>,<br>TaskErrMsg:    <span class="hljs-string">&quot;&quot;</span>,<br>TaskOutput:    <span class="hljs-string">&quot;hello&quot;</span>,<br>TaskTimestamp: TimeStamp&#123;<br>StartTime:  time.Now().Unix(),<br>FinishTime: time.Now().Unix()+<span class="hljs-number">10</span>,<br>&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> insertOneResult, err = collection.InsertOne(ctx, taskLog); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;_id =&quot;</span>, insertOneResult.InsertedID)<br><br><span class="hljs-comment">// 接口反射，我们知道InsertID是primitive.ObjectID类型[12字节的数组]</span><br>documentID = insertOneResult.InsertedID.(primitive.ObjectID)<br>logrus.Infoln(<span class="hljs-string">&quot;documentID =&quot;</span>, documentID)<br>&#125;<br><br><span class="hljs-comment">// Retrieve</span><br><span class="hljs-keyword">if</span> cursor, err = collection.Find(ctx, bson.D&#123;&#123;<span class="hljs-string">&quot;task_output&quot;</span>, bson.D&#123;&#123;<span class="hljs-string">&quot;$in&quot;</span>,bson.A&#123;<span class="hljs-string">&quot;hello&quot;</span>&#125;&#125;&#125;&#125;&#125;, &amp;options.FindOptions&#123;Limit: <span class="hljs-literal">nil</span>&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> cursor.Close(ctx)<br><br><span class="hljs-comment">// cursor.Next()返回一个记录传给cursor</span><br><span class="hljs-keyword">for</span> cursor.Next(ctx) &#123;<br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-keyword">var</span> cursorItem = &amp;TaskLog&#123;&#125;<br><span class="hljs-keyword">if</span> err = cursor.Decode(cursorItem); err != <span class="hljs-literal">nil</span> &#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>logrus.Infoln(*cursorItem)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Update</span><br><span class="hljs-keyword">if</span> updateResult, err = collection.UpdateMany(ctx, bson.D&#123;&#123;<span class="hljs-string">&quot;task_output&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>&#125;&#125;, bson.D&#123;&#123;<span class="hljs-string">&quot;$set&quot;</span>,bson.M&#123;<span class="hljs-string">&quot;task_output&quot;</span>:<span class="hljs-string">&quot;gys&quot;</span>&#125;&#125;&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(*updateResult)<br><br><span class="hljs-keyword">if</span> updateResult, err = collection.UpdateMany(ctx, bson.D&#123;&#123;<span class="hljs-string">&quot;task_output&quot;</span>, <span class="hljs-string">&quot;gys&quot;</span>&#125;&#125;, bson.D&#123;&#123;<span class="hljs-string">&quot;$inc&quot;</span>,bson.M&#123;<span class="hljs-string">&quot;task_timestamp.finish_time&quot;</span>: <span class="hljs-number">-5</span>&#125;&#125;&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(*updateResult)<br><br><span class="hljs-comment">// Delete</span><br><span class="hljs-keyword">if</span> deleteResult, err = collection.DeleteMany(ctx, bson.D&#123;&#123;<span class="hljs-string">&quot;task_timestamp.start_time&quot;</span>, bson.M&#123;<span class="hljs-string">&quot;$lt&quot;</span>: time.Now().Unix()&#125;&#125;&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(*deleteResult)<br><br><span class="hljs-keyword">if</span> deleteResult, err = collection.DeleteMany(ctx, bson.D&#123;&#123;<span class="hljs-string">&quot;task_command&quot;</span>, <span class="hljs-string">&quot;echo hell&quot;</span>&#125;&#125;); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(*deleteResult)<br><br><br><span class="hljs-comment">// $修饰器======&gt; $set,$inc,$unset,$push,$pull,$pop,$lt,$gt,$lte,&amp;gte</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go的etcd客户端API</title>
    <link href="/2021/09/27/etcd%E5%AE%A2%E6%88%B7%E7%AB%AFclientv3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8demo/"/>
    <url>/2021/09/27/etcd%E5%AE%A2%E6%88%B7%E7%AB%AFclientv3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8demo/</url>
    
    <content type="html"><![CDATA[<h3 id="golang客户端API"><a href="#golang客户端API" class="headerlink" title="golang客户端API"></a>golang客户端API</h3><p>这里是对理解etcd的一些有用的<a href="https://www.cnblogs.com/FG123/p/13632095.html">帮助1</a><a href="https://blog.csdn.net/m0_59402407/article/details/118729871">帮助2</a></p><p>注意: 命令行使用时加上环境变量<code>ETCDCTL_API=3 etcdctl get /cron --prefix</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">var</span>(<br>errerror<br>etcdConfigclientv3.Config<br>etcdClient*clientv3.Client<br>etcdLeaseclientv3.Lease<br>etcdLeaseGrantResp*clientv3.LeaseGrantResponse<br>etcdLeaseKeepAliveRespChan&lt;-<span class="hljs-keyword">chan</span> *clientv3.LeaseKeepAliveResponse<br>etcdLeaseKeepAliveResp*clientv3.LeaseKeepAliveResponse<br>etcdKVclientv3.KV<br>etcdPutResp*clientv3.PutResponse<br>etcdGetResp*clientv3.GetResponse<br>etcdDelResp*clientv3.DeleteResponse<br><br>watchStartRevision<span class="hljs-keyword">int64</span><br>watcherclientv3.Watcher<br>watchRespChanclientv3.WatchChan<br>watchRespclientv3.WatchResponse<br>watchEvent*clientv3.Event<br><br>ctxcontext.Context<br>cancelFunccontext.CancelFunc<br>)<br><br><span class="hljs-comment">// etcd客户端配置</span><br>etcdConfig = clientv3.Config&#123;<br>Endpoints: []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;0.0.0.0:2379&quot;</span>&#125;,  <span class="hljs-comment">// 集群列表</span><br>DialTimeout: <span class="hljs-number">5</span>*time.Second,<br>        <span class="hljs-comment">// 没有grpc.WithBlock()，clientv3.New()将会立即返回，然后在后台连接etcd</span><br><span class="hljs-comment">// 这样会造成连不上etcd时也不会返回error</span><br>DialOptions:  []grpc.DialOption&#123;<br>grpc.WithBlock(),<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 根据配置发起连接, 创建客户端(非阻塞)</span><br><span class="hljs-keyword">if</span> etcdClient, err = clientv3.New(etcdConfig); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 申请一个租约</span><br>etcdLease = clientv3.NewLease(etcdClient)<br><br><span class="hljs-comment">// 申请一个10秒的租约(没连到etcd服务器的话这里会阻塞)</span><br><span class="hljs-keyword">if</span> etcdLeaseGrantResp, err = etcdLease.Grant(context.TODO(), <span class="hljs-number">10</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">/*******续租********/</span><br><span class="hljs-comment">// 应用：获取分布式锁</span><br><span class="hljs-comment">// 续租10秒，</span><br>ctx, cancel := context.WithTimeout(context.TODO(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">// 自动续租，KeepAlive启动一个协程发出续租请求。若传入context.TODO()则为永久续租</span><br><span class="hljs-comment">// 返回一个管道，从中取出每次续租请求的应答</span><br><span class="hljs-keyword">if</span> etcdLeaseKeepAliveRespChan, err = etcdLease.KeepAlive(ctx, etcdLeaseGrantResp.ID); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 处理预约续租应答的协程</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span>&#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span>  etcdLeaseKeepAliveResp = &lt;-etcdLeaseKeepAliveRespChan:<br><span class="hljs-keyword">if</span> etcdLeaseKeepAliveResp == <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;子协程续租过期&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;子协程续租:&quot;</span>, etcdLeaseKeepAliveResp.ID)<br>&#125;<br>&#125;<br>&#125;<br>&#125;()<br><span class="hljs-comment">/*******续租********/</span><br><br><br><span class="hljs-comment">// 获取kv相关API的子集</span><br>etcdKV = clientv3.NewKV(etcdClient)<br><br><span class="hljs-comment">// put一个kv，并让他与租约关联起来</span><br><span class="hljs-keyword">if</span> etcdPutResp, err = etcdKV.Put(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;gys&quot;</span>, clientv3.WithLease(etcdLeaseGrantResp.ID), clientv3.WithPrevKV()); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// put成功</span><br>logrus.Infoln(etcdPutResp.Header.Revision)<br><br><span class="hljs-comment">// 定时查看key</span><br><span class="hljs-keyword">for</span>&#123;<br><span class="hljs-keyword">if</span> etcdGetResp, err = etcdKV.Get(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> etcdGetResp.Count == <span class="hljs-number">0</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;租约过期&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>logrus.Infoln(<span class="hljs-string">&quot;没过期&quot;</span>, etcdGetResp.Kvs)<br><br><span class="hljs-comment">// 修改</span><br><span class="hljs-keyword">if</span> etcdPutResp, err = etcdKV.Put(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;syg&quot;</span>, clientv3.WithLease(etcdLeaseGrantResp.ID), clientv3.WithPrevKV()); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> etcdPutResp.PrevKv != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;修改kv，上一次为:&quot;</span>, etcdPutResp.PrevKv)<br>&#125;<br>&#125;<br>time.Sleep(<span class="hljs-number">2</span>*time.Second)<br>&#125;<br><br><span class="hljs-comment">// put一个kv</span><br><span class="hljs-keyword">if</span> etcdPutResp, err = etcdKV.Put(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;haha&quot;</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 删除kv</span><br><span class="hljs-keyword">if</span> etcdDelResp , err = etcdKV.Delete(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, clientv3.WithPrevKV()); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(etcdDelResp.PrevKvs) != <span class="hljs-number">0</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;删除了：&quot;</span>, etcdDelResp.PrevKvs)<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-comment">// watch</span><br><br>ctx, cancelFunc = context.WithCancel(context.TODO())<br>time.AfterFunc(<span class="hljs-number">8</span>*time.Second, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>cancelFunc()<br>&#125;)<br><br><span class="hljs-comment">// 模拟分布式的修改</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br><span class="hljs-comment">// put一个kv</span><br><span class="hljs-keyword">if</span> etcdPutResp, err = etcdKV.Put(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;haha&quot;</span>+strconv.Itoa(i)); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br><span class="hljs-comment">// 删除kv</span><br><span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> etcdDelResp, err = etcdKV.Delete(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, clientv3.WithPrevKV()); err != <span class="hljs-literal">nil</span> &#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;<br>time.Sleep(time.Second)<br>&#125;<br>&#125;()<br><br><br>time.Sleep(time.Second)<br><br><span class="hljs-comment">// 获取key后，监听该值</span><br><br><span class="hljs-keyword">if</span> etcdGetResp, err = etcdKV.Get(context.TODO(), <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(etcdGetResp.Kvs) != <span class="hljs-number">0</span> &#123;<br>logrus.Infoln(<span class="hljs-string">&quot;当前kv: &quot;</span>, etcdGetResp.Kvs)<br>&#125;<br><br><span class="hljs-comment">// revision是单调递增的</span><br>watchStartRevision = etcdGetResp.Header.Revision + <span class="hljs-number">1</span><br><br><span class="hljs-comment">// 创建watcher</span><br>watcher = clientv3.NewWatcher(etcdClient)<br><br><span class="hljs-comment">// 开始监听</span><br><span class="hljs-comment">// 从kv某个版本开始监听</span><br><span class="hljs-comment">// 返回的是一个管道，当观测值发生变化时，管道可读</span><br>watchRespChan = watcher.Watch(ctx, <span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, clientv3.WithRev(watchStartRevision))<br><br><span class="hljs-keyword">for</span> watchResp = <span class="hljs-keyword">range</span> watchRespChan&#123;<br><span class="hljs-keyword">for</span> _, watchEvent = <span class="hljs-keyword">range</span> watchResp.Events &#123;<br><span class="hljs-keyword">switch</span> watchEvent.Type &#123;<br><span class="hljs-keyword">case</span> clientv3.EventTypePut:<br>logrus.Infoln(<span class="hljs-string">&quot;修改前版本:&quot;</span>, watchEvent.Kv.CreateRevision, <span class="hljs-string">&quot;\t修改后版本:&quot;</span>, watchEvent.Kv.ModRevision)<br><span class="hljs-keyword">case</span> clientv3.EventTypeDelete:<br>logrus.Infoln(<span class="hljs-string">&quot;删除版本:&quot;</span>, watchEvent.Kv.ModRevision)<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <br>    <br>    <span class="hljs-comment">// OP</span><br>    <span class="hljs-comment">// 创建op对象</span><br>op = clientv3.OpPut(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;heh&quot;</span>)<br><br><span class="hljs-comment">// 执行op</span><br><span class="hljs-keyword">if</span> opResp, err = etcdKV.Do(context.TODO(), op); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(opResp.Put())<br><br>op = clientv3.OpGet(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>)<br><span class="hljs-keyword">if</span> opResp, err = etcdKV.Do(context.TODO(), op); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(opResp.Get())<br><br>op = clientv3.OpDelete(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>)<br><span class="hljs-keyword">if</span> opResp, err = etcdKV.Do(context.TODO(), op); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logrus.Infoln(opResp.Del())<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>etcd</category>
      
      <category>分布式</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>etcd</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>etcd分布式乐观锁</title>
    <link href="/2021/09/25/%E5%9F%BA%E4%BA%8Eetcd%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%90%E8%A7%82%E9%94%81/"/>
    <url>/2021/09/25/%E5%9F%BA%E4%BA%8Eetcd%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%90%E8%A7%82%E9%94%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// op操作和txn事务实现乐观锁，lease实现锁过期</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-keyword">var</span>(<br>errerror<br>etcdConfigclientv3.Config<br>etcdClient*clientv3.Client<br>etcdKVclientv3.KV<br><br>etcdLeaseclientv3.Lease<br>etcdLeaseGrantResp*clientv3.LeaseGrantResponse<br>etcdLeaseIDclientv3.LeaseID<br>etcdLeaseKeepAliveRespChan&lt;-<span class="hljs-keyword">chan</span> *clientv3.LeaseKeepAliveResponse<br>etcdLeaseKeepAliveResp*clientv3.LeaseKeepAliveResponse<br>etcdLeaseRevokeResp*clientv3.LeaseRevokeResponse<br><br>ctxcontext.Context<br>cancelFunccontext.CancelFunc<br><br>etcdTxnclientv3.Txn<br>etcdTxnResp*clientv3.TxnResponse<br>)<br><br><span class="hljs-comment">// etcd客户端配置</span><br>etcdConfig = clientv3.Config&#123;<br>Endpoints: []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;0.0.0.0:2379&quot;</span>&#125;,  <span class="hljs-comment">// 集群列表</span><br>DialTimeout: <span class="hljs-number">5</span>*time.Second,<br>&#125;<br><br><span class="hljs-comment">// 根据配置发起连接, 创建客户端(非阻塞)</span><br><span class="hljs-keyword">if</span> etcdClient, err = clientv3.New(etcdConfig); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 获取kv相关API的子集</span><br>etcdKV = clientv3.NewKV(etcdClient)<br><br><span class="hljs-comment">/****************加锁(租约+续租+抢占key)*******************/</span><br><br><span class="hljs-comment">// 申请一个租约</span><br>etcdLease = clientv3.NewLease(etcdClient)<br><br><span class="hljs-comment">// 申请一个2秒的租约</span><br><span class="hljs-keyword">if</span> etcdLeaseGrantResp, err = etcdLease.Grant(context.TODO(), <span class="hljs-number">2</span>); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 获取租约ID</span><br>etcdLeaseID = etcdLeaseGrantResp.ID<br><br><span class="hljs-comment">// 用于手动取消续租的上下文</span><br>ctx, cancelFunc = context.WithCancel(context.TODO())<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// cancelFunc执行后只是取消续租而已，这里再直接取消租约</span><br><span class="hljs-keyword">if</span> etcdLeaseRevokeResp, err = etcdLease.Revoke(context.TODO(), etcdLeaseID); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br>&#125;<br>&#125;()<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br><span class="hljs-comment">// 续租</span><br><span class="hljs-keyword">if</span> etcdLeaseKeepAliveRespChan, err = etcdLease.KeepAlive(ctx, etcdLeaseID); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 处理续租应答</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span>&#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> etcdLeaseKeepAliveResp = &lt;-etcdLeaseKeepAliveRespChan:<br><span class="hljs-keyword">if</span> etcdLeaseKeepAliveResp == <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;子协程续租过期&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;子协程续租&quot;</span>)<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// if !exist(key) then set(key) else fail to get lock</span><br><span class="hljs-comment">// 创建事务</span><br>etcdTxn = etcdKV.Txn(context.TODO())<br><br><span class="hljs-comment">// 定义事务</span><br>etcdTxn.If(clientv3.Compare(clientv3.CreateRevision(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>), <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0</span>)).Then(<br>clientv3.OpPut(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, clientv3.WithLease(etcdLeaseID))).Else(<br>clientv3.OpGet(<span class="hljs-string">&quot;/cron/lock/job1&quot;</span>))<br><br><span class="hljs-comment">// 提交事务</span><br><span class="hljs-keyword">if</span> etcdTxnResp, err = etcdTxn.Commit(); err != <span class="hljs-literal">nil</span>&#123;<br>logrus.Infoln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 判断事务是否成功</span><br><span class="hljs-keyword">if</span> etcdTxnResp.Succeeded &#123;<br>logrus.Infoln(<span class="hljs-string">&quot;抢到锁&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>logrus.Infoln(<span class="hljs-string">&quot;锁被占用: &quot;</span> , etcdTxnResp.Responses)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><br><span class="hljs-comment">/****************处理业务*******************/</span><br><br>logrus.Infoln(<span class="hljs-string">&quot;处理业务中...&quot;</span>)<br>time.Sleep(<span class="hljs-number">5</span>*time.Second)<br><br><span class="hljs-comment">/****************释放锁(取消续租+释放租约)*******************/</span><br><span class="hljs-comment">// defer 释放锁,取消租约</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后缀数组</title>
    <link href="/2021/09/24/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2021/09/24/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="倍增法求sa和rank"><a href="#倍增法求sa和rank" class="headerlink" title="倍增法求sa和rank"></a>倍增法求sa和rank</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//后缀数组(倍增法)</span><br><span class="hljs-comment">// suffix[i]: 坐标从i到n的后缀数组</span><br><br><span class="hljs-comment">// sa[i]: 排名为i的后缀</span><br><span class="hljs-comment">// Rank[i]: i后缀的排名</span><br><span class="hljs-comment">// height[i]: sa[i]和sa[i-1]的最长公共前缀的长度</span><br><span class="hljs-keyword">int</span> sa[maxn], Rank[maxn], height[maxn];<br><br><span class="hljs-comment">// t1和t2是第一关键字和第二关键字排名时的需要的额外数组,c是计数数组</span><br><span class="hljs-keyword">int</span> t1[maxn], t2[maxn], c[maxn];<br><br><span class="hljs-comment">// s是输入的数组</span><br><span class="hljs-keyword">int</span> s[maxn];<br><br><span class="hljs-comment">// da(s串, s串的长度, s串中的最大排名+1) -&gt; da(s, 6, 5+1)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">da</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> *str, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> *x = t1, *y = t2, i, j;<br><br>    <span class="hljs-comment">// 首次基数排序，第一关键字排序</span><br>    <span class="hljs-comment">// x[i]: 起始位置为i的后缀的第一关键字的排名(初始排名就直接依照ASCII大小,故直接将str拷贝至x)</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 初始化计数数组</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i] = str[i]] ++;<span class="hljs-comment">// 对第一关键字排名(x中的值)计数</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];<span class="hljs-comment">// 累加计数</span><br>    <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[str[i]]] = i;<span class="hljs-comment">// 按照每个后缀首个值的对应累加计数进行排名</span><br>    <br>    <span class="hljs-comment">// str    1 2 5 3 2 4</span><br>    <span class="hljs-comment">// x      1 2 5 3 2 4</span><br>    <span class="hljs-comment">// c_idx  0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// c        1 2 1 1 1          // 计数</span><br>    <span class="hljs-comment">// c        1 3 4 5 6          // 累加计数得到排名 </span><br>    <span class="hljs-comment">// sa_idx 0 1 2 3 4 5 6 7     </span><br>    <span class="hljs-comment">// sa     0 1 4 3 5 2   // 按第一关键字排序的排名</span><br>    <br>    <span class="hljs-comment">// 倍增（以i起始，长度为j的串为第一关键字,以i+j-1起始，长度为j的串为第二关键字,的后缀）</span><br>    <span class="hljs-comment">// 注意，j代表的是关键字长度</span><br>    <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>; j&lt;=n; j &lt;&lt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 根据第一关键字排名sa数组对第二关键字排序</span><br>        <span class="hljs-comment">// y[i]是按照第二关键字排序时，排名为i的后缀对应的第一关键字(长度为j)的坐标</span><br>        <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//[n-j,n)长度不够，没有对应的第二关键字，故按照第二关键字排名时最小,将后面j个后缀排在前j</span><br>        <span class="hljs-keyword">for</span> (i=n-j; i&lt;n; i++) y[p++] = i; <br>        <span class="hljs-comment">// 前j个第一关键字不能作为某个后缀的第二关键字，因为前面没有足够的j个元素来当作第一关键字</span><br>        <span class="hljs-comment">// sa[i]是按第一关键字排名时的坐标，sa[i]-j就是按第二关键字排名时的坐标</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-keyword">if</span> (sa[i] &gt;= j) y[p++] = sa[i] - j;<br>        <br>    <span class="hljs-comment">// y[i]是排名为i的第二关键字所对应第一关键字的起始位置,即按第二关键字排序的原数组的坐标   </span><br>    <span class="hljs-comment">// str    1 2 5 3 2 4</span><br>    <span class="hljs-comment">// x      1 2 5 3 2 4</span><br>    <span class="hljs-comment">// c_idx  0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// c        1 2 1 1 1          // 计数</span><br>    <span class="hljs-comment">// c        1 3 4 5 6          // 累加计数得到排名 </span><br>    <span class="hljs-comment">// sa_idx 0 1 2 3 4 5 6 7     </span><br>    <span class="hljs-comment">// sa     0 1 4 3 5 2   // 按第一关键字排序的排名 </span><br>    <br>    <span class="hljs-comment">// j == 1</span><br>        <br>    <span class="hljs-comment">// y_idx  0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// y      5 0 3 2 4 1          // 即 4 12 32 53 24 25，正好是按第二关键字排序的结果</span><br> <br>        <span class="hljs-comment">// 双关键字排序</span><br>        <span class="hljs-comment">// 再次按第一关键字排序，更新sa数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// 初始化计数数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i]] ++;      <span class="hljs-comment">// 第一关键字每个排名有几个,计数</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];  <span class="hljs-comment">// 累加计数</span><br>        <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[x[y[i]]]] = y[i];  <span class="hljs-comment">// 按第一关键字的累加计数排名，因为y[i]本身是按第二关键字排序的，这样排序后，就能得到最终有序结果</span><br>    <br>    <span class="hljs-comment">// str    1 2 5 3 2 4 </span><br>    <span class="hljs-comment">// c_idx  0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// c        1 2 1 1 1</span><br>    <span class="hljs-comment">// c        1 3 4 5 6</span><br>    <span class="hljs-comment">// sa_idx 0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// sa     0 4 1 3 5 2         // 即 12 24 25 32 4 53, 正好是按两个关键字排序的结果 </span><br>        <br>        <span class="hljs-comment">// 更新x数组，x[i]: 起始位置为i的后缀的第一关键字的排名(初始排名就直接依照ASCII大小)</span><br>        <span class="hljs-built_in">swap</span> (x, y);<br>        p = <span class="hljs-number">1</span>, x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;n; i++) &#123;<br>            <span class="hljs-comment">// 若第一关键字排名y[sa[i-1]]==y[sa[i]]且第二关键字排名y[sa[i-1]+j]==y[sa[i]+j]</span><br>            <span class="hljs-comment">// 则总排名一样</span><br>            <span class="hljs-comment">// 此处y就是上面的x,为了节省时空间(swap)</span><br>            x[sa[i]] = (sa[i<span class="hljs-number">-1</span>]+j&lt;n &amp;&amp; sa[i]+j&lt;n &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]]==y[sa[i]] &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]+j]==y[sa[i]+j]) ? p<span class="hljs-number">-1</span> : p++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (p == n) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 如果排名超过了n，则n个后缀已经排好了.否则存在同一排名的后缀，继续按照下一个关键字排名</span><br>        m = p; <span class="hljs-comment">// 更新串中的最大值</span><br>        <br>    <span class="hljs-comment">// str    1 2 5 3 2 4</span><br>    <span class="hljs-comment">// y_idx  0 1 2 3 4 5 6 7</span><br>    <span class="hljs-comment">// y      5 0 3 2 4 1</span><br>    <span class="hljs-comment">// x      0 2 5 3 1 4        // 即 12 24 25 32 4 53, 以这个为第一关键字递归</span><br>    <br>    <span class="hljs-comment">// 125324 -&gt; 24 -&gt; 25324 -&gt; 324 -&gt; 4 -&gt; 5324</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//计算Rank数组</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) Rank[sa[i]] = i;<br>    <br>    <span class="hljs-comment">//计算height数组</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(Rank[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 排名为0的后缀的height为0</span><br>        <span class="hljs-keyword">if</span> (k)  k --;<br>        <span class="hljs-comment">// j是当前排名后缀Rank[i]的前一个排名Rank[i]-1的后缀的坐标</span><br>        j = sa[Rank[i]<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span> (str[i+k]==str[j+k]) k++;<br>        height[Rank[i]] = k;<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><p>这里是<a href="https://www.acwing.com/problem/content/2717/">题目链接</a></p><p><img src="/2021/09/24/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/image-20210924195009141-16324842102971.png" alt="image-20210924195009141"></p><p><img src="/2021/09/24/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/image-20210924195027830.png" alt="image-20210924195027830"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-comment">//后缀数组(倍增法)</span><br><span class="hljs-comment">// suffix[i]: 坐标从i到n的后缀数组</span><br><br><span class="hljs-comment">// sa[i]: 排名为i的后缀(suffix_array)</span><br><span class="hljs-comment">// rank[i]: i后缀的排名</span><br><span class="hljs-comment">// height[i]: sa[i]和sa[i-1]的最长公共前缀的长度</span><br><span class="hljs-keyword">int</span> sa[maxn], Rank[maxn], height[maxn];<br><br><span class="hljs-comment">// c是计数数组</span><br><span class="hljs-comment">// t1和t2是第一关键字和第二关键字排名时的需要的额外数组</span><br><span class="hljs-keyword">int</span> t1[maxn], t2[maxn], c[maxn];<br><br><span class="hljs-comment">// s是输入数组</span><br><span class="hljs-keyword">char</span> s[maxn];<br><br><span class="hljs-comment">// 输入为字符串数组</span><br><span class="hljs-comment">// str是下标从0开始的字符串, n是字符串长度, m是最大排名加一</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">da</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *str, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> *x = t1, *y = t2, i, j;<br><br>    <span class="hljs-comment">// 首次基数排序</span><br>    <span class="hljs-comment">// x[i]: 起始位置为i的后缀的第一关键字的排名(初始排名就直接依照ASCII大小)</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 初始化计数数组</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i] = str[i]] ++;<span class="hljs-comment">// 对第一关键字排名(x中的值)计数</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];<span class="hljs-comment">// 累加计数</span><br>    <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[x[i]]] = i;    <span class="hljs-comment">// 按照每个后缀首个值的对应累加计数进行排名</span><br><br>    <span class="hljs-comment">// 倍增（以i起始，长度为j的串为第一关键字的后缀）</span><br>    <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>; j&lt;=n; j &lt;&lt;= <span class="hljs-number">1</span>)<br>    &#123;<br><br>        <span class="hljs-comment">//用sa数组对第二关键字排序</span><br>        <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=n-j; i&lt;n; i++) y[p++] = i;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-keyword">if</span> (sa[i] &gt;= j) y[p++] = sa[i] - j;<br><br>        <span class="hljs-comment">// 再次按第一关键字排序，更新sa数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// 初始化计数数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i]] ++;      <span class="hljs-comment">// 第一关键字排名计数</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];  <span class="hljs-comment">// 累加计数</span><br>        <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[x[y[i]]]] = y[i];  <span class="hljs-comment">// 按第一关键字的累加计数排名，因为y[i]本身是按第二关键字排序的，这样排序后，就能得到最终有序结果.</span><br>        <br>        <span class="hljs-comment">// 更新x数组</span><br>        <span class="hljs-built_in">swap</span> (x, y);<br>        p = <span class="hljs-number">1</span>, x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;n; i++)  x[sa[i]] =  (sa[i<span class="hljs-number">-1</span>]+j&lt;n &amp;&amp; sa[i]+j&lt;n &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]]==y[sa[i]] &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]+j] == y[sa[i]+j]) ? p<span class="hljs-number">-1</span> : p++ ;<br><br>        <span class="hljs-keyword">if</span>(p == n) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 如果排名超过了n，则n个后缀已经排好了.否则存在同一排名的后缀，继续按照下一个关键字排名</span><br>        m = p; <span class="hljs-comment">// 更新串中的最大值</span><br>   <br>    &#125;<br>    <br>    <span class="hljs-comment">//计算Rank数组</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) Rank[sa[i]] = i;<br><br>    <span class="hljs-comment">//计算height数组</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(Rank[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;  <br>        <span class="hljs-keyword">if</span> (k)  k --;<br>        j = sa[Rank[i]<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span> (i+k &lt; n &amp;&amp; j+k &lt; n &amp;&amp; str[i+k]==str[j+k]) k++;<br>        height[Rank[i]] = k;<br>    &#125;  <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-built_in">da</span>(s, n, <span class="hljs-string">&#x27;z&#x27;</span>+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, sa[i]+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, height[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>后缀数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言编程坑点</title>
    <link href="/2021/09/24/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9D%91%E7%82%B9/"/>
    <url>/2021/09/24/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9D%91%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="go语言编程坑点"><a href="#go语言编程坑点" class="headerlink" title="go语言编程坑点"></a>go语言编程坑点</h2><p><strong>本文将长期追加更新</strong></p><p>1、switch碰到大括号换行</p><p>go编程原则：大括号都不要换行！防止出现意想不到的结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// switch判断条件默认为true</span><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">false</span>:<br>fmt.Println(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-literal">true</span>:<span class="hljs-comment">// OK</span><br>fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// switch支持初始语句;表达式语句</span><br><span class="hljs-keyword">switch</span> value := f(); value&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">false</span>:<span class="hljs-comment">// OK</span><br>fmt.Println(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-literal">true</span>:<br>fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 表达式语句省略时默认为true</span><br><span class="hljs-keyword">switch</span> value := f(); &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">false</span>:<br>fmt.Println(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-literal">true</span>:<span class="hljs-comment">// OK</span><br>fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 表达式语句省略时默认为true【这里大括号换行了】</span><br><span class="hljs-keyword">switch</span> f()  <span class="hljs-comment">// 等同于 switch f(); &#123;</span><br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">false</span>:<br>fmt.Println(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-literal">true</span>:<span class="hljs-comment">// OK</span><br>fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>2、defer碰到exit</p><p>os.exit(0)将直接退出程序因此defer将不会被执行。使用runtime.Goexit()执行完defer后再退出程序。</p><p>3、defer、return、panic顺序</p><p><strong>return的顺序是：返回值赋值，defer延迟函数，汇编ret指令。</strong>【因此defer可以修改返回值】</p><p><strong>defer是按照栈的顺序执行，先进后出。</strong><br><strong>panic直接结束函数调用，panic之前执行defer。</strong><br><strong>panic的返回值，通过recover函数来获取。defer中调用recover（defer必须在panic之前声明）可向上屏蔽当前函数引发的panic。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli简单使用</title>
    <link href="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="vue-cli-v4-x-x创建项目一般流程"><a href="#vue-cli-v4-x-x创建项目一般流程" class="headerlink" title="vue-cli v4.x.x创建项目一般流程"></a>vue-cli v4.x.x创建项目一般流程</h3><p><code>注：补充点可最后再看</code></p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><img src="vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8//image-20210915172931218.png" alt="image-20210915172931218"></p><h4 id="view和component"><a href="#view和component" class="headerlink" title="view和component"></a>view和component</h4><p>一个是页面视图级别，一个是页面视图中的一个组件级别，一般地，view &gt; container &gt; component</p><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p><code>src/router/index.js</code></p><p><img src="vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8//image-20210915174753777.png" alt="image-20210915174753777"></p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916102328040.png" alt="image-20210916102328040"></p><p>路由懒加载，防止一起打包的文件过大，传输时间太久影响用户体验。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210915205442775.png" alt="image-20210915205442775"></p><p>嵌套路由</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916102202767.png" alt="image-20210916102202767"></p><h4 id="使用路由插件"><a href="#使用路由插件" class="headerlink" title="使用路由插件"></a>使用路由插件</h4><p><code>src/main.js</code></p><p><img src="vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8//image-20210915175002539.png" alt="image-20210915175002539"></p><h4 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h4><p>首先看一下<code>public/index.html</code>，body中只用了一个div，id为app，前面将vue实例挂载到了这个元素上面。我知道对于组件来说，el属性是将该组件挂载到html中的某个元素上面，如果该组件同时声明了template属性，则会将template中的内容完全替换挂载的元素。因此，App.vue中的template将替换index.html中的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><p><img src="vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8//image-20210915191616727.png" alt="image-20210915191616727"></p><p>接着我们再看一下<code>src/App.vue</code>, template中通过<code>router-link</code>标签建立一个链接，to属性指定路由，当该标签被点击后，路由对应的组件将被展示在<code>router-view</code>标签位置。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916102739517.png" alt="image-20210916102739517"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tex">补充:<br>在vue-router3.x的时候，router-link有一个tag属性，可以决定router-link到底渲染成什么元素,但是在vue-router4.x开始，该属性被移除了。<br>vue-router4.x给我们提供了更加具有灵活性的v-slot的方式来定制渲染的内容；<br><br>v-slot使用方法：<br>1、&lt;router-link&gt;<br>首先，我们需要使用custom表示我们整个元素要自定义，如果不写，那么自定义的内容会被包裹在一个 a 元素中；<br>其次，我们使用v-slot来作用域插槽来获取内部传给我们的值<br>href：解析后的 URL；<br>    route：解析后的规范化的route对象；<br>    navigate：触发导航的函数；<br>    isActive：是否匹配的状态；<br>    isExactActive：是否是精准匹配的状态；<br>2、&lt;router-view&gt;<br>router-view也提供给我们一个插槽，可以用于 &lt;transition&gt; 和 &lt;keep-alive&gt; 组件来包裹路由组件：<br>    Component：要渲染的组件；<br>    route：解析出的标准化路由对象；<br></code></pre></td></tr></table></figure><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><h5 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h5><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916110938474.png" alt="image-20210916110938474"></p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916111217161.png" alt="image-20210916111217161"></p><h5 id="路由独有守卫"><a href="#路由独有守卫" class="headerlink" title="路由独有守卫"></a>路由独有守卫</h5><p>很明显，它作用在全局路由守卫之后，才可以覆盖全局配置，定义自己的独有配置。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916141959909.png" alt="image-20210916141959909"></p><h5 id="组件独有守卫"><a href="#组件独有守卫" class="headerlink" title="组件独有守卫"></a>组件独有守卫</h5><p>对单个组件配置路由守卫。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916132625455.png" alt="image-20210916132625455"></p><p>点击顺序 [商品 =&gt; 链接 =&gt; 商品], 可以看出来组件created在组件路由enter之后，组件unmounted在组件路由leave之后。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916141453998.png" alt="image-20210916141453998"></p><p>调用时机以及相关性质</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Foo = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`...`</span>,<br>  <span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;<br>    <span class="hljs-comment">// 在渲染该组件的对应路由被 confirm 前调用</span><br>    <span class="hljs-comment">// 不！能！获取组件实例 `this`</span><br>    <span class="hljs-comment">// 因为当守卫执行前，组件实例还没被创建</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;<br>    <span class="hljs-comment">// 在当前路由改变，但是该组件被复用时调用</span><br>    <span class="hljs-comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br>    <span class="hljs-comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br>    <span class="hljs-comment">// 可以访问组件实例 `this`</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">beforeRouteLeave</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)</span> &#123;<br>    <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span><br>    <span class="hljs-comment">// 可以访问组件实例 `this`</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">补充导航解析流程：<br>1、导航被触发。<br>2、在失活的组件里调用 beforeRouteLeave 守卫。<br>3、调用全局的 beforeEach 守卫。<br>4、在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。<br>5、在路由配置里调用 beforeEnter。<br>6、解析异步路由组件。<br>7、在被激活的组件里调用 beforeRouteEnter。<br>8、调用全局的 beforeResolve 守卫(2.5+)。<br>9、导航被确认。<br>10、调用全局的 afterEach 钩子。<br>11、触发 DOM 更新。<br>12、调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。<br></code></pre></td></tr></table></figure><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p>created与activated的比较</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210916161407312.png" alt="image-20210916161407312"></p><p>新版本中，已经不能直接使用该<code>keep-alive</code>标签包裹想要缓存的<code>路由组件视图</code>。若要使用，则要通过slot来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span> can no longer be used directly inside <span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span> or <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span>.<br>Use slot props instead:<br><br><span class="hljs-comment">&lt;!-- ERROR---&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- OK---&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Vue3生命周期"><a href="#Vue3生命周期" class="headerlink" title="Vue3生命周期"></a>Vue3生命周期</h4><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc4MDgxOA==,size_16,color_FFFFFF,t_70.png" alt="img"></p><h4 id="给路径创建别名"><a href="#给路径创建别名" class="headerlink" title="给路径创建别名"></a>给路径创建别名</h4><p>在项目根目录下创建文件<code>vue.config.js</code>,按以下流程创建别名，注意使用方式。以下包含其他常用配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 转换绝对路径</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> path.join(__dirname, dir)<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">chainWebpack</span>:<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 给路径起别名</span><br>        <span class="hljs-comment">// &lt;img src=&quot;~assets/img/tabbar/home.svg&quot; alt=&quot;&quot;&gt;,在html标签中，必须在路径前添加~符号</span><br>        <span class="hljs-comment">// css中可以直接使用</span><br>        <span class="hljs-comment">// router路由配置中：直接使用</span><br>        <span class="hljs-comment">// 其他不可以</span><br>        config.resolve.alias.set(<br>            <span class="hljs-string">&#x27;@&#x27;</span>, resolve(<span class="hljs-string">&#x27;./src&#x27;</span>)<br>        ).set(<br>            <span class="hljs-string">&#x27;assets&#x27;</span>, resolve(<span class="hljs-string">&#x27;./src/assets&#x27;</span>)<br>        ).set(<br>            <span class="hljs-string">&#x27;component&#x27;</span>, resolve(<span class="hljs-string">&#x27;./src/components&#x27;</span>)<br>        ).set(<br>            <span class="hljs-string">&#x27;views&#x27;</span>, resolve(<span class="hljs-string">&#x27;./src/views&#x27;</span>)<br>        )<br>        <br>        <span class="hljs-comment">// 修改index.html的title</span><br>        config.plugin(<span class="hljs-string">&#x27;html&#x27;</span>).tap(<br>            <span class="hljs-function"><span class="hljs-params">args</span> =&gt;</span> &#123;<br>                args[<span class="hljs-number">0</span>].title = <span class="hljs-string">&#x27;mall&#x27;</span><br>                <span class="hljs-keyword">return</span> args<br>            &#125;<br>        )<br>    &#125;,<br>    <br>    <span class="hljs-comment">// 配置favicon</span><br>    <span class="hljs-comment">// favicon.ico放在public目录下</span><br>    <span class="hljs-attr">pluginOptions</span>: &#123;<br>        <span class="hljs-attr">pwa</span>: &#123;<br>            <span class="hljs-attr">iconPaths</span>: &#123;<br>                <span class="hljs-attr">favicon64</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>                <span class="hljs-attr">favicon32</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>                <span class="hljs-attr">favicon16</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>                <span class="hljs-attr">appleTouchIcon</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>                <span class="hljs-attr">maskIcon</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>                <span class="hljs-attr">msTileImage</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span><br>            &#125;<br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>在VueX对象中，含有以下成员：</p><p>​    <code>state</code>     存放状态</p><p>​    <code>mutations</code>   state成员操作。<code>mutations</code>是操作<code>state</code>数据的方法的集合，比如对该数据的修改、增加、删除等等。</p><p>​    <code>getters</code>     加工state成员给外界</p><p>​    <code>actions</code>     异步操作</p><p>​    <code>modules</code>   模块化状态管理</p><p>下面是vuex工作的流程图</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210917130955282.png" alt="image-20210917130955282"></p><p>首先，<code>Vue</code>组件如果调用某个<code>VueX</code>的方法过程中需要向后端请求时或者说出现异步操作时，需要<code>dispatch</code> VueX中<code>actions</code>的方法，以保证数据的同步。可以说，<code>action</code>的存在就是为了让<code>mutations</code>中的方法能在异步操作中起作用。</p><p>如果没有异步操作，那么我们就可以直接在组件内提交状态中的<code>Mutations</code>中自己编写的方法来达成对<code>state</code>成员的操作。注意，<code>1.3.3节</code>中有提到，不建议在组件中直接对<code>state</code>中的成员进行操作，这是因为直接修改(例如：<code>this.$store.state.name = &#39;hello&#39;</code>)的话不能被<code>VueDevtools</code>所监控到。</p><p>最后被修改后的state成员会被渲染到组件的原位置当中去。</p><p>以下是<code>src/store/index.js</code>文件内容</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs pf">import &#123; createStore &#125; <span class="hljs-keyword">from</span> &#x27;vuex&#x27;<br><br>export <span class="hljs-keyword">default</span> createStore(&#123;<br>  // 获取值方式：this.<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.count。不要直接修改，通过mutations或者actions修改【响应式】<br>  <span class="hljs-keyword">state</span>: &#123;<br>    count: <span class="hljs-number">1</span><br>  &#125;,<br><br>  // mutation中通常不进行异步操作,因为将会引起vuedevtools的数据失效，不能跟踪更新后的值。<br>  // mutations方法都有默认的形参。<span class="hljs-number">1</span>、<span class="hljs-keyword">state</span>是当前VueX对象中的<span class="hljs-keyword">state</span>。<span class="hljs-number">2</span>、payload是该方法在被调用时传递参数使用的<br>  // 调用方式：<br>  // this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&quot;increase&quot;</span>,  <span class="hljs-number">2</span>)<br>  // this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&quot;decrease&quot;</span>)<br>  // this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&quot;printMsg&quot;</span>, &#123;name:<span class="hljs-string">&quot;gys&quot;</span>, msg: <span class="hljs-string">&quot;hello&quot;</span>&#125;)<br>  // this.<span class="hljs-variable">$store</span>.commit(&#123;<br>  //      type: &#x27;printMsg&#x27;,<br>  //      name: <span class="hljs-string">&quot;gys&quot;</span>,<br>  //      msg: <span class="hljs-string">&quot;hello&quot;</span>,<br>  // &#125;)<br>  mutations: &#123;<br>    increase(<span class="hljs-keyword">state</span>, v)&#123;<br>      <span class="hljs-keyword">state</span>.count += v<br>      console.<span class="hljs-keyword">log</span>(v)<br>      console.<span class="hljs-keyword">log</span>(this.<span class="hljs-keyword">state</span>.count)<br>    &#125;,<br>    decrease(<span class="hljs-keyword">state</span>)&#123;<br>      <span class="hljs-keyword">state</span>.count --;<br>    &#125;,<br>    printMsg(<span class="hljs-keyword">state</span>, payload)&#123;<br>      console.<span class="hljs-keyword">log</span>(payload.name+<span class="hljs-string">&quot; say: &quot;</span> + payload.msg)<br>    &#125;<br>  &#125;,<br><br>  // getters对<span class="hljs-keyword">state</span>中的成员加工后传递给外界<br>  // getters中的方法有两个默认参数。<span class="hljs-number">1</span>、<span class="hljs-keyword">state</span> 当前VueX对象中的状态对象。<span class="hljs-number">2</span>、getters 当前getters对象，用于将getters下的其他getter拿来用<br>  // 调用方式： this.<span class="hljs-variable">$store</span>.getters.countInfo<br>  getters:&#123;<br>    countInfo(<span class="hljs-keyword">state</span>)&#123;<br>      return <span class="hljs-keyword">state</span>.count * <span class="hljs-number">10</span><br>    &#125;<br>  &#125;,<br><br>  // 异步操作通常在action中进行。注意是异步执行mutation中的函数！！！如果要修改<span class="hljs-keyword">state</span>的值，只能通过mutations来修改[看vuex的流程图]。<br>  // Actions中的方法有两个默认参数。<span class="hljs-number">1</span>、context 上下文(相当于箭头函数中的this)对象。<span class="hljs-number">2</span>、payload 挂载参数。<br>  // 一般地，用Promise来包裹异步任务并返回Promise对象，从而在调用处可通过then和catch处理异步完成后的工作。<br>  // 调用方式：<br>  // this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&quot;asyncMethod&quot;</span>, &#123;name: <span class="hljs-string">&quot;gys&quot;</span>, msg: <span class="hljs-string">&quot;hello&quot;</span>&#125;)<br>  // this.<span class="hljs-variable">$store</span>.dispatch(&#123;<br>  //      type: &#x27;printMsg&#x27;,<br>  //      name: <span class="hljs-string">&quot;gys&quot;</span>,<br>  //      msg: <span class="hljs-string">&quot;hello&quot;</span>,<br>  // &#125;)<br>  actions: &#123;<br>    asyncMethod(context, payload)&#123;<br>      return new Promise(<br>          (resolve, reject)=&gt;&#123;<br>            <span class="hljs-built_in">set</span>Timeout(()=&gt;&#123;<br>              context.commit(<span class="hljs-string">&quot;printMsg&quot;</span>, payload)<br>              resolve()<br>            &#125;, <span class="hljs-number">2000</span>)<br>          &#125;<br>      )<br>    &#125;<br>  &#125;,<br><br>  // 当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成模块（module）。<br>  // 每个模块拥有自己的 <span class="hljs-keyword">state</span>、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。<br>  modules: &#123;<br>    a:&#123;<br>      <span class="hljs-keyword">state</span>:&#123;&#125;,<br>      mutations:&#123;&#125;,<br>      getters: &#123;&#125;,<br>      actions: &#123;&#125;,<br>      modules:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>组件中使用state数据的方式示例如下。一般地，为了使项目结构清晰，只在index.js文件中保留state属性，其他属性都定义在其他的同级的js文件中。对于子模块，在store目录下创建modules文件夹，将所有子模块放入其中。</p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210917161254008.png" alt="image-20210917161254008"></p><p><img src="/2021/09/17/vue-cli%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210917161325774.png" alt="image-20210917161325774"></p><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p><code>main.js</code>文件中导入示例。一般地，我们会对网络模块进行封装，在src目录下新建network文件夹，在network文件夹中创建js文件，其中封装axios，对外导出一些常用的网络接口。要进行网络调用时，只需要导入js文件使用其中封装好的方法即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">// 导入axios框架。注意：插件是使用use，这个axios是框架。</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span><br><br>axios.defaults.baseURL = <span class="hljs-string">&quot;&quot;</span><br>axios.defaults.timeout = <span class="hljs-number">5000</span> <span class="hljs-comment">// 毫秒</span><br><br>axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<br>    <span class="hljs-attr">methods</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>&#125;<br><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res)<br>&#125;)<br><br><br><span class="hljs-comment">// 创建axios实例，不创建会使用导入的默认静态实例</span><br><span class="hljs-keyword">const</span> axios2 =  axios.create(&#123;<br>    <span class="hljs-comment">// config</span><br>&#125;)<br><br><span class="hljs-comment">// 拦截器(参数是两个函数，第一个是调用成功时的函数，第二个是调用失败时的函数)</span><br><span class="hljs-comment">// 请求拦截(发送前检查修改HTTP报文)</span><br><span class="hljs-comment">// 当header不符合服务器要求时，通过请求拦截修改header</span><br>axios2.interceptors.request.use(<br>    <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> config<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(err)<br>    &#125;<br>)<br><span class="hljs-comment">// 响应拦截(接收后检查修改HTTP报文)</span><br>axios2.interceptors.response.use(<br>    <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(err)<br>    &#125;<br>)<br><br><br>createApp(App).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>axios的config包含哪些可配置信息。只有url是必填项。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>   <span class="hljs-regexp">//</span> 请求服务器的URL<br>  url: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br><br>  <span class="hljs-regexp">//</span> 请求方法<br>  method: <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。<br>  <span class="hljs-regexp">//</span> 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL<br>  baseURL: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br><br>  <span class="hljs-regexp">//</span> 在向服务器发送前，修改请求数据<br>  <span class="hljs-regexp">//</span> 只能用在 <span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span> 和 <span class="hljs-string">&#x27;PATCH&#x27;</span> 这几个请求方法<br>  <span class="hljs-regexp">//</span> 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream<br>  transformRequest: [<span class="hljs-keyword">function</span> (data, headers) &#123;<br>    <span class="hljs-regexp">//</span> 对 data 进行任意转换处理<br>    return data;<br>  &#125;],<br><br>  <span class="hljs-regexp">//</span> 在收到服务器数据后，传递给 then/catch 前，修改响应数据<br>  transformResponse: [<span class="hljs-keyword">function</span> (data) &#123;<br>    <span class="hljs-regexp">//</span> 对 data 进行任意转换处理<br>    return data;<br>  &#125;],<br><br>  <span class="hljs-regexp">//</span> 即将被发送的自定义请求头<br>  headers: &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;,<br><br>  <span class="hljs-regexp">//</span> `params` 是即将与请求一起发送的 URL 参数<br>  <span class="hljs-regexp">//</span> 必须是一个无格式对象(plain object)或 URLSearchParams 对象<br>  params: &#123;<br>    ID: <span class="hljs-number">12345</span><br>  &#125;,<br><br>   <span class="hljs-regexp">//</span> 一个负责将params序列化的函数<br>  paramsSerializer: <span class="hljs-keyword">function</span>(params) &#123;<br>    return Qs.stringify(params, &#123;arrayFormat: <span class="hljs-string">&#x27;brackets&#x27;</span>&#125;)<br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> data是作为请求主体被发送的数据<br>  <span class="hljs-regexp">//</span> 只适用于这些请求方法 <span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>, 和 <span class="hljs-string">&#x27;PATCH&#x27;</span><br>  <span class="hljs-regexp">//</span> 在没有设置 `transformRequest` 时，必须是以下类型之一：<br>  <span class="hljs-regexp">//</span> - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams<br>  <span class="hljs-regexp">//</span> - 浏览器专属：FormData, File, Blob<br>  <span class="hljs-regexp">//</span> - Node 专属：Stream<br>  data: &#123;<br>    firstName: <span class="hljs-string">&#x27;Fred&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> timeout指定请求超时的毫秒数(<span class="hljs-number">0</span>表示无超时时间)<br>  <span class="hljs-regexp">//</span> 如果请求超时，请求将被中断<br>  timeout: <span class="hljs-number">1000</span>,<br><br>   <span class="hljs-regexp">//</span> 表示跨域请求时是否需要使用凭证<br>  withCredentials: false, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> adapter允许自定义处理请求，以使测试更轻松<br>  <span class="hljs-regexp">//</span> 返回一个 promise 并应用一个有效的响应<br>  adapter: <span class="hljs-keyword">function</span> (config) &#123;<br>    <span class="hljs-regexp">/* ... */</span><br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> auth表示应该使用 HTTP 基础验证，并提供凭据<br>  <span class="hljs-regexp">//</span> 这将设置一个Authorization头，覆写掉现有的任意使用 headers设置的自定义Authorization头<br>  auth: &#123;<br>    username: <span class="hljs-string">&#x27;janedoe&#x27;</span>,<br>    password: <span class="hljs-string">&#x27;s00pers3cret&#x27;</span><br>  &#125;,<br><br>   <span class="hljs-regexp">//</span> 表示服务器响应的数据类型，可以是 <span class="hljs-string">&#x27;arraybuffer&#x27;</span>, <span class="hljs-string">&#x27;blob&#x27;</span>, <span class="hljs-string">&#x27;document&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;stream&#x27;</span><br>  responseType: <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> 对响应数据的编码格式<br>  <span class="hljs-regexp">//</span> Note: Ignored <span class="hljs-keyword">for</span> `responseType` of <span class="hljs-string">&#x27;stream&#x27;</span> or client-side requests<br>  responseEncoding: <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-regexp">//</span> default<br><br>   <span class="hljs-regexp">//</span> 用作 xsrf token 的值的cookie的名称<br>  xsrfCookieName: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> 携带 xsrf token 的首部字段的名字<br>  xsrfHeaderName: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="hljs-regexp">//</span> default<br><br>   <span class="hljs-regexp">//</span> 为上传处理进度事件<br>  onUploadProgress: <span class="hljs-keyword">function</span> (progressEvent) &#123;<br>    <span class="hljs-regexp">//</span> 对原生进度事件的处理<br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> 为下载处理进度事件<br>  onDownloadProgress: <span class="hljs-keyword">function</span> (progressEvent) &#123;<br>    <span class="hljs-regexp">//</span> 对原生进度事件的处理<br>  &#125;,<br><br>   <span class="hljs-regexp">//</span> 允许的响应内容的最大长度<br>  maxContentLength: <span class="hljs-number">2000</span>,<br><br>  <span class="hljs-regexp">//</span> 对于给定的HTTP 响应状态码，返回true(或者设置为null或undefined)，promise 将被 resolve; 否则，promise 将被 rejecte<br>  validateStatus: <span class="hljs-keyword">function</span> (status) &#123;<br>    return status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>; <span class="hljs-regexp">//</span> default<br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> node.js 中 follow 的最大重定向数目<br>  <span class="hljs-regexp">//</span> 如果设置为<span class="hljs-number">0</span>，将不会 follow 任何重定向<br>  maxRedirects: <span class="hljs-number">5</span>, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> `socketPath` defines a UNIX Socket to be used <span class="hljs-keyword">in</span> node.js.<br>  <span class="hljs-regexp">//</span> e.g. <span class="hljs-string">&#x27;/var/run/docker.sock&#x27;</span> to send requests to the docker daemon.<br>  <span class="hljs-regexp">//</span> Only either `socketPath` or `proxy` can be specified.<br>  <span class="hljs-regexp">//</span> If both are specified, `socketPath` is used.<br>  socketPath: null, <span class="hljs-regexp">//</span> default<br><br>  <span class="hljs-regexp">//</span> httpAgent和httpsAgent分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像keepAlive这样配置选项,keepAlive默认没有启用<br>  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),<br>  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),<br><br>  <span class="hljs-regexp">//</span> proxy定义代理服务器的主机名称和端口<br>  <span class="hljs-regexp">//</span> auth表示 HTTP 基础验证应当用于连接代理，并提供凭据<br>  <span class="hljs-regexp">//</span> 这将会设置一个Proxy-Authorization头，覆写掉已有的通过使用header设置的自定义Proxy-Authorization头。<br>  proxy: &#123;<br>    host: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    port: <span class="hljs-number">8000</span>,<br>    auth: &#123;<br>      username: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>      password: <span class="hljs-string">&#x27;000000&#x27;</span><br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-regexp">//</span> cancelToken用于取消请求的 cancel token<br>  cancelToken: new CancelToken(<span class="hljs-keyword">function</span> (cancel) &#123;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主席树-权值线段树</title>
    <link href="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/"/>
    <url>/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/</url>
    
    <content type="html"><![CDATA[<h3 id="预备知识-树状数组、线段树"><a href="#预备知识-树状数组、线段树" class="headerlink" title="预备知识(树状数组、线段树)"></a>预备知识(树状数组、线段树)</h3><p><strong>前缀和数组：</strong>区间查询</p><p><strong>树状数组：</strong>区间查询，单点修改</p><p><strong>树状数组可以用来维护前缀查询和单点修改的区间操作，但所维护的区间值必须要符合前缀相减性。我说的前缀相减性是指可以由前缀区间维护的区间值得到中间区间的区间值。比如[1,L]的和和[1, R]的和可以得到[L+1, R]的和。</strong></p><p><a href="https://www.acwing.com/problem/content/description/4319/">习题</a></p><p><a href="https://www.acwing.com/problem/content/248/">例题一</a></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211026172249881-16352401710431.png" alt="image-20211026172249881"></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211026172307308.png" alt="image-20211026172307308"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-comment">// 原数组a</span><br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-comment">// 增量(差分)数组d由BIT维护，否则线性查询时间是O(n)</span><br><span class="hljs-comment">// d[N]; </span><br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIT</span>&#123;</span><br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-keyword">int</span> d[N], n;<br>    <span class="hljs-built_in">BIT</span>(<span class="hljs-keyword">int</span> _n)&#123;<br>        n = _n;<br>        <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(d));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(idx)&#123;<br>            res += d[idx];<br>            idx -= idx&amp;-idx;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(idx &lt;= <span class="hljs-keyword">this</span>-&gt;n)&#123;<br>            d[idx] += v;<br>            idx += idx&amp;-idx;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a+i);<br>    <br>    BIT root&#123;n&#125;;<br>    <span class="hljs-keyword">char</span> Q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )&#123;<br>        <span class="hljs-keyword">while</span>((Q = <span class="hljs-built_in">getchar</span>()) &amp;&amp; Q != <span class="hljs-string">&#x27;Q&#x27;</span> &amp;&amp; Q != <span class="hljs-string">&#x27;C&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(Q == <span class="hljs-string">&#x27;Q&#x27;</span>)&#123;<br>            <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[idx] + root.<span class="hljs-built_in">query</span>(idx));<br>            <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> l, r, v;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;v);<br>            root.<span class="hljs-built_in">add</span>(l, v);<br>            root.<span class="hljs-built_in">add</span>(r+<span class="hljs-number">1</span>, -v);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/1272/">例题二</a></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211212161559510.png" alt="image-20211212161559510"></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211212161620681.png" alt="image-20211212161620681"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIT</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> origin[N];<br>    <span class="hljs-keyword">int</span> arr[N];<br>    <span class="hljs-keyword">int</span> n;<br>    <br>    <span class="hljs-built_in">BIT</span>(<span class="hljs-keyword">int</span> _n)&#123;<br>        n = _n;<br>        <span class="hljs-built_in">memset</span>(arr, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(arr));<br>    &#125;<br>    <br>    <span class="hljs-comment">// 先看查询区间[ql, qr]</span><br>    <span class="hljs-comment">// 如果 ql &lt;= qr-(qr&amp;-qr),那么 res = max(arr[qr], query(ql, qr-(qr&amp;-qr)));      查询区间超出了arr[qr]</span><br>    <span class="hljs-comment">// 如果 ql &gt; qr-(qr&amp;-qr),那么res = max(origin[qr], query(ql, qr-1));            查询区间被arr[qr]包含</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res= -INF;<br>        <span class="hljs-keyword">while</span>(qr &gt;= ql)&#123;<br>            res = <span class="hljs-built_in">max</span>(res, origin[qr]);     <span class="hljs-comment">// 取原始数组qr处的值</span><br>            qr --;                          <span class="hljs-comment">// qr--</span><br>            <span class="hljs-keyword">while</span>(qr-(qr&amp;-qr) &gt;= ql)&#123;       <span class="hljs-comment">// qr维护的数组含于查询区间内</span><br>                res = <span class="hljs-built_in">max</span>(res, arr[qr]);    <span class="hljs-comment">// 更新res</span><br>                qr -= qr&amp;-qr;               <span class="hljs-comment">// 更新qr</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 更新idx处的值,会影响包含idx的所有区间</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        origin[idx] = v;<br>        <span class="hljs-keyword">while</span>(idx &lt;= n) &#123;<br>            arr[idx] = v;                               <span class="hljs-comment">// 修改当前区间的最大值为v</span><br>            <span class="hljs-keyword">int</span> len = idx&amp;-idx;                         <span class="hljs-comment">// arr[idx]维护的区间(idx-(idx&amp;-idx), idx]的区间长度</span><br>            <br>            <span class="hljs-comment">// 当i取到极限len时, idx-i = idx-(idx&amp;-idx) = 当前维护区间的左端点</span><br>            <span class="hljs-comment">// 找出组成该区间的子区间</span><br>            <span class="hljs-comment">// 举个例子: idx = 12，也就是二进制1100, 区间len = 4，arr[12]当前维护(8, 12]</span><br>            <span class="hljs-comment">// arr[12]由哪几个区间构成?也就是问最低位的1由什么加过来的?【每次加的是lowbit】</span><br>            <span class="hljs-comment">// 1100 == 1010+lowbit(1010) == 1011+lowbit(1011)</span><br>            <span class="hljs-comment">// 1010是十进制10，1011是十进制11。</span><br>            <span class="hljs-comment">// arr[10]维护(8, 10]，arr[11]维护(10, 11]</span><br>            <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i &lt;&lt;= <span class="hljs-number">1</span>) &#123;            <span class="hljs-comment">// 按上述结论更新区间最大值 </span><br>                arr[idx] = <span class="hljs-built_in">max</span>(arr[idx], arr[idx-i]); <br>            &#125;<br>            <br>            <span class="hljs-comment">// 更新之后的区间(0, idx]的最大值</span><br>            idx += idx&amp;-idx;<br>        &#125;<br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> n, m, ql, qr;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-function">BIT <span class="hljs-title">root</span><span class="hljs-params">(n)</span></span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;root.origin[i]);<br>        root.<span class="hljs-built_in">update</span>(i, root.origin[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;ql, &amp;qr);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, root.<span class="hljs-built_in">query</span>(ql, qr));<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>线段树：</strong>区间修改，区间查询</p><p><strong>线段树可以用来维护大部分的区间操作，但所维护的区间值必须要符合累加性。我说的累加性是指可以由小区间维护的区间值得到大区间的区间值。比如[l,mid]的最大值和[mid+1, r]的最大值可以得到[l, r]的最大值，比如[l,mid]的和和[mid+1, r]的和可以得到[l, r]的和。</strong></p><p><a href="https://www.acwing.com/problem/content/description/244/">例题一</a></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211018145816405.png" alt="image-20211018145816405"></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20211018145832549.png" alt="image-20211018145832549"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ST</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ST</span>(<span class="hljs-keyword">int</span> _l, <span class="hljs-keyword">int</span> _r)&#123;<br>        l = _l, r = _r, m = _l+_r&gt;&gt;<span class="hljs-number">1</span>, val = <span class="hljs-number">0</span>, lazy = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(from == l &amp;&amp; to == r)&#123;<br>            <span class="hljs-keyword">return</span> val + lazy*(r-l+<span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(lazy) &#123;<br>            <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(l, m, lazy);<br>            <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(m+<span class="hljs-number">1</span>, r, lazy);<br>            val += lazy*(r-l+<span class="hljs-number">1</span>);<br>            lazy = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(from &gt; m) <span class="hljs-keyword">return</span> <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">query</span>(from, to);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(to &lt;= m) <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">query</span>(from, to);<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">query</span>(from, m) + <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">query</span>(m+<span class="hljs-number">1</span>, to);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> offset)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(from == l &amp;&amp; to == r)&#123;<br>            lazy += offset;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(lazy)&#123;<br>            <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(l, m, lazy);<br>            <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(m+<span class="hljs-number">1</span>, r, lazy);<br>            val += lazy*(r-l+<span class="hljs-number">1</span>);<br>            lazy = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(from &gt; m)&#123;<br>            <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(from, to, offset);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(to &lt;= m)&#123;<br>            <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(from, to, offset);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">left</span>()-&gt;<span class="hljs-built_in">push_down</span>(from, m, offset);<br>            <span class="hljs-built_in">right</span>()-&gt;<span class="hljs-built_in">push_down</span>(m+<span class="hljs-number">1</span>, to, offset);<br>        &#125;<br>        <br>        val += (to-from+<span class="hljs-number">1</span>)*offset;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> l, r, m;<br>    ll val, lazy;<br>    <br>    <span class="hljs-function">ST* <span class="hljs-title">left</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Left?Left:(Left = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(l, m));<br>    &#125;<br>    <br>    <span class="hljs-function">ST* <span class="hljs-title">right</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Right?Right:(Right = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(m+<span class="hljs-number">1</span>, r));<br>    &#125;<br>    ST* Left, *Right;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m, t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    ST* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ST</span>(<span class="hljs-number">0</span>, N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>        root-&gt;<span class="hljs-built_in">push_down</span>(i, i, t);<br>    &#125;<br>    <span class="hljs-keyword">char</span> q;<br>    <span class="hljs-keyword">int</span> l, r, d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>        <span class="hljs-keyword">while</span>((q = <span class="hljs-built_in">getchar</span>()) &amp;&amp; q != <span class="hljs-string">&#x27;Q&#x27;</span> &amp;&amp; q != <span class="hljs-string">&#x27;C&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, root-&gt;<span class="hljs-built_in">query</span>(l, r));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;d);<br>            root-&gt;<span class="hljs-built_in">push_down</span>(l, r, d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/longest-substring-of-one-repeating-character/">例题二</a></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20220409133357252.png" alt="image-20220409133357252"></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20220409133416516.png" alt="image-20220409133416516"></p><p><strong>对于此题，我们用[l,mid]的最长连续长度和[mid+1, r]的最长连续长度可以得到[l, r]的最长连续长度吗？很显然不可以！除非，我们该最长连续长度包含了3种情况：以区间左边界为起始的最长连续长度，以区间右边界为结束的最长连续长度，区间最长连续长度。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>        <span class="hljs-keyword">int</span> l, r; <span class="hljs-comment">// 维护的区间</span><br>        <span class="hljs-keyword">int</span> l_begin_max, r_end_max, max_len;  <span class="hljs-comment">// 最长连续长度</span><br>        <span class="hljs-keyword">int</span> left, right; <span class="hljs-comment">// 左右子树 </span><br>    &#125;;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    Node node[<span class="hljs-number">4</span>*N + <span class="hljs-number">20</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> cur_idx = tot ++;<br>        node[cur_idx].l = l;<br>        node[cur_idx].r = r;<br>        <span class="hljs-keyword">if</span>(l != r)&#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            node[cur_idx].left = <span class="hljs-built_in">build</span>(l, mid);<br>            node[cur_idx].right = <span class="hljs-built_in">build</span>(mid+<span class="hljs-number">1</span>, r);   <br>        &#125;<br>        <span class="hljs-built_in">push_up</span>(cur_idx);<br>        <span class="hljs-keyword">return</span> cur_idx;<br>    &#125;<br><br>    <span class="hljs-comment">// 累加</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l = node[idx].l, r = node[idx].r, mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(l == r)&#123;<br>            node[idx].l_begin_max = node[idx].r_end_max = node[idx].max_len = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> left = node[idx].left, right = node[idx].right;<br>            node[idx].l_begin_max = node[left].l_begin_max;<br>            <span class="hljs-keyword">if</span>(node[left].l_begin_max == mid-l+<span class="hljs-number">1</span> &amp;&amp; s[node[right].l] == s[node[left].l])&#123;<br>                node[idx].l_begin_max += node[right].l_begin_max;<br>            &#125;<br>            node[idx].r_end_max = node[right].r_end_max;<br>            <span class="hljs-keyword">if</span>(node[right].r_end_max == r-mid &amp;&amp; s[node[right].r] == s[node[left].r])&#123;<br>                node[idx].r_end_max += node[left].r_end_max;<br>            &#125;<br>            node[idx].max_len = <span class="hljs-built_in">max</span>(node[left].max_len, node[right].max_len);<br>            <span class="hljs-keyword">if</span>(s[node[left].r] == s[node[right].l])&#123;<br>                node[idx].max_len = <span class="hljs-built_in">max</span>(node[idx].max_len, node[left].r_end_max+node[right].l_begin_max);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将区间[ql, qr]的元素变为v</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">char</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l = node[idx].l, r = node[idx].r, mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(l &gt; qr || r &lt; ql) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(l == ql &amp;&amp; r == qr)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = ql; i &lt;= qr; i ++) s[i] = v;<br>            node[idx].l_begin_max = node[idx].r_end_max = node[idx].max_len = r-l+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(mid &lt; ql) &#123;<br>            <span class="hljs-built_in">update</span>(node[idx].right, ql, qr, v);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(qr &lt;= mid)&#123;<br>            <span class="hljs-built_in">update</span>(node[idx].left, ql, qr, v);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">update</span>(node[idx].left, ql, mid, v);<br>            <span class="hljs-built_in">update</span>(node[idx].right, mid+<span class="hljs-number">1</span>, qr, v);<br>        &#125;<br>        <span class="hljs-built_in">push_up</span>(idx);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">longestRepeating</span><span class="hljs-params">(string _s, string queryCharacters, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; queryIndices)</span> </span>&#123;<br>        s = _s;<br>        <span class="hljs-keyword">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> root = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>);<br><br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; queryCharacters.<span class="hljs-built_in">size</span>(); i ++)&#123;<br>            <span class="hljs-keyword">if</span>(s[queryIndices[i]] != queryCharacters[i])&#123;<br>                <span class="hljs-built_in">update</span>(root, queryIndices[i], queryIndices[i], queryCharacters[i]);<br>            &#125;<br>            res.<span class="hljs-built_in">push_back</span>(node[root].max_len);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    string s;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="主席树解决的问题"><a href="#主席树解决的问题" class="headerlink" title="主席树解决的问题"></a>主席树解决的问题</h3><p>给定一段区间，求静态区间内的MEX(第k小/大的值)，但不能修改区间值(静态区间)。若想同时查询区间MEX和修改区间值，则要使用树套树(线段树套平衡树)。</p><h3 id="增加数时新建一颗权值线段树-复用节点"><a href="#增加数时新建一颗权值线段树-复用节点" class="headerlink" title="增加数时新建一颗权值线段树(复用节点)"></a>增加数时新建一颗权值线段树(复用节点)</h3><p>每个区间节点值为该区间内的数的个数</p><p>加入4，从空树ROOT[0]构建ROOT[1]</p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20210912164519884.png" alt="image-20210912164519884"></p><p>加入3，从ROOT[1]构建ROOT[2]</p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20210912164554725.png" alt="image-20210912164554725"></p><p>如此一来，每增加一个节点时不必真的建立一颗新树，而只建立一条新的链，因为只有一条链的权值会发生变化，故前一棵树其他的节点我们可以直接复用。</p><h3 id="空间使用"><a href="#空间使用" class="headerlink" title="空间使用"></a>空间使用</h3><p>一般来说建树需要4*N个节点，每增加一条链即增加logN个节点，总共需要<code>4*N+N*logN</code>个节点，根据实际情况适当增加预分配空间。</p><p><a href="https://www.acwing.com/problem/content/257/">题目链接</a></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20210923210707784.png" alt="image-20210923210707784"></p><p><img src="/2021/09/11/%E4%B8%BB%E5%B8%AD%E6%A0%91(%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91)/image-20210923210729278.png" alt="image-20210923210729278"></p><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-comment">// 静态完全树节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l, r;            <span class="hljs-comment">// 左右节点的坐标</span><br>    <span class="hljs-keyword">int</span> cnt;             <span class="hljs-comment">// 权值</span><br>&#125;nodes[N * <span class="hljs-number">4</span> + N * <span class="hljs-number">17</span>];  <span class="hljs-comment">// N * 4 + NlogN</span><br><br><span class="hljs-keyword">int</span> ROOT[N];  <span class="hljs-comment">// 权值线段树[1~i]的根节点</span><br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 节点编号</span><br><br><span class="hljs-keyword">int</span> d[N];     <span class="hljs-comment">// 离散化数组(a[1~i]代表的是d的下标了，因为a[i]可以很大)</span><br><span class="hljs-keyword">int</span> len;      <span class="hljs-comment">// 离散化数组长度</span><br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[N];     <span class="hljs-comment">// 输入数组</span><br><br><span class="hljs-comment">// 构建权值线段树</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> idx = ++tot;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l &lt; r) &#123;<br>        nodes[idx].l = <span class="hljs-built_in">build</span>(l, mid);<br>        nodes[idx].r = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>    nodes[idx].cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> idx;<br>&#125;<br><br><span class="hljs-comment">// 增加一个数v, root为上一颗权值线段树的根节点,返回新权值线段树的根节点坐标</span><br><span class="hljs-comment">// 每次增加一个数只会更改一条链上的权值，仅对这条链增加新节点，其余节点复用上一颗树的节点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> idx = ++tot;<br>    <span class="hljs-keyword">int</span> mid = ql + qr &gt;&gt; <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 根节点权值增1，其他不变</span><br>    nodes[idx].l = nodes[root].l;<br>    nodes[idx].r = nodes[root].r;<br>    nodes[idx].cnt = nodes[root].cnt+<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 递归</span><br>    <span class="hljs-keyword">if</span>(ql &lt; qr)&#123;<br>        <span class="hljs-comment">// 插入左子树</span><br>        <span class="hljs-keyword">if</span>(v &lt;= mid) nodes[idx].l = <span class="hljs-built_in">add</span>(nodes[root].l, ql, mid, v);<br>        <span class="hljs-comment">// 插入右子树</span><br>        <span class="hljs-keyword">else</span> nodes[idx].r = <span class="hljs-built_in">add</span>(nodes[root].r, mid+<span class="hljs-number">1</span>, qr, v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> idx;<br>&#125;<br><br><br><span class="hljs-comment">// 查询[ql,qr]的第k个最小值</span><br><span class="hljs-comment">// root[ql-1]是 1~ql-1 构建的权值线段树</span><br><span class="hljs-comment">// root[qr]是 1~qr 构建的权值线段树</span><br><span class="hljs-comment">// 利用前缀和，root[qr]树的节点值减去root[ql-1]树的节点值就是 ql~qr 构建的权值线段树 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root1, <span class="hljs-keyword">int</span> root2, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-comment">//找到了</span><br>    <span class="hljs-keyword">if</span>(ql == qr) <span class="hljs-keyword">return</span> ql;<br>    <br>    <span class="hljs-comment">// 此题保证k符合要求，故不用判断</span><br>    <span class="hljs-comment">// int total = nodes[root2].cnt - nodes[root1].cnt;</span><br>    <span class="hljs-comment">// if(total &lt; k) return -1;</span><br>    <br>    <span class="hljs-comment">// 左子树的权值</span><br>    <span class="hljs-keyword">int</span> lsum = nodes[nodes[root2].l].cnt - nodes[nodes[root1].l].cnt;<br>    <span class="hljs-keyword">int</span> mid = ql + qr &gt;&gt; <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 递归</span><br>    <span class="hljs-comment">// 第k个最小值在左子树中</span><br>    <span class="hljs-keyword">if</span>(k &lt;= lsum) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(nodes[root1].l, nodes[root2].l, ql, mid, k);<br>    <span class="hljs-comment">// 第k个最小值在右子树中，在右子树中找第 k-lsum 个最小值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(nodes[root1].r, nodes[root2].r, mid + <span class="hljs-number">1</span>, qr, k - lsum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a+i), d[i] = a[i];<br>    <br>    <span class="hljs-comment">// 离散化</span><br>    <span class="hljs-built_in">sort</span>(d+<span class="hljs-number">1</span>, d+<span class="hljs-number">1</span>+n);<br>    len = <span class="hljs-built_in">unique</span>(d+<span class="hljs-number">1</span>, d+<span class="hljs-number">1</span>+n)-(d+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-comment">// 映射</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        a[i] = <span class="hljs-built_in">lower_bound</span>(d+<span class="hljs-number">1</span>, d+<span class="hljs-number">1</span>+n, a[i])-d;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 初始化一颗权值线段树</span><br>    ROOT[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, len);<br>    <br>    <span class="hljs-comment">// 每增加一个树，创建一颗新的权值线段树</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        ROOT[i] = <span class="hljs-built_in">add</span>(ROOT[i<span class="hljs-number">-1</span>], <span class="hljs-number">1</span>, len, a[i]);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 求解</span><br>    <span class="hljs-keyword">int</span> idxl, idxr, k;<br>    <span class="hljs-keyword">while</span> (m -- )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;idxl, &amp;idxr, &amp;k);<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-built_in">query</span>(ROOT[idxl<span class="hljs-number">-1</span>], ROOT[idxr], <span class="hljs-number">1</span>, len, k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, d[res]);<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href>例题二</a></p><p>给定一个数组，每次询问区间[left, right]中出现次数大于threshold的数字的个数是多少？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MajorityChecker</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">20010</span>;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> root[N];  <span class="hljs-comment">// 权值线段树的根节点</span><br>    <span class="hljs-keyword">int</span> cnt[N];   <span class="hljs-comment">// 计数</span><br>    <span class="hljs-built_in">MajorityChecker</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr) &#123;<br>        <span class="hljs-built_in">memset</span>(nodes, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(nodes));<br>        <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cnt));<br>        n = arr.<span class="hljs-built_in">size</span>();<br>        root[<span class="hljs-number">0</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>            cnt[arr[i<span class="hljs-number">-1</span>]] ++;<br>            root[i] = <span class="hljs-built_in">add</span>(root[i<span class="hljs-number">-1</span>], cnt[arr[i<span class="hljs-number">-1</span>]]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 如果 f[i]是arr[1~right]中数字出现次数大于等于threshold的数字个数</span><br>    <span class="hljs-comment">// 则query(left, right, threshold) == f[right] - f[left-1]</span><br><br>    <span class="hljs-comment">// 主席树</span><br>    <span class="hljs-comment">// 主席树的节点保存的是出现次数属于[l, r]的数的个数</span><br>    <span class="hljs-comment">// 当我们插入一个新的根节点时，对应的出现次数cnt[cur_val]增加1。</span><br>    <span class="hljs-comment">// 更新当前线段树的节点，所有维护区间包含cnt[cur_val]+1的节点值增1。</span><br>    <span class="hljs-comment">// 查询时，由root[right]查询区间[threshold, n]的值，root[left-1]查询[threshold, n]的值</span><br>    <span class="hljs-comment">// 两者相减就是最终答案。</span><br>    <br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>        <span class="hljs-keyword">int</span> l, r;  <span class="hljs-comment">// 维护的区间</span><br>        <span class="hljs-keyword">int</span> val;   <span class="hljs-comment">// 区间值</span><br>        <span class="hljs-keyword">int</span> left, right; <span class="hljs-comment">// 左右节点 </span><br>    &#125;;<br><br>    Node nodes[<span class="hljs-number">4</span>*N + <span class="hljs-number">15</span>]; <br><br>    <span class="hljs-comment">// 建立初始权值线段树</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> cur_idx = tot ++; <span class="hljs-comment">// 使用了一个节点</span><br>        nodes[cur_idx].l = l;<br>        nodes[cur_idx].r = r;<br>        nodes[cur_idx].val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l != r)&#123; <br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            nodes[cur_idx].left = <span class="hljs-built_in">build</span>(l, mid);<br>            nodes[cur_idx].right = <span class="hljs-built_in">build</span>(mid+<span class="hljs-number">1</span>, r);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur_idx;<br>    &#125;<br><br>    <span class="hljs-comment">// 新增根节点</span><br>    <span class="hljs-comment">// 将区间包含v的节点值增1，因为与之前相比cnt[cur_val]+1了，更新pre_root书中的某一条链</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_root, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> cur_idx = tot ++;<br>        nodes[cur_idx] = nodes[pre_root];<br>        nodes[cur_idx].val += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> l = nodes[pre_root].l, r = nodes[pre_root].r;<br><br>        <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> cur_idx;<br><br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(v &gt; mid) nodes[cur_idx].right = <span class="hljs-built_in">add</span>(nodes[pre_root].right, v);<br>        <span class="hljs-keyword">else</span> nodes[cur_idx].left = <span class="hljs-built_in">add</span>(nodes[pre_root].left, v);<br><br>        <span class="hljs-keyword">return</span> cur_idx;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取某颗权值线段树中区间[ql, qr]的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cur_root, <span class="hljs-keyword">int</span> ql, <span class="hljs-keyword">int</span> qr)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> l = nodes[cur_root].l, r = nodes[cur_root].r;<br>        <span class="hljs-keyword">if</span>(l &gt; qr || r &lt; ql) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l == ql &amp;&amp; r == qr) <span class="hljs-keyword">return</span> nodes[cur_root].val;<br><br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ql &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query1</span>(nodes[cur_root].right, ql, qr);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(qr &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query1</span>(nodes[cur_root].left, ql, qr);<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query1</span>(nodes[cur_root].left, ql, mid) + <span class="hljs-built_in">query1</span>(nodes[cur_root].right, mid+<span class="hljs-number">1</span>, qr);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> threshold)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> root1 = root[left], root2 = root[right+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query1</span>(root2, threshold, n) - <span class="hljs-built_in">query1</span>(root1, threshold, n);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树形DP</title>
    <link href="/2021/09/09/%E6%A0%91%E5%BD%A2DP/"/>
    <url>/2021/09/09/%E6%A0%91%E5%BD%A2DP/</url>
    
    <content type="html"><![CDATA[<h3 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h3><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209170014668.png" alt="image-20211209170014668"></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209170043734.png" alt="image-20211209170043734"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">6005</span>;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; g[N];<br><br><span class="hljs-keyword">int</span> happy[N];<br><span class="hljs-keyword">int</span> attend[N], unattend[N];  <span class="hljs-comment">// 第i个人为子树，第i个人去或不去的快乐指数</span><br><span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> child: g[root]) &#123;<br>        <br>        <span class="hljs-built_in">dfs</span>(child);<br>        <br>        <span class="hljs-comment">// root不去</span><br>        unattend[root] += <span class="hljs-built_in">max</span>(attend[child], unattend[child]);<br>        <br>        <span class="hljs-comment">// root去</span><br>        attend[root] += unattend[child];<br>    &#125;<br>    <br>    attend[root] += happy[root];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;happy[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, worker, boss; i &lt; n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;worker, &amp;boss);<br>        g[boss].<span class="hljs-built_in">push_back</span>(worker);<br>        vis[worker] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> boss = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(vis[boss]) boss++;<br>    <br>    <span class="hljs-built_in">dfs</span>(boss);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">max</span>(attend[boss], unattend[boss]));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/10/">题目链接2</a></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209163409523.png" alt="image-20211209163409523"></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209163433344.png" alt="image-20211209163433344"></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209163448022.png" alt="image-20211209163448022"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">int</span> n, maxv;<br><span class="hljs-keyword">int</span> v[N], w[N];<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; g[N];<br><br><span class="hljs-keyword">int</span> f[N][N]; <span class="hljs-comment">// f[i][j]选到第i个物品，当前所用体积为最大为j的最大价值</span><br><br><span class="hljs-comment">// 直接bfs会错误：因为bfs没有考虑同一个节点的不同子树可以同时选择</span><br><br><span class="hljs-comment">// 转化为分组背包问题 + 树形DP</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br>    <br>    <span class="hljs-comment">// 遍历所有物品</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> child: g[root])&#123;<br>        <span class="hljs-comment">// 递归子节点</span><br>        <span class="hljs-built_in">dfs</span>(child);<br>        <br>        <span class="hljs-comment">// 遍历所有体积</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxv; j &gt;= v[child]; --j)&#123;<br>            <span class="hljs-comment">// 枚举分组【将该子树的不同体积的情况看成不同组，我们只能选其中一种】</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; ++k)&#123;<br>                f[root][j] = <span class="hljs-built_in">max</span>(f[root][j], f[root][j-k] + f[child][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 当前root必须要选，否则子节点不可以选</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = maxv; j &gt;= v[root]; --j ) f[root][j] = f[root][j-v[root]] + w[root];<br>    <span class="hljs-comment">// 不能选root的情况时将期望值设置为0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v[root]; ++j) f[root][j] = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;maxv);<br>    <br>    <span class="hljs-keyword">int</span> c, root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;v[i], &amp;w[i], &amp;c);<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-number">-1</span>) root = i;<br>        <span class="hljs-keyword">else</span> g[c].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(root);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f[root][maxv]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/288/">题目链接3</a></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209164343015.png" alt="image-20211209164343015"></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209164411522.png" alt="image-20211209164411522"></p><p><img src="/2021/09/09/%E6%A0%91%E5%BD%A2DP/image-20211209164432993.png" alt="image-20211209164432993"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">305</span>;<br><span class="hljs-keyword">int</span> w[N];<br><span class="hljs-keyword">int</span> n, maxv; <span class="hljs-comment">// 每个物品的体积看为1</span><br><br><span class="hljs-keyword">int</span> f[N][N];<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; g[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span>&#123;<br>    <br>    <span class="hljs-comment">// 遍历物品</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> child: g[root])&#123;<br>        <span class="hljs-comment">// 递归子节点</span><br>        <span class="hljs-built_in">dfs</span>(child);<br>        <br>        <span class="hljs-comment">// 遍历体积</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxv; j &gt;= <span class="hljs-number">1</span>; --j)&#123;<br>            <span class="hljs-comment">// 枚举分组</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; ++k)&#123;<br>                f[root][j] = <span class="hljs-built_in">max</span>(f[root][j], f[root][j-k]+f[child][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-number">0</span>) v = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 先修课必选</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxv; j &gt;= v; --j) f[root][j] = f[root][j-v] + w[root];<br>    <span class="hljs-comment">// 不能选先修课的情况置0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; ++j) f[root][j] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;maxv);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, pre; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;pre, &amp;w[i]);<br>        g[pre].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f[<span class="hljs-number">0</span>][maxv]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>忘记了windows下mysql密码的解决方案</title>
    <link href="/2021/09/04/windows%E5%BF%98%E8%AE%B0mysql%E5%AF%86%E7%A0%81/"/>
    <url>/2021/09/04/windows%E5%BF%98%E8%AE%B0mysql%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="忘记了windows下mysql密码的解决方案"><a href="#忘记了windows下mysql密码的解决方案" class="headerlink" title="忘记了windows下mysql密码的解决方案"></a>忘记了windows下mysql密码的解决方案</h3><h3 id="一：关闭服务"><a href="#一：关闭服务" class="headerlink" title="一：关闭服务"></a>一：关闭服务</h3><p><img src="/2021/09/04/windows%E5%BF%98%E8%AE%B0mysql%E5%AF%86%E7%A0%81/image-20210904211105430.png" alt="image-20210904211105430"></p><h3 id="二：以管理员方式运行command并切换到mysql安装目录的bin下"><a href="#二：以管理员方式运行command并切换到mysql安装目录的bin下" class="headerlink" title="二：以管理员方式运行command并切换到mysql安装目录的bin下"></a>二：以管理员方式运行command并切换到mysql安装目录的bin下</h3><p>开启<code>command</code>窗口1：</p><p><code>mysqld -remove mysql</code>  删除<code>mysql</code>服务    </p><p><code>taskkill /f /im mysqld.exe</code>   删除<code>mysqld</code>进程</p><p><code>mysqld --console --skip-grant-tables --shared-memory</code> 跳过权限表启动服务</p><p>不要关闭窗口1, 另开启<code>command</code>窗口2：</p><p><code>mysql -u root -p</code>登录<code>mysql</code></p><p><code>update mysql.user set authentication_string=&#39;&#39; where user=&#39;root&#39;;</code>更改密码为空</p><p><code> flush privileges</code>刷新更改</p><p><code>mysqladmin -u root shutdown</code>关闭窗口1的<code>mysqld</code>进程</p><h3 id="三：密码已经重置"><a href="#三：密码已经重置" class="headerlink" title="三：密码已经重置"></a>三：密码已经重置</h3><p>回到窗口1</p><p><code>mysqld.exe –install</code>再安装<code>mysql服务</code></p><p><code>net start mysql</code>启动<code>mysql服务</code></p><p><code>mysql -u root</code>即可登录<code>mysql</code></p>]]></content>
    
    
    <categories>
      
      <category>mySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue简单使用</title>
    <link href="/2021/09/02/Vue%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8Awebpack%E6%89%93%E5%8C%85/"/>
    <url>/2021/09/02/Vue%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8Awebpack%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue简单使用"><a href="#Vue简单使用" class="headerlink" title="Vue简单使用"></a>Vue简单使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue简单使用大通关<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/favicon.png&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ID&quot;</span>&gt;</span><br>        &#123;&#123;fullname&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// json格式初始化Vue对象, el挂载元素</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#ID&#x27;</span>, </span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;gys&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-comment">// 计算属性:一般不用set方法</span></span><br><span class="javascript">            <span class="hljs-comment">// 相比于methods效率更高，因为会使用缓存值</span></span><br><span class="javascript">            <span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-attr">fullname</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">set</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newname</span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.name = newname</span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-attr">get</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.message</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-text 相比于&#123;&#123;&#125;&#125;，v-text忽略双标签之间的值--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- v-html 以html格式显示数据:如 data = &lt;a href=&quot;&quot;&gt;百度&lt;/a&gt;，渲染为一个a标签，而不是一段文本 --&gt;</span> <br><br>    <span class="hljs-comment">&lt;!-- v-cloak属性 设置vue解析之前不渲染该标签，当vue挂载完成之后该属性被自动删除，标签被渲染 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- head头部设置v-cloak样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;style&gt;</span><br><span class="hljs-comment">        [v-cloak]&#123;</span><br><span class="hljs-comment">            display: none;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &lt;/style&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-on --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;K&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;func1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input id=&quot;K&quot; type=&quot;button&quot; value=&quot;请输入&quot; @click=&quot;func1&quot;&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#K&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">func1</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;你在干什么?&quot;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-show 根据表达式的真假来决定该元素是否隐藏【修改样式】--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-if 根据表达式的真假来决定该元素是否隐藏【删除dom元素】--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-bind 修改元素对应的属性 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;sub&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sub&quot;</span> <span class="hljs-attr">v-bind:disabled</span>=<span class="hljs-string">&quot;subDisable&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;add&#x27;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;addDisable&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#count&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">num</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">                <span class="hljs-attr">subDisable</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-attr">addDisable</span>: <span class="hljs-literal">false</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">sub</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.num == <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&quot;减到0啦&quot;</span>)</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.subDisable = <span class="hljs-literal">true</span></span><br><span class="javascript">                        <span class="hljs-comment">// document.getElementById(&#x27;sub&#x27;).disabled = true</span></span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.num -= <span class="hljs-number">1</span></span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.addDisable = <span class="hljs-literal">false</span></span><br><span class="javascript">                        <span class="hljs-comment">// document.getElementById(&#x27;add&#x27;).disabled = false</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.num == <span class="hljs-number">10</span>)&#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&quot;最多10个哦&quot;</span>)</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.addDisable = <span class="hljs-literal">true</span></span><br><span class="javascript">                        <span class="hljs-comment">// document.getElementById(&#x27;add&#x27;).disabled = true</span></span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.num += <span class="hljs-number">1</span></span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.subDisable = <span class="hljs-literal">false</span></span><br><span class="javascript">                        <span class="hljs-comment">// document.getElementById(&#x27;sub&#x27;).disabled = false</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-for 遍历对象 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, idx) in direction&quot;</span>&gt;</span><br>            方向&#123;&#123;idx+1&#125;&#125;:&#123;&#123;item&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key, idx) in kvs&quot;</span>&gt;</span><br>            第&#123;&#123;idx+1&#125;&#125;个元素 key=&#123;&#123;key&#125;&#125;, value=&#123;&#123;value&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item, idx in list&quot;</span>&gt;</span><br>            第&#123;&#123;idx+1&#125;&#125;个元素 item=&#123;&#123;item&#125;&#125;, name=&#123;&#123;item.name&#125;&#125;, sex=&#123;&#123;item.sex&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addList&quot;</span>&gt;</span>addList<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;eraseList&quot;</span>&gt;</span>eraseList<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addMap&quot;</span>&gt;</span>addMap<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;eraseMap&quot;</span>&gt;</span>eraseMap<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#v-for&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">direction</span>: [<span class="hljs-string">&quot;上&quot;</span>, <span class="hljs-string">&quot;下&quot;</span>, <span class="hljs-string">&quot;左&quot;</span>, <span class="hljs-string">&quot;右&quot;</span>],</span><br><span class="javascript">                <span class="hljs-attr">kvs</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;gys&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">list</span>:[</span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;gys&quot;</span>,</span><br><span class="javascript">                        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;gys&quot;</span>,</span><br><span class="javascript">                        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;gys&quot;</span>,</span><br><span class="javascript">                        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                ]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">addList</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.push(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;syg&quot;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;unknown&quot;</span>&#125;)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">eraseList</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.shift()</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">addMap</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    Vue.set(<span class="hljs-built_in">this</span>.kvs, <span class="hljs-string">&quot;syg&quot;</span>, <span class="hljs-string">&quot;unknown&quot;</span>)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">eraseMap</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    Vue.delete(<span class="hljs-built_in">this</span>.kvs, <span class="hljs-string">&quot;syg&quot;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- v-model 双向绑定，绑定的数据和表单元素值(value)相关联 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:keyup</span>=<span class="hljs-string">&quot;enter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;enter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#v-model&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello World&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">enter</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.message = <span class="hljs-string">&quot;Hello Go&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><br><br>    <span class="hljs-comment">&lt;!-- axios 网络请求库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- axios.get(url).then(function(response)&#123;doSomething&#125;, function(err)&#123;doSomething&#125;) --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.get&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            axios.get(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>)</span><br><span class="javascript">            .then(</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                    alert(response.data)</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(err)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            )</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#post&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            axios.post(<span class="hljs-string">&quot;http://localhost:8080/testPost/&quot;</span>, &#123;<span class="hljs-attr">Id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">Pwd</span>:<span class="hljs-number">2</span>&#125;)</span><br><span class="javascript">            .then(</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                    alert(response.data)</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(err)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            )</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- axios + vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-axios&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vue-get&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-get&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;vueGet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vue-post&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-post&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;vuePost&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 3、使用组件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mycpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mycpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycpn</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 组件化的基本使用过程</span></span><br><span class="javascript">        <span class="hljs-comment">// 1、创建组件构造器对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cpnC = Vue.extend(&#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&lt;p&gt;儿子：哈哈哈哈哈哈哈哈哈&lt;/p&gt;&lt;/div&gt;`</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cpnFather = Vue.extend(&#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&lt;p&gt;爸爸：哈哈哈哈哈哈哈哈哈&lt;/p&gt;&lt;cpnson&gt;&lt;/cpnson&gt;&lt;/div&gt;`</span>, <span class="hljs-comment">// 父组件中直接使用子组件</span></span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">cpnson</span>: cpnC, <span class="hljs-comment">// 注册子组件</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-comment">// 2、注册组件（全局组件：在多个Vue实例下面都能使用）</span></span><br><span class="javascript">        <span class="hljs-comment">// Vue.component(mycpn, cpnC)</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 2、注册组件（局部组件：只能在该Vue实例下使用）</span></span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">mycpn</span>: cpnFather </span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-axios&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">vueGet</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    </span><br><span class="javascript">                    <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span></span><br><span class="javascript"></span><br><span class="javascript">                    axios.get(<span class="hljs-string">&quot;http://127.0.0.1:8080/&quot;</span>)</span><br><span class="javascript">                    .then(</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                            that.msg = response.data</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">                        &#125;,</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(err)</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    )</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">vuePost</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">                    axios.post(<span class="hljs-string">&quot;http://127.0.0.1:8080/testPost/&quot;</span>, &#123;<span class="hljs-attr">Id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">Pwd</span>:<span class="hljs-number">2</span>&#125;)</span><br><span class="javascript">                    .then(</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                            alert(response.data)</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="javascript">                        &#125;,</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(err)</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    )</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">   </span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  以上是旧的注册组件的方式，新的方式采用语法糖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn-register&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mycpnnew</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycpnnew</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mycpnnew</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycpnnew</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        const vue = new Vue(&#123;</span></span><br><span class="xml"><span class="handlebars">            el:&quot;#cpn-register&quot;,</span></span><br><span class="xml"><span class="handlebars">            components:&#123;</span></span><br><span class="xml"><span class="handlebars">                mycpnnew:&#123; // 注册组件</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">                    template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>father: hahahahahahaha<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">newson</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">newson</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cpndata</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="xml"><span class="handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cpncnt</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">                    components:&#123;  // 组件注册子组件</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">                        newson: &#123;</span></span><br><span class="xml"><span class="handlebars">                            template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>son: hahahahaha<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="xml"><span class="handlebars">                        &#125;</span></span><br><span class="xml"><span class="handlebars">                    &#125;,</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">                    // 组件中的数据，应该是函数返回的,每个组件实例是不相交的，其由函数返回一个新的数据实例</span></span><br><span class="xml"><span class="handlebars">                    // vue实例中的data在组件中是访问不到的</span></span><br><span class="xml"><span class="handlebars">                    data()&#123;     </span></span><br><span class="xml"><span class="handlebars">                        return&#123;</span></span><br><span class="xml"><span class="handlebars">                            cpndata: `组件数据`,</span></span><br><span class="xml"><span class="handlebars">                            cpncnt : 0</span></span><br><span class="xml"><span class="handlebars">                        &#125;</span></span><br><span class="xml"><span class="handlebars">                    &#125;,</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">                    // 组件方法</span></span><br><span class="xml"><span class="handlebars">                    methods:&#123;</span></span><br><span class="xml"><span class="handlebars">                        add: function()&#123;this.cpncnt ++&#125;,</span></span><br><span class="xml"><span class="handlebars">                        sub: function()&#123;this.cpncnt --&#125;</span></span><br><span class="xml"><span class="handlebars">                    &#125;</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">                &#125;</span></span><br><span class="xml"><span class="handlebars">            &#125;</span></span><br><span class="xml"><span class="handlebars">        &#125;)</span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 以上方式都显得很杂乱，可采用template标签，然后挂载到组件中的components。 --&gt;</span><br>    <br><br><br>    <span class="hljs-comment">&lt;!-- 组件通信：父传子使用props,子设置props属性来接收父组件的值，父组件调用子组件的时候v-bind绑定两者的关系 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件通信：子传父使用emit自定义事件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tson&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件模板<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;var1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in var2&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 每次鼠标点击，触发子组件自己的btnclick事件，这个事件内部再发送一个自定义事件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in var2&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;btnclick(item)&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tfather&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>父组件模板<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mycnp2</span> <span class="hljs-attr">v-bind:var1</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-bind:var2</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycnp2</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 监听子组件的自定义的sontrigger事件，绑定到自己的triggered事件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mycnp2</span> <span class="hljs-attr">v-bind:var2</span>=<span class="hljs-string">&quot;hobbies&quot;</span> @<span class="hljs-attr">sontrigger</span>=<span class="hljs-string">&quot;triggerred&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycnp2</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tcnp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mycnp1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycnp1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> _ = <span class="hljs-keyword">new</span> Vue(&#123; <span class="hljs-comment">// vue实例本身也可看作是父组件的父组件</span></span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#tcnp&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript"></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">mycnp1</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#tfather&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;gys&quot;</span>,</span><br><span class="javascript">                            <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&quot;篮球&quot;</span>, <span class="hljs-string">&quot;排球&quot;</span>, <span class="hljs-string">&quot;乒乓球&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>]</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-title">triggerred</span>(<span class="hljs-params">args</span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(args)</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-attr">mycnp2</span>:&#123;</span><br><span class="javascript">                            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#tson&quot;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                            <span class="hljs-comment">// 父传子</span></span><br><span class="javascript">                            <span class="hljs-comment">// props: [&quot;var1&quot;, &quot;var2&quot;],</span></span><br><span class="javascript">                            <span class="hljs-comment">// 增加限制</span></span><br><span class="javascript">                            <span class="hljs-attr">props</span>:&#123;</span><br><span class="javascript">                                <span class="hljs-attr">var1</span>:&#123;</span><br><span class="javascript">                                    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">                                    <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;ysg&quot;</span>, </span><br><span class="javascript">                                &#125;,</span><br><span class="javascript">                                <span class="hljs-attr">var2</span>:&#123;</span><br><span class="javascript">                                    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,</span><br><span class="javascript">                                    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示调用子组件时必须要为子组件绑定该值</span></span><br><span class="javascript">                                &#125;</span><br><span class="javascript">                            &#125;,</span><br><span class="javascript">                            </span><br><span class="javascript">                            <span class="hljs-comment">// 子传父</span></span><br><span class="javascript">                            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                                <span class="hljs-attr">btnclick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)</span>&#123;</span><br><span class="javascript">                                    <span class="hljs-comment">// 发射自定义事件sontrriger</span></span><br><span class="javascript">                                    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;sontrigger&quot;</span>, args)</span><br><span class="javascript">                                &#125;</span><br><span class="javascript">                            &#125;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><br>    <span class="hljs-comment">&lt;!-- 父子组件直接访问: 父直接访问子，通过$children和$refs --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 父子组件直接访问: 子直接访问父，通过$parents --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 访问根组件，通过$root --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ch1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnclick&quot;</span>&gt;</span>子组件call父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;rootclick&quot;</span>&gt;</span>子组件call根组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fs&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">child1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">child1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">child1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;gys1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">child1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;gys2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnclick&quot;</span>&gt;</span>父组件call子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 父组件</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vue1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#fs&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;父组件name&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;call father show message&quot;</span>)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-comment">// 父访问子</span></span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">btnclick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-comment">// console.log(this.$children)</span></span><br><span class="javascript">                    <span class="hljs-comment">// this.$children返回的是所有的子组件数组</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.$children[<span class="hljs-number">0</span>].showMsg()</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.$children.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;</span><br><span class="javascript">                        element.showMsg()</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(element.name)</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 通常使用ref属性来获取对应的子组件</span></span><br><span class="javascript">                    <span class="hljs-comment">// this.$refs返回的是一个空属性</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.$refs.gys1.showMsg()</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 子组件</span></span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">child1</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#ch1&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;子组件name&quot;</span></span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;call son show message&quot;</span>)</span><br><span class="javascript">                        &#125;,</span><br><span class="javascript">                        <span class="hljs-comment">// 子访问父</span></span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-title">btnclick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-comment">// this.$parent返回父组件</span></span><br><span class="javascript">                            <span class="hljs-built_in">this</span>.$parent.showMsg()</span><br><span class="javascript">                            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$parent.name)</span><br><span class="javascript">                        &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">// 访问根组件</span></span><br><span class="javascript">                        <span class="hljs-function"><span class="hljs-title">rootclick</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">this</span>.$root.showMsg()</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br>    <span class="hljs-comment">&lt;!-- slot插槽的基本使用（已废弃）:不指定名字将【替换全部未命名插槽】 --&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插槽默认的值 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t3:具名插槽的使用<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t4:作用域插槽的使用<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mm1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cnp1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>更改默认值<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cnp1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cnp2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;s1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;s2&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;s3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">cnp3</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 作用域插槽：经常用来==&gt;父组件替换插槽的标签，但是内容是由子组件来提供 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cnp4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cnp4</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 获取插槽的内容后，替换插槽 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slot&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;slot.data.join(&#x27;+&#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">cnp4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cnp1 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t1&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cnp2 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t2&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cnp3 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t3&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> cnp4 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t4&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                    <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&quot;篮球&quot;</span>, <span class="hljs-string">&quot;排球&quot;</span>, <span class="hljs-string">&quot;乒乓球&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>]</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vue2 = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#mm1&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">cnp1</span>:cnp1,</span><br><span class="javascript">                <span class="hljs-attr">cnp2</span>:cnp2,</span><br><span class="javascript">                cnp3,</span><br><span class="javascript">                cnp4,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>---------------------------------------------------------<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-slot插槽的基本使用: 省略为#, 类似v-bind...,但是最好只用一种风格 --&gt;</span><br>        <br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vt1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插槽默认的值 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vt2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vt3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t3:具名插槽的使用<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vt4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>子组件t4:作用域插槽的使用<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vmm1&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- default可以省略,没有指定v-slot则默认为default --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 请注意， v-slot 只能添加到 &lt;template&gt; 或自定义组件上，这点与弃用的先前的slot属性不同，这里使用了缩写# --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;p #footer&gt;我是name为footer的slot&lt;/p&gt;  不能这样写,p不是自定义组件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp1</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcnp1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>更改默认值<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcnp1</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span> 替换了 <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">vcnp2</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">s1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">s2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">s3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">vcnp3</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 作用域插槽：经常用来==&gt;父组件替换插槽的标签，但是内容是由子组件来提供 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcnp4</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">vcnp4</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- #slotname=&quot;data&quot; --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">s1</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;hobbies.data.join(&#x27;+&#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">vcnp4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vcnp1 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#vt1&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vcnp2 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#vt2&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vcnp3 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#vt3&quot;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> vcnp4 = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#vt4&quot;</span>,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                    <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&quot;篮球&quot;</span>, <span class="hljs-string">&quot;排球&quot;</span>, <span class="hljs-string">&quot;乒乓球&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>]</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vmm1&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">vcnp1</span>:vcnp1,</span><br><span class="javascript">                <span class="hljs-attr">vcnp2</span>:vcnp2,</span><br><span class="javascript">                vcnp3,</span><br><span class="javascript">                vcnp4,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-comment">// p45 高阶函数 filter(condition),map,reduce</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>配置文件(.css,.less,.vue文件打包都需要下载额外的loader)</p><p><img src="/2021/09/02/Vue%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8Awebpack%E6%89%93%E5%8C%85/image-20210916084700793.png" alt="image-20210916084700793"></p><p>入口函数，其他需要打包的函数可树形依赖的方式增加文件之间的依赖，从而使webpack自动打包所有文件。</p><p><img src="/2021/09/02/Vue%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8Awebpack%E6%89%93%E5%8C%85/image-20210916084610540.png" alt="image-20210916084610540"></p><p>打包命令<code>webpack &lt;xx&gt; &lt;xx&gt; &lt;xx&gt; -o &lt;xx&gt;</code>，当上面已经配置了webpack命令的输入输出后，直接可以使用<code>webpack</code>。</p><p>package.json就是管理你本地安装的npm包，用于定义这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。一个package.json文件可以做如下事情： 1、展示项目所依赖的npm包。2、允许指定一个包的版本[范围] </p><p><img src="/2021/09/02/Vue%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%8F%8Awebpack%E6%89%93%E5%8C%85/image-20210916085253034.png" alt="image-20210916085253034"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker中使用redis和mysql</title>
    <link href="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/"/>
    <url>/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/</url>
    
    <content type="html"><![CDATA[<h2 id="在docker中使用redis"><a href="#在docker中使用redis" class="headerlink" title="在docker中使用redis"></a>在docker中使用redis</h2><p>安装好<code>docker</code>后，拉取<code>redis</code>镜像。其余操作与<code>consul简单使用</code>类似。</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210901102052885.png" alt="image-20210901102052885"></p><h3 id="回顾redis常用命令"><a href="#回顾redis常用命令" class="headerlink" title="回顾redis常用命令"></a>回顾redis常用命令</h3><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p><code>redis-server status</code>查看服务器状态</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210901102751669.png" alt="image-20210901102751669"></p><p><code>redis-server start</code>开启服务（可指定配置文件，这里使用默认配置）</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210901102926427.png" alt="image-20210901102926427"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><code>redis-cli -h hostname -p port -a password</code>连接<code>redis服务器</code>（可以不指定参数，因为使用了默认配置）</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210901103240103.png" alt="image-20210901103240103"></p><p><code>keys *</code>查看所有<code>key</code>(正则表达式)</p><p><code>get key</code>获取对应<code>key的value</code></p><p><code>set key value [EX | PX] time [NX | XX]</code>设置键值对，<code>[EX | PX]是过期时间，单位分别为秒和毫秒</code>，<code>[NX | XX]</code>是操作限制，<code>NX</code>代表当<code>key</code>不存在时才执行该语句, <code>XX</code>代表当<code>key</code>存在时才执行该语句。</p><p><code>del key</code>删除键值对</p><p><code>flushall</code>清空服务器(删除所有键值对)</p><h2 id="在docker中使用mysql"><a href="#在docker中使用mysql" class="headerlink" title="在docker中使用mysql"></a>在docker中使用mysql</h2><p>挂载本地配置文件mysql.config</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">user</span>=root<br><span class="hljs-attr">lower_case_table_names</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">event_scheduler</span>=<span class="hljs-literal">ON</span><br><span class="hljs-attr">default-time-zone</span>=<span class="hljs-string">&#x27;+8:00&#x27;</span><br></code></pre></td></tr></table></figure><p>运行如下指令</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903144316082.png" alt="image-20210903144316082"></p><p>指定密码为456</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo docker run --name mysql1 --net diy-<span class="hljs-keyword">static</span>-net --ip <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span> -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">456</span> -v <span class="hljs-regexp">/home/gy</span>s<span class="hljs-regexp">/temp/my</span>sql-config<span class="hljs-regexp">/mysql.config:/</span>etc<span class="hljs-regexp">/mysql/my</span>.conf -v <span class="hljs-regexp">/home/gy</span>s<span class="hljs-regexp">/temp/my</span>sql-data<span class="hljs-regexp">/:/</span>var<span class="hljs-regexp">/lib/my</span>sql-files mysql<br></code></pre></td></tr></table></figure><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903151016404.png" alt="image-20210903151016404"></p><p>连接成功</p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903150917305.png" alt="image-20210903150917305"></p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903151447261.png" alt="image-20210903151447261"></p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210905135407028.png" alt="image-20210905135407028"></p><h3 id="常用mysql指令"><a href="#常用mysql指令" class="headerlink" title="常用mysql指令"></a>常用mysql指令</h3><p><code>show databases;    查看所有数据库</code></p><p><code>use dbName;    切换数据库</code></p><p> <code>create database dbName;    创建数据库</code></p><p><code>drop database dbName;    删除数据库</code></p><p><code>show tables;    查看所有表</code></p><p><code>describe tableName;    查看表结构</code></p><p><code>show create table tableName;    查看表的约束信息</code></p><p><code>create table tableName ( &lt;字段名1&gt; &lt;类型1&gt; ,...,&lt;字段名n&gt; &lt;类型n&gt;);    创建表</code></p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903154804846.png" alt="image-20210903154804846"></p><p><code>update user set authentication_string=&#39;&#39; where user=&#39;ms&#39;;</code></p><p><code>flush priviledges;</code> 重新加载权限表</p><p><code>alter user &#39;ms&#39;@&#39;%&#39; identified with mysql_native_password by &#39;ms123456&#39;;</code> 更改密码</p><p><code>describe tableName;    查看表结构</code></p><p><code>show index from tableName; 查看该表的索引</code></p><p><code>drop table tableName;    删除表</code></p><p><code>insert into tableName (&lt;字段名1&gt;,...,&lt;字段名n&gt;) values (值1,...,值n];    在表中插入元组</code></p><p> <code>select &lt;...&gt; from &lt;tableName&gt; join &lt;tableName&gt; on &lt;...&gt; where &lt;...&gt; group by &lt;Attribute&gt; having &lt;聚合条件&gt; order by &lt;...&gt;;    查找表中数据</code></p><p><code>delete from tableName where &lt;...&gt;;    从表中删除元组</code></p><p><code>update tableName set &lt;字段名1&gt; = &lt;值1&gt;,...,&lt;字段名n&gt;=&lt;值n&gt; where &lt;...&gt;;    更新表中元组</code></p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210903160421602.png" alt="image-20210903160421602"></p><h5 id="mysql中的外键约束"><a href="#mysql中的外键约束" class="headerlink" title="mysql中的外键约束"></a>mysql中的外键约束</h5><p>可以在约束前指定约束名称<code>constraint fk1 foreign key(studentId) references student(id)</code>指定该外键约束名为<code>fk1</code></p><p><img src="/2021/09/01/docker%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%92%8Cmysql/image-20210904092540719.png" alt="image-20210904092540719"></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go实现rpc的简单demo</title>
    <link href="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/"/>
    <url>/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/</url>
    
    <content type="html"><![CDATA[<h3 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h3><p>使用<code>go</code>自带库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/////// RPC server</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;net/rpc&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;<br>Msg <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Msg <span class="hljs-keyword">string</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> HelloServerWrapper <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// 绑定函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *HelloServerWrapper)</span> <span class="hljs-title">ServerLocalFunc</span><span class="hljs-params">(request Request, response *Response)</span> <span class="hljs-title">error</span></span> &#123;<br>response.Msg = <span class="hljs-string">&quot;hello &quot;</span> + request.Msg<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">// 注册服务</span><br>e := rpc.RegisterName(<span class="hljs-string">&quot;sayHello&quot;</span>, <span class="hljs-built_in">new</span>(HelloServerWrapper))<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc.Register error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 监听</span><br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;net.Listen error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listener.Close()<br><br><br>fmt.Println(<span class="hljs-string">&quot;start rpc serve...&quot;</span>)<br><br><span class="hljs-comment">// 处理事务</span><br><span class="hljs-keyword">for</span>&#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;listener.Accept error&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br>rpc.ServeConn(conn)<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">/////// RPC client</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/rpc&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;<br>Msg <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Msg <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>conn, err := rpc.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc.Dial error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>fmt.Println(<span class="hljs-string">&quot;start rpc call..&quot;</span>)<br><br>request := Request&#123;Msg: <span class="hljs-string">&quot;gys&quot;</span>&#125;<br>response := <span class="hljs-built_in">new</span>(Response)<br>err = conn.Call(<span class="hljs-string">&quot;sayHello.ServerLocalFunc&quot;</span>, request, &amp;response)<br><br><span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;conn.Call error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;response: &quot;</span>, response.Msg)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="version-2"><a href="#version-2" class="headerlink" title="version 2"></a>version 2</h3><p>使用 <code>grpc</code> + <code>protobuf</code></p><p>与<code>c++</code>中使用<code>protobuf</code>类似：<code>protoc --cpp_out=./   *.proto</code></p><p> <code>go</code>中使用命令来生成对应<code>go</code>文件<code>protoc --go_out=plugins=grpc:./ SayHello.proto</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">////// proto</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br>option go_package = <span class="hljs-string">&quot;./; sayHelloProto&quot;</span>;<br><span class="hljs-keyword">package</span> sayHelloProto;<br><br>message request&#123;<br>  <span class="hljs-keyword">string</span> Name = <span class="hljs-number">1</span>;<br>&#125;<br><br>message response&#123;<br>  <span class="hljs-keyword">string</span> Msg = <span class="hljs-number">1</span>;<br>&#125;<br><br>service SSayy&#123;<br>  rpc SayHello(request) returns (response);<br>  rpc SayLove(request) returns (response);<br>&#125;<br><br><span class="hljs-comment">////// RPC server</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>sayHelloProto <span class="hljs-string">&quot;2_grpc/src/proto&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> LocalWrapper <span class="hljs-keyword">struct</span> &#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *LocalWrapper)</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(ctx context.Context, request *sayHelloProto.Request)</span> <span class="hljs-params">(response *sayHelloProto.Response, err error)</span></span> &#123;<br>response = <span class="hljs-built_in">new</span>(sayHelloProto.Response)<br>response.Msg = <span class="hljs-string">&quot;Hello &quot;</span> + request.Name<br><span class="hljs-keyword">return</span> response, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *LocalWrapper)</span> <span class="hljs-title">SayLove</span><span class="hljs-params">(ctx context.Context, request *sayHelloProto.Request)</span> <span class="hljs-params">(response *sayHelloProto.Response, err error)</span></span> &#123;<br>response = <span class="hljs-built_in">new</span>(sayHelloProto.Response)<br>response.Msg = <span class="hljs-string">&quot;Love &quot;</span> + request.Name<br><span class="hljs-keyword">return</span> response, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 获取一个rpc server</span><br>rpcServer := grpc.NewServer()<br><br><span class="hljs-comment">// 在该server上注册服务</span><br>sayHelloProto.RegisterSSayyServer(rpcServer, <span class="hljs-built_in">new</span>(LocalWrapper))<br><br><span class="hljs-comment">// 监听</span><br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;net.Listen error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listener.Close()<br><br>fmt.Println(<span class="hljs-string">&quot;start serve...&quot;</span>)<br><br><span class="hljs-comment">// 开始服务</span><br>rpcServer.Serve(listener)<br>&#125;<br><span class="hljs-comment">/////// RPC client</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>sayHelloProto <span class="hljs-string">&quot;2_grpc/src/proto&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>, grpc.WithInsecure())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;grpc.Dial error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><br><span class="hljs-comment">// 获取对应服务的grpc client</span><br>grpcClient := sayHelloProto.NewSSayyClient(conn)<br><br><span class="hljs-comment">// rpc call</span><br>request := sayHelloProto.Request&#123;Name: <span class="hljs-string">&quot;gys&quot;</span>&#125;<br>response1, err1 := grpcClient.SayHello(context.TODO(), &amp;request)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc call SayHello error&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc call SayHello: &quot;</span>, response1.Msg)<br>&#125;<br><br>response2, err2 := grpcClient.SayLove(context.TODO(), &amp;request)<br><span class="hljs-keyword">if</span> err2 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc call SayLove error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc call SayHello: &quot;</span>, response2.Msg)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="version-3"><a href="#version-3" class="headerlink" title="version 3"></a>version 3</h3><p>使用<code>consul</code>作为服务发现，consul下载安装不详细介绍了，另一篇博客<a href="https://gys18007141407.github.io/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">consul简单使用</a>中都有所涉及，这里直接使用该demo。</p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831143035983.png" alt="image-20210831143035983"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">////// RPC server</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>sayHelloProto <span class="hljs-string">&quot;3_consul_grpc/proto&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/hashicorp/consul/api&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-comment">// SSayyServer is the server API for SSayy service.</span><br><span class="hljs-comment">// type SSayyServer interface &#123;</span><br><span class="hljs-comment">//  SayHello(context.Context, *Request) (*Response, error)</span><br><span class="hljs-comment">// SayLove(context.Context, *Request) (*Response, error)</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">// 用该类实现SSayyServer接口: 绑定接口方法</span><br><span class="hljs-keyword">type</span> LocalWrapper <span class="hljs-keyword">struct</span> &#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *LocalWrapper)</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(ctx context.Context, request *sayHelloProto.Request)</span> <span class="hljs-params">(*sayHelloProto.Response, error)</span></span>  &#123;<br>response := <span class="hljs-built_in">new</span>(sayHelloProto.Response)<br>response.Msg = <span class="hljs-string">&quot;Hello &quot;</span> + request.Name<br><span class="hljs-keyword">return</span> response, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *LocalWrapper)</span> <span class="hljs-title">SayLove</span><span class="hljs-params">(ctx context.Context, request *sayHelloProto.Request)</span> <span class="hljs-params">(*sayHelloProto.Response, error)</span></span>  &#123;<br>response := <span class="hljs-built_in">new</span>(sayHelloProto.Response)<br>response.Msg = <span class="hljs-string">&quot;Love &quot;</span> + request.Name<br><span class="hljs-keyword">return</span> response, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 对于consul服务器来说，现在helloServer也是客户端</span><br><span class="hljs-comment">// consul客户端的配置,这里直接使用默认配置</span><br>consulConfig := api.DefaultConfig()<br><br><span class="hljs-comment">// 更改配置</span><br>consulConfig.Address = <span class="hljs-string">&quot;localhost:11500&quot;</span><br><br><span class="hljs-comment">// 根据相应配置获得consul客户端</span><br>consulClient, err := api.NewClient(consulConfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;api.NewClient error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 通过相应数据结构，注册服务到consul服务器上</span><br>serviceInfo := api.AgentServiceRegistration&#123;<br>ID: <span class="hljs-string">&quot;1&quot;</span>,<br>Name: <span class="hljs-string">&quot;Hello&quot;</span>,<br>Tags: []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;sayHello&quot;</span>&#125;,<br>Port: <span class="hljs-number">8000</span>,<br>Address: <span class="hljs-string">&quot;192.168.162.128&quot;</span>,<br>Check: &amp;api.AgentServiceCheck&#123;<br>TCP: <span class="hljs-string">&quot;192.168.162.128:8000&quot;</span>,<br>Interval: <span class="hljs-string">&quot;10s&quot;</span>,<br>Timeout: <span class="hljs-string">&quot;2s&quot;</span>,<br>DeregisterCriticalServiceAfter: <span class="hljs-string">&quot;60s&quot;</span>, <span class="hljs-comment">// 检查失败60s后，consul服务器自动将该注册服务删除</span><br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 注册服务</span><br>err = consulClient.Agent().ServiceRegister(&amp;serviceInfo)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;consulClient.Agent().ServiceRegister() error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;regist service : hello&quot;</span>)<br><br><span class="hljs-comment">// 服务实现</span><br><br><span class="hljs-comment">// 获取一个rpc server</span><br>rpcServer := grpc.NewServer()<br><br><span class="hljs-comment">// 在该server上注册服务</span><br>sayHelloProto.RegisterSSayyServer(rpcServer, <span class="hljs-built_in">new</span>(LocalWrapper))<br><br><span class="hljs-comment">// 监听</span><br>listener, err1 := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;192.168.162.128:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;net.Listen error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listener.Close()<br><br><span class="hljs-comment">// 开始服务</span><br>rpcServer.Serve(listener)<br>&#125;<br><br><br><br><span class="hljs-comment">////// RPC client</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>sayHelloProto <span class="hljs-string">&quot;3_consul_grpc/proto&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/hashicorp/consul/api&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 对于consul服务器来说，现在helloClient还是客户端</span><br><span class="hljs-comment">// consul客户端的配置,这里直接使用默认配置</span><br>consulConfig := api.DefaultConfig()<br><br><span class="hljs-comment">// 更改配置</span><br>consulConfig.Address = <span class="hljs-string">&quot;localhost:11500&quot;</span><br><br><span class="hljs-comment">// 根据相应配置获得consul客户端</span><br>consulClient, err := api.NewClient(consulConfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;api.NewClient error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 服务发现</span><br><span class="hljs-comment">// health只返回健康节点的句柄</span><br>serviceSlice, answers, err1 := consulClient.Health().Service(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;consulClient.Health().Service() error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(serviceSlice) == <span class="hljs-number">0</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;consul server DO NOT find this service&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 查看对于extra questions [nil] 的回复 answers</span><br>fmt.Println(answers)<br><br><span class="hljs-comment">// 挑选其中一个服务器</span><br>service := serviceSlice[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">// 获取地址</span><br>addr := service.Service.Address + <span class="hljs-string">&quot;:&quot;</span> + strconv.Itoa(service.Service.Port)<br><br>fmt.Println(<span class="hljs-string">&quot;service ID: &quot;</span>, service.Service.ID)<br>fmt.Println(<span class="hljs-string">&quot;service addr: &quot;</span>, addr)<br><br><span class="hljs-comment">// 连接</span><br>conn, err2 := grpc.Dial(addr, grpc.WithInsecure())<br><span class="hljs-keyword">if</span> err2 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;grpc.Dial() error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 获取一个grpc client</span><br>rpcClient := sayHelloProto.NewSSayyClient(conn)<br><br><span class="hljs-comment">// rpc call</span><br>request := sayHelloProto.Request&#123;<br>Name: <span class="hljs-string">&quot;gys&quot;</span>,<br>&#125;<br>response1, err3 := rpcClient.SayHello(context.TODO(), &amp;request)<br><span class="hljs-keyword">if</span> err3 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpcClient.SayHello() error&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc response: &quot;</span>, response1.Msg)<br>&#125;<br>response2, err4 := rpcClient.SayLove(context.TODO(), &amp;request)<br><span class="hljs-keyword">if</span> err4 != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpcClient.SayLove() error&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;rpc response: &quot;</span>, response2.Msg)<br>&#125;<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br><br><span class="hljs-comment">////// LoginOut 服务</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/hashicorp/consul/api&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 对于consul服务器来说，现在helloServer也是客户端</span><br><span class="hljs-comment">// consul客户端的配置,这里直接使用默认配置</span><br>consulConfig := api.DefaultConfig()<br><br><span class="hljs-comment">// 更改配置</span><br>consulConfig.Address = <span class="hljs-string">&quot;localhost:11500&quot;</span><br><br><span class="hljs-comment">// 根据相应配置获得consul客户端</span><br>consulClient, err := api.NewClient(consulConfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;api.NewClient error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 注销服务</span><br>err = consulClient.Agent().ServiceDeregister(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;consulClient.Agent().ServiceDeregister() error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;DeRegister serviceID: 1&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>helloServer</code>注册<code>Hello</code>服务后</p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831145957694.png" alt="image-20210831145957694"></p><p><code>helloClient</code>调用<code>Hello</code>服务</p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831150733545.png" alt="image-20210831150733545"></p><p><code>loginOut</code>注销<code>Hello</code>服务</p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831151105401.png" alt="image-20210831151105401"></p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831150931647.png" alt="image-20210831150931647"></p><p>再次使用<code>helloClient</code>调用<code>Hello</code>服务</p><p><img src="/2021/08/31/go%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E7%AE%80%E5%8D%95demo/image-20210831151151639.png" alt="image-20210831151151639"></p><h3 id="version-4"><a href="#version-4" class="headerlink" title="version 4"></a>version 4</h3><p>使用<code>go-micro</code>框架，示例代码及结果见<code>go-micro框架v3.0.0</code>中的测试代码。与<code>version 3</code>差不多，但是其大部分代码都是自动生成的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span><br><span class="hljs-string">&quot;github.com/asim/go-micro/v3&quot;</span><br><span class="hljs-string">&quot;github.com/asim/go-micro/v3/logger&quot;</span><br><span class="hljs-string">&quot;microHello/handler&quot;</span><br>pb <span class="hljs-string">&quot;microHello/proto&quot;</span><br><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Create service</span><br><span class="hljs-comment">//srv := service.New(</span><br><span class="hljs-comment">//service.Name(&quot;microhello&quot;),</span><br><span class="hljs-comment">//service.Version(&quot;latest&quot;),</span><br><span class="hljs-comment">//)</span><br><br><span class="hljs-comment">// 不使用上述默认micro创建服务，改为使用go-micro创建</span><br>consulRegistry := consul.NewRegistry()<br>srv := micro.NewService(<br>micro.Name(<span class="hljs-string">&quot;microHello&quot;</span>),<br>micro.Version(<span class="hljs-string">&quot;latest&quot;</span>),<br>micro.Address(<span class="hljs-string">&quot;127.0.0.1:8005&quot;</span>),<br>micro.Registry(consulRegistry),<br>)<br><br><span class="hljs-comment">// Register handler</span><br>pb.RegisterMicroHelloHandler(srv.Server(), <span class="hljs-built_in">new</span>(handler.MicroHello))<br><br><span class="hljs-comment">// Run service</span><br><span class="hljs-keyword">if</span> err := srv.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>logger.Fatal(err)<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-comment">////// RPC client</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>microHello <span class="hljs-string">&quot;4_go-micro/src/helloClient/proto&quot;</span><br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span><br><span class="hljs-string">&quot;github.com/asim/go-micro/v3&quot;</span><br><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><br><br><span class="hljs-comment">// create a new service</span><br>service := micro.NewService(<br>micro.Registry(consul.NewRegistry()))<br><br><span class="hljs-comment">// parse command line flags</span><br>service.Init()<br><br><span class="hljs-comment">// Use the generated client stub</span><br>client := microHello.NewMicroHelloService(<span class="hljs-string">&quot;microHello&quot;</span>, service.Client())<br><br><span class="hljs-comment">// Make request</span><br>response, err := client.Call(context.Background(), &amp;microHello.Request&#123;<br>Name: <span class="hljs-string">&quot;gys&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(response.Msg)<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>rpc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>rpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-mod坑点</title>
    <link href="/2021/08/30/go%20mod%E5%9D%91%E7%82%B9/"/>
    <url>/2021/08/30/go%20mod%E5%9D%91%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="Go的版本管理工具"><a href="#Go的版本管理工具" class="headerlink" title="Go的版本管理工具"></a>Go的版本管理工具</h2><p>一开始学习<code>go</code>时，关闭了<code>GO111MODULE</code>，然后按照网上教程<code>go get</code>安装依赖时都会把对应文件下载到<code>GOPATH/pkg/mod</code>下，最奇妙的是下载完之后<code>import</code>会显示无法解析符号。后来，我发现<code>import</code>包时需要对应包在<code>GOPATH/src</code>下，故每次都是<code>git clone</code>源代码到<code>GOPATH/src</code>下，最后才可以正常编译运行代码。</p><hr><p>顺便记录一下<code>Ubuntu</code>中<code>GoLand</code>无法输入中文的解决方案：</p><p>在安装目录下的<code>bin/goland.sh</code>中增加下列3句即可。</p><p><code>export GTK_IM_MODULE=ibus</code></p><p><code>export QT_IM_MODULE=ibus</code></p><p><code>export XMODIFIERS=@im=ibus</code></p><hr><h3 id="go-mod简介"><a href="#go-mod简介" class="headerlink" title="go mod简介"></a>go mod简介</h3><p><code>module</code>是一个相关<code>Go</code>包的集合，它是源代码更替和版本控制的单元。模块由源文件形成的<code>go.mod</code>文件的根目录定义，包含<code>go.mod</code>文件的目录也被称为模块根。<code>modules</code>取代旧的的基于<code>GOPATH</code>方法来指定在工程中使用哪些源文件或导入包。模块路径是导入包的路径前缀，<code>go.mod</code>文件定义模块路径，并且列出了在项目构建过程中使用的特定版本。</p><h3 id="go-mod-init-module-name"><a href="#go-mod-init-module-name" class="headerlink" title="go mod init module_name"></a>go mod init module_name</h3><p>此命令会在当前目录中初始化和创建一个新的<code>go.mod</code>文件，当然你也可以手动创建一个<code>go.mod</code>文件，然后包含一些<code>module</code>声明，这样就比较麻烦。<code>go mod init</code>命令可以帮助我们自动创建。</p><p>在创建一个新项目的同时，在终端执行<code>go mod init module_name</code>，将该项目打包为一个<code>mod</code>。该模块需要的外部库，如<code>grpc</code>，通过<code>go get -v google.golang.org/grpc</code>来获取，<code>go get</code>默认将<code>package</code>下载到<code>$GOPATH/pkg/mod/</code>下面，然后项目(这个<code>mod</code>)会有外部库的引用路径。</p><p><img src="/2021/08/30/go%20mod%E5%9D%91%E7%82%B9/image-20210831100738403.png" alt="image-20210831100738403"></p><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>默认情况下，<code>Go</code>不会移除<code>go.mod</code>文件中的无用依赖。所以当你的依赖中有些使用不到了，可以使用<code>go mod tidy</code>命令来清除它。</p><p><code>go mod tidy [-v]</code>会添加缺失的模块以及移除不需要的模块。执行后会生成<code>go.sum</code>文件。添加参数<code>-v</code>，输出详细信息。</p><h3 id="go-mod-verify"><a href="#go-mod-verify" class="headerlink" title="go mod verify"></a>go mod verify</h3><p><code>go mod verify</code>会检查当前项目/模块/<code>mod</code>的依赖是否已经存储在本地下载的源代码缓存中，以及检查自从下载下来是否有修改。如果所有的模块都没有修改，那么会打印<code>all modules verified</code>，否则会打印变化的内容。</p><h3 id="go环境变量-GO111MODULE"><a href="#go环境变量-GO111MODULE" class="headerlink" title="go环境变量:GO111MODULE"></a>go环境变量:GO111MODULE</h3><p><code>GO111MODULE</code>有三个值：<code>off,on或者auto(默认)</code>。</p><p>如果<code>GO111MODULE=off</code>，那么<code>go</code>不支持<code>mod</code>，<code>go</code>将会在<code>vendor</code>目录下和<code>GOPATH</code>目录中查找依赖包。</p><p>如果<code>GO111MODULE=on</code>，那么<code>go</code>就会开启<code>mod</code>功能，而不会访问<code>GOPATH</code>。这种模式下，<code>GOPATH</code>__不再在build时扮演导入的角色__，但是尽管如此，它还是承担着存储下载依赖包的角色。它会将依赖包放在<code>GOPATH/pkg/mod</code>目录下。</p><p>如果<code>GO111MODULE=auto</code>，那么<code>go</code>会根据当前目录来决定是否启用<code>mod</code>功能。只有当当前目录在<code>GOPATH/src</code>目录之外而且__当前目录包含__<code>go.mod</code>文件或者其__子目录包含__<code>go.mod</code>文件才会启用。</p><h3 id="GoLand设置go-mod-integrate"><a href="#GoLand设置go-mod-integrate" class="headerlink" title="GoLand设置go mod integrate"></a>GoLand设置go mod integrate</h3><p><img src="/2021/08/30/go%20mod%E5%9D%91%E7%82%B9/image-20210831103034946.png" alt="image-20210831103034946"></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session一致性</title>
    <link href="/2021/08/23/session%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <url>/2021/08/23/session%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、<span class="hljs-keyword">session</span> 在服务器端，cookie 在客户端（浏览器）<br><span class="hljs-number">2</span>、<span class="hljs-keyword">session</span> 默认被存在在服务器的一个文件里（不是内存）<br><span class="hljs-number">3</span>、<span class="hljs-keyword">session</span> 的运行依赖 <span class="hljs-keyword">session</span> id，而 <span class="hljs-keyword">session</span> id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 <span class="hljs-keyword">session</span> 也会失效（通过url重写解决）<br><span class="hljs-number">4</span>、<span class="hljs-keyword">session</span> 可以放在文件、数据库、或内存中都可以。<br><span class="hljs-number">5</span>、用户验证这种场合一般会用 <span class="hljs-keyword">session</span> <br>维持一个会话的核心就是客户端的唯一标识<span class="hljs-keyword">session</span> id <br></code></pre></td></tr></table></figure><h3 id="保持session一致性的常见方法"><a href="#保持session一致性的常见方法" class="headerlink" title="保持session一致性的常见方法"></a>保持session一致性的常见方法</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、客户端存储法：一个用户只存储自己的数据。<br><span class="hljs-number">2</span>、<span class="hljs-keyword">session</span>同步法：多台web-<span class="hljs-keyword">server</span>相互同步数据。<br><span class="hljs-number">3</span>、反向代理hash一致性：四层hash和七层hash都可以，保证一个用户的请求落在一台web-<span class="hljs-keyword">server</span>上。<br><span class="hljs-number">4</span>、后端统一存储：将<span class="hljs-keyword">session</span>存在一个统一的缓存中，多台web-<span class="hljs-keyword">server</span>从这个统一的缓存中取<span class="hljs-keyword">session</span>。<br><br>推荐使用后端统一存储：<br><span class="hljs-number">1</span>、<span class="hljs-keyword">session</span>同步和反向代理hash一致性说到底还是将<span class="hljs-keyword">session</span>存在web-<span class="hljs-keyword">server</span>上，web-<span class="hljs-keyword">server</span>重启或者升级则<span class="hljs-keyword">session</span>数据丢失。<br><span class="hljs-number">2</span>、web层、service层无状态是大规模分布式系统设计原则之一，<span class="hljs-keyword">session</span>属于状态，不宜放在web层。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>session</category>
      
    </categories>
    
    
    <tags>
      
      <tag>session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio和k8s</title>
    <link href="/2021/08/23/istio%E5%92%8Ck8s/"/>
    <url>/2021/08/23/istio%E5%92%8Ck8s/</url>
    
    <content type="html"><![CDATA[<h3 id="istio"><a href="#istio" class="headerlink" title="istio"></a>istio</h3><p>Istio 提供一种简单的方式来为已部署的服务建立网络，该网络具有负载均衡、服务间认证、监控等功能，而不需要对服务的代码做任何改动。</p><p>简单来说istio就是用来做service mesh[服务网格]的工具链，istio通常搭配k8s来使用。</p><p>如果只用原生k8s，一般采用service来进行负载均衡，但如果想增加一些功能如熔断，限流，灰度等，这些功能在service层面是做不到的。这些高级功能通常采用service mesh这样一个工具或者说思路来进行实现。</p><h3 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h3><p>K8S是当前主流的容器编排系统, 服务编排系统要想实现服务的自动化部署和运行离不开容器编排系统。</p><p>容器目的是解决服务器的异构问题, 解决了部署的时候无需在考虑底层系统环境是否能够满足服务的需要.  但是单独的容器并没有生产的价值, 因为他只是提供了底层应用的托管程序, 并没有处理多个容器容器投入生产的问题,  而容器的编排则是处理多个容器投入生产的痛点问题。</p><p>容器编排系统是在大范围,动态环境中管理容器生命周期的工具。</p><p>简单来说，K8S是docker的调度系统。</p><h3 id="K8S集群中的主机"><a href="#K8S集群中的主机" class="headerlink" title="K8S集群中的主机"></a>K8S集群中的主机</h3><p>集群中的主机主要分为两种 Master和Node</p><p><strong>Node</strong> 是运行具体容器的主机,负责提供后具体的服务,并且本身具有自我修复能力  –Data Plane 数据平面<br><strong>Master</strong> 负责管理Node, 控制Node 具体运行什么容器, 同时还承担外部数据访问的角色– Control Plane 控制层面<br>Master<strong>冗余</strong>是为了用作灾备[替换，老大宕机，集群崩溃]，出故障时直接替换，集群中只能有一个Master控制所有Node。</p><p>Node<strong>冗余</strong>是为了做负载均衡。若某个Node故障，则该Node上的所有任务被分配到其他Node上。</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828141928567.png" alt="image-20210828141928567"></p><h3 id="主机中的POD"><a href="#主机中的POD" class="headerlink" title="主机中的POD"></a>主机中的POD</h3><p>Pod是K8S平台上的原子单位。当我们在K8S上创建一个Deployment时，它将创建附带容器的POD。每个POD与被调度的Node绑定直到被删除。万一Node故障了，一个新POD会被调度到其它可用的Node上。</p><p>每个Node被Master管理。一个Node能有多个POD,同时Master在集群之上自动调度POD。Master的自动调度考虑到每个Node上的可用资源。</p><p>每个Node至少运行：</p><p>1、Kubelet,一个负责Master和Node之间通讯的进程；它管理着运行在机器上PODs和Containers</p><p>2、容器运行时(比如Docker),负责从registry拉取容器镜像，取出容器，运行应用。</p><h3 id="K8S的service-mesh-istio-："><a href="#K8S的service-mesh-istio-：" class="headerlink" title="K8S的service mesh(istio)："></a>K8S的service mesh(istio)：</h3><p>​    POD里面运行了一个container，称为istio-proxy。该进程是c++写的一个代理进程，任何从其他container发出的流量都会被POD里面的iptables拦截给istio-proxy进程。</p><p>​    istio-proxy解析HTTP请求，获取Header中的Host字段值。istio-proxy知道该Host的HTTP请求应该转发给哪些目标POD，依此进行转发。</p><p>k8s原生service方案：</p><p>​    源POD –&gt; service(Virtual IP) –&gt; 目标POD</p><p>k8s+service mesh方案：</p><p>​    源POD –&gt; iptables REDIRECT(目标改写，流量拦截) –&gt; istio-proxy –&gt; 目标POD</p><p><strong>特性</strong></p><p>istio 适用于容器或虚拟机环境（特别是 k8s），兼容异构架构。istio 使用 sidecar（边车模式）代理服务的网络，不需要对业务代本身做任何的改动。</p><p>HTTP、gRPC、WebSocket 和 TCP 流量的自动负载均衡。</p><p>istio 通过丰富的路由规则、重试、故障转移和故障注入，可以对流量行为进行细粒度控制；支持访问控制、速率限制和配额。</p><p>istio 对出入集群入口和出口中所有流量的自动度量指标、日志记录和跟踪。</p><h3 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h3><p><code>额外安装方法可参考</code><a href="https://blog.csdn.net/CANGYE0504/article/details/106159649/">csdn</a></p><h4 id="安装-minikube"><a href="#安装-minikube" class="headerlink" title="安装 minikube"></a>安装 <a href="https://minikube.sigs.k8s.io/docs/start/">minikube</a></h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828111221184.png" alt="image-20210828111221184"></p><h4 id="启动minikube-minikube-start"><a href="#启动minikube-minikube-start" class="headerlink" title="启动minikube: minikube start"></a>启动minikube: minikube start</h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828144140108.png" alt="image-20210828144140108"></p><p>提示需要指定驱动: minikube start –driver=docker</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828144241625.png" alt="image-20210828144241625"></p><p>提示需要创建docker组，并将当前用户加入docker组</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828145050863.png" alt="image-20210828145050863"></p><p>再次启动minikube：minikube start –driver=docker</p><p><code>minikube start --registry-mirror=https://bmtb46e4.mirror.aliyuncs.com --vm-driver=docker --base-image=&quot;kicbase/stable&quot; --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</code></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828145624524.png" alt="image-20210828145624524"></p><h4 id="关闭minikube：minikube-stop"><a href="#关闭minikube：minikube-stop" class="headerlink" title="关闭minikube：minikube stop"></a>关闭minikube：minikube stop</h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828165322506.png" alt="image-20210828165322506"></p><h4 id="查看当前集群中的所有POD"><a href="#查看当前集群中的所有POD" class="headerlink" title="查看当前集群中的所有POD"></a>查看当前集群中的所有POD</h4><p>kubectl get pods -A (-A所有命名空间，可以-n指定某一个命名空间如-n kube-system)</p><p>由于使用kubectl要额外下载，这里就直接使用minikube了[额外加–]。kubectl实际上就是在和K8S集群中的Master通信，而Master掌管其他Node。</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828145830509.png" alt="image-20210828145830509"></p><p><code>kubectl describe pod [pod_name] -n [namespace] -o wide</code>查看详细信息</p><h4 id="查看K8S集群状态"><a href="#查看K8S集群状态" class="headerlink" title="查看K8S集群状态"></a>查看K8S集群状态</h4><p>kubectl cluster-info</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828150822530.png" alt="image-20210828150822530"></p><h4 id="查看K8S集群中的宿主机-o-wide更多详细信息"><a href="#查看K8S集群中的宿主机-o-wide更多详细信息" class="headerlink" title="查看K8S集群中的宿主机(-o wide更多详细信息)"></a>查看K8S集群中的宿主机(-o wide更多详细信息)</h4><p>kubectl get nodes</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828151206418.png" alt="image-20210828151206418"></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828151308174.png" alt="image-20210828151308174"></p><h4 id="在K8S集群中创建一个部署deployment"><a href="#在K8S集群中创建一个部署deployment" class="headerlink" title="在K8S集群中创建一个部署deployment"></a>在K8S集群中创建一个部署deployment</h4><p>1、寻找集群中一个合适的Node[资源足够]。</p><p>2、调度该应用(镜像)到这个Node上。</p><p>3、迁移这个实例到另一个Node上[如果有该配置，默认不迁移]。</p><p>kubectl create deployment my_nginx_deploy_name –image nginx:latest</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828152146620.png" alt="image-20210828152146620"></p><h4 id="获取K8S集群中的所有deployment"><a href="#获取K8S集群中的所有deployment" class="headerlink" title="获取K8S集群中的所有deployment"></a>获取K8S集群中的所有deployment</h4><p>kubectl get deployments</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828152323403.png" alt="image-20210828152323403"></p><p>可以看到没有正确运行！但前面又说created这是为什么呢？因为k8S是声明式设计，所以提交任务后，K8S的Created意味着K8S知道要做这个任务，但不意味着任务已经完成了。前面提到容器是运行在POD上的，所以我们看看POD有什么信息。</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828152948764.png" alt="image-20210828152948764"></p><p>原来是镜像拉取失败了。</p><p><code>后面网络较好拉取成功的示例</code></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210922140123097.png" alt="image-20210922140123097"></p><h4 id="使用配置文件来创建deployment"><a href="#使用配置文件来创建deployment" class="headerlink" title="使用配置文件来创建deployment"></a>使用配置文件来创建deployment</h4><p>编辑deployment配置文件</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828160438608.png" alt="image-20210828160438608"></p><p>或者保存deployment为yaml文件到本地，然后apply修改后的yaml文件。</p><p><code>kubectl get deployment nginx1 -o yaml &gt; nginx.config.yaml</code></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828161235330.png" alt="image-20210828161235330"></p><h4 id="删除deployment"><a href="#删除deployment" class="headerlink" title="删除deployment"></a>删除deployment</h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20210828155942783.png" alt="image-20210828155942783"></p><p>1、deployment(配置文件中replicas=N)就创建N个POD</p><p>2、K8S中每个Node运行一个kubelet-&gt;控制dockerd-&gt;控制docker</p><p>3、kubectl与Master通信，Master控制Node(kubelet)。</p><p>4、每个POD都有一个被称为pause的container，这是POD的第一个容器。</p><p>5、提交deployment(如减少POD数量)实际提交到了ETCD，然后Master感知到变化，就去ETCD里面修改对应POD的状态为terminating。对应Node上的kubelet感知到POD变化，通过dockerd杀死该POD。</p><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109205600518.png" alt="image-20211109205600518"></p><h4 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装<a href="https://istio.io/">istio</a></h4><p><strong>由于istio下载失败，istio部分后面再来继续学习。</strong></p><p>在安装 istio 之前，需要一个运行着 <a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Kubernetes">Kubernetes</a> 的兼容版本的 cluster。【k8s集群部署之后】</p><p>官方下载命令<code>curl -L https://istio.io/downloadIstio | sh - </code></p><hr><p>参考<a href="https://blog.csdn.net/shykevin/article/details/112256807">这里</a>和<a href="https://developer.51cto.com/art/202109/681969.htm">这里</a></p><p>直接从github上下载istio，解压缩后设置好环境变量。x.x.x代表要下载的版本号。</p><p>1、<code>wget https://github.com/istio/istio/releases/download/x.x.x/istio-x.x.x-linux-amd64.tar.gz</code><br>2、<code>tar zxvf istio-x.x.x-linux-amd64.tar.gz -C /usr/local/</code><br>3、<code>export PATH=$PATH:/usr/local/istio-x.x.x/bin</code></p><p>安装istio</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211101165546389.png" alt="image-20211101165546389"></p><p>查看istio相应的namespace、pods和service是否已经创建成功</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211101165736823.png" alt="image-20211101165736823"></p><p>可以看到istio-system命名空间下的LoadBalancer的外部IP一直处于pending状态。</p><h4 id="istio注入"><a href="#istio注入" class="headerlink" title="istio注入"></a>istio注入</h4><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109211951027.png" alt="image-20211109211951027"></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109213736494.png" alt="image-20211109213736494"></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109211533025.png" alt="image-20211109211533025"></p><p>查看注入后的yaml文件，比原先的yaml文件多了很多其他的内容【多了istio-proxy的pod】</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109211647628.png" alt="image-20211109211647628"></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109211847226.png" alt="image-20211109211847226"></p><p>查看pod中两个container的ip【-c指定】，发现是一样的</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109213233089.png" alt="image-20211109213233089"></p><p>比之前多了很多服务端口，但多出来的都是istio-proxy开放的端口。</p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109213547051.png" alt="image-20211109213547051"></p><p><img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211109213935811.png" alt="image-20211109213935811"></p><p>想象一下，如果每次部署都要手动输入istio注入命令，这显然是不必要的。因此，我们可以添加一个命名空间标签，让istio在该命名空间部署应用程序时自动注入【添加标签之后】 Envoy 的 SideCar 代理。</p><p><code>kubectl label ns gys-ns istio-injection=enabled</code></p><p> <img src="/2021/08/23/istio%E5%92%8Ck8s/image-20211110123712023.png" alt="image-20211110123712023"></p>]]></content>
    
    
    <categories>
      
      <category>istio</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>istio</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker简单使用</title>
    <link href="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>docker是运行在linux环境下的一个应用容器引擎，对于运行在容器中的应用来说，容器就是他们在运行时的虚拟机。</p><p>image是容器镜像，简单来说就是对应虚拟机的snapshot快照功能。docker能够让开发者们打包应用到这个可移植的image中，然后通过该image即可恢复容器。image是分层的，这里暂不多说，主要是为了复用性，比如说image操作系统层是一致的，那么下载两个不同版本的nginx镜像时，最下层操作系统层是共享的，不用下载两遍。</p><p>容器本身就是一个小型虚拟机，容器之间完全使用沙箱机制，相互之间没有任何接口。一般来说，一个容器中只运行一个应用，如nginx。</p><p>比起虚拟机来，docker容器本身没有内核，而是共享宿主机的内核资源，故而轻量许多。</p><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>参考<a href="https://docs.docker.com/engine/install/ubuntu/">docker官网安装步骤</a>即可。下载社区ce版(community edition), 包含下载<code>docker-ce, docker-cli-ce,container-io</code></p><h5 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h5><p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p><h5 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h5><p>安装 apt 依赖包，用于通过HTTPS来获取仓库</p><p><code>sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></p><p>添加 Docker 的官方 GPG 密钥</p><p><code>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</code></p><p>添加docker源</p><p><code>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</code></p><p>安装</p><p><code>sudo apt update</code></p><p><code>sudo apt install docker-ce docker-ce-cli containerd.io</code></p><h3 id="docker守护进程dockerd"><a href="#docker守护进程dockerd" class="headerlink" title="docker守护进程dockerd"></a>docker守护进程dockerd</h3><p>terminal实际上是在和dockerd通信，dockerd负责管理所有的有关docker事务。</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828095411713.png" alt="image-20210828095411713"></p><h3 id="下载容器-镜像"><a href="#下载容器-镜像" class="headerlink" title="下载容器(镜像)"></a>下载容器(镜像)</h3><p>docker pull  [option] image:version</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828093304619.png" alt="image-20210828093304619"></p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828093343291.png" alt="image-20210828093343291"></p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>docker images [option]</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828094615156.png" alt="image-20210828094615156"></p><h3 id="创建容器并且运行对应镜像"><a href="#创建容器并且运行对应镜像" class="headerlink" title="创建容器并且运行对应镜像"></a>创建容器并且运行对应镜像</h3><p>docker run [option] image_name [cmd] [args]</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828095938715.png" alt="image-20210828095938715"></p><p><code>-d指定容器运行方式为后台运行，并且返回容器id </code></p><h3 id="显示正在运行的docker容器"><a href="#显示正在运行的docker容器" class="headerlink" title="显示正在运行的docker容器"></a>显示正在运行的docker容器</h3><p>docker ps [option]</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828100122532.png" alt="image-20210828100122532"></p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828100235182.png" alt="image-20210828100235182"></p><p>可以看到，terminal也能查到nginx运行的进程。因为docker本身就是一个虚拟化技术，docker本身没有内核，而是共享宿主机的内核资源。因此对于宿主机来说，运行在docker容器中的nginx就是一个非常普通的进程而已，只是所占的资源[cpu,内存，…]被隔离了，但还是依赖宿主机来对该进程进行调度[进程管理]。</p><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>容器中的nginx是运行在虚拟化的环境中，nginx的80端口与宿主机的80端口不是一样的。</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828100943745.png" alt="image-20210828100943745"></p><p>再看一下ifconfig。</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828101304125.png" alt="image-20210828101304125"></p><p><strong>docker0相当于是所有容器的网桥，docker已经帮助我们做了转发[route、iptables]，也就是说宿主机可以ping到docker中的容器。每在docker中创建一个网段时，都会创建一个新的虚拟网桥(网桥一般命名以br开头，docker0是安装docker后自动创建的第一个网桥)。一个veth pair就相当于网桥的一个lan口， 每运行一个container就生成一个veth pair。</strong></p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20211029131503419.png" alt="image-20211029131503419"></p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828102226827.png" alt="image-20210828102226827"></p><h3 id="查看容器具体信息"><a href="#查看容器具体信息" class="headerlink" title="查看容器具体信息"></a>查看容器具体信息</h3><p>docker inspect container_id</p><p>输出json格式文件，截取Networks部分查看信息</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828101826175.png" alt="image-20210828101826175"></p><h3 id="宿主机连接容器中nginx"><a href="#宿主机连接容器中nginx" class="headerlink" title="宿主机连接容器中nginx"></a>宿主机连接容器中nginx</h3><p>有了上述信息，我们可以连接到运行在容器中的nginx。</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828102431453.png" alt="image-20210828102431453"></p><h3 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h3><p>docker kill container_id 与 docker stop container_id</p><p>kill是不管容器同不同意,直接执行kill -9,强行终止;</p><p>stop的话,首先给容器发送一个TERM信号,让容器做一些退出前必须的保护性、安全性操作,然后让容器自动停止运行,如果在一段时间内,容器还是没有停止,再进行kill -9,强行终止。</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828102843064.png" alt="image-20210828102843064"></p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>docker rm container_id</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828103046778.png" alt="image-20210828103046778"></p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>docker rmi image_name</p><h3 id="在容器中执行命令"><a href="#在容器中执行命令" class="headerlink" title="在容器中执行命令"></a>在容器中执行命令</h3><p>docker exec [option] container_id cmd [arg]</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828105115438.png" alt="image-20210828105115438"></p><p>使用 -it表示进入交互模式[interact terminal]</p><p><img src="/2021/08/19/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210828105456444.png" alt="image-20210828105456444"></p><p>bash指定在容器内执行bash指令</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-micro框架v3</title>
    <link href="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/"/>
    <url>/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/</url>
    
    <content type="html"><![CDATA[<h2 id="go-micro-v3测试demo"><a href="#go-micro-v3测试demo" class="headerlink" title="go-micro v3测试demo"></a>go-micro v3测试demo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装go-micro框架</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831171403221.png" alt="image-20210831171403221"></p><p>需要用到Micro 3.0 环境的micro 工具(二进制可执行文件)，可以快速构建项目。但是在代码中不使用该库。</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831171323954.png" alt="image-20210831171323954"></p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831172823581.png" alt="image-20210831172823581"></p><h3 id="首先看一下帮助"><a href="#首先看一下帮助" class="headerlink" title="首先看一下帮助"></a>首先看一下帮助</h3><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831202727527.png" alt="image-20210831202727527"></p><h3 id="创建一个新服务"><a href="#创建一个新服务" class="headerlink" title="创建一个新服务"></a>创建一个新服务</h3><p>micro new serviceName</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831202912491.png" alt="image-20210831202912491"></p><p>默认在__当前路径__下生成对应服务的文件</p><p>看一下proto文件</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210830092026962.png" alt="image-20210830092026962"></p><p>使用<code>make proto</code>编译<code>proto</code>文件</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831203131351.png" alt="image-20210831203131351"></p><p>就这样非常简单的生成了一个服务microHello。</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831203338161.png" alt="image-20210831203338161"></p><p>需要注意的是：这里使用<code>go-micro</code>框架，于是注释掉了自动生成的<code>micro</code>代码, 并且使用<code>go-micro 插件consul</code></p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831203617257.png" alt="image-20210831203617257"></p><p>同样地，将proto文件复制到客户端，编写客户端代码。</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831203754506.png" alt="image-20210831203754506"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h5 id="启动consul服务器"><a href="#启动consul服务器" class="headerlink" title="启动consul服务器"></a>启动consul服务器</h5><p>简单测试，直接使用命令<code>consul agent -dev</code>来启动一个<code>consul服务</code>。</p><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831203932090.png" alt="image-20210831203932090"></p><h5 id="rpc-server注册服务-microHello"><a href="#rpc-server注册服务-microHello" class="headerlink" title="rpc_server注册服务(microHello)"></a>rpc_server注册服务(microHello)</h5><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831204146991.png" alt="image-20210831204146991"></p><h5 id="rpc-client调用服务"><a href="#rpc-client调用服务" class="headerlink" title="rpc_client调用服务"></a>rpc_client调用服务</h5><p><img src="/2021/08/19/go-micro%E6%A1%86%E6%9E%B6V3.0.0/image-20210831204223963.png" alt="image-20210831204223963"></p><p>这里是<a href="https://learnku.com/docs/go-micro/3.x/helloworld/9470">go-micro v3中文文档</a>，可以借鉴参考。</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>Go-Micro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Go-Micro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>boost的协程库使用示例</title>
    <link href="/2021/08/18/boost%E7%9A%84%E5%8D%8F%E7%A8%8B%E5%BA%93%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <url>/2021/08/18/boost%E7%9A%84%E5%8D%8F%E7%A8%8B%E5%BA%93%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="使用boost库中的协程库"><a href="#使用boost库中的协程库" class="headerlink" title="使用boost库中的协程库"></a>使用boost库中的协程库</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-08-18 15:11:14</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-08-18 15:11:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;boost/coroutine2/all.hpp&gt;</span>  <span class="hljs-comment">// stackless</span></span><br><br><span class="hljs-comment">// pull的意思是从主运行环境可以“拉”数据到协程环境</span><br><span class="hljs-comment">// push的意思是从协程环境将数据“推”到主运行环境中，</span><br><span class="hljs-keyword">using</span> pull = boost::coroutines2::coroutine&lt;<span class="hljs-keyword">int</span>&gt;::pull_type;<br><span class="hljs-keyword">using</span> push = boost::coroutines2::coroutine&lt;<span class="hljs-keyword">int</span>&gt;::push_type;<br><span class="hljs-comment">// coroutine&lt;&gt;::pull_type在构造函数时，立即进入函数[纪录栈帧并且立即执行]</span><br><span class="hljs-comment">// coroutine&lt;&gt;::push_type在构造函数时，不会立即进入函数[只记录栈帧]</span><br><br><span class="hljs-comment">// Source和Sink：可以把source理解为发送端的流，sink理解为接受端的流</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">producter</span><span class="hljs-params">(push&amp; sink)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i += <span class="hljs-number">2</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;producter: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br><br>        <span class="hljs-built_in">sink</span>(i);<br>        <span class="hljs-comment">// 源码</span><br>        <span class="hljs-comment">// cb_-&gt;resume(i);</span><br>        <span class="hljs-comment">// return * this;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">(pull&amp; source)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">20</span>; i += <span class="hljs-number">2</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;get: &quot;</span> &lt;&lt; source.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;consumer: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br><br>        <span class="hljs-built_in">source</span>();<br>        <span class="hljs-comment">// 源码</span><br>        <span class="hljs-comment">// cb_-&gt;resume();</span><br>        <span class="hljs-comment">// return *this;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sync_like</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">pull <span class="hljs-title">source</span><span class="hljs-params">(producter)</span></span>;<br>    <span class="hljs-built_in">consumer</span>(source);<br><br>    <span class="hljs-comment">// cout</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        producter: 0</span><br><span class="hljs-comment">        get: 0</span><br><span class="hljs-comment">        consumer: 1</span><br><span class="hljs-comment">        producter: 2</span><br><span class="hljs-comment">        get: 2</span><br><span class="hljs-comment">        consumer: 3</span><br><span class="hljs-comment">        producter: 4</span><br><span class="hljs-comment">        get: 4</span><br><span class="hljs-comment">        consumer: 5</span><br><span class="hljs-comment">        producter: 6</span><br><span class="hljs-comment">        get: 6</span><br><span class="hljs-comment">        consumer: 7</span><br><span class="hljs-comment">        producter: 8</span><br><span class="hljs-comment">        get: 8</span><br><span class="hljs-comment">        consumer: 9</span><br><span class="hljs-comment">        producter: 10</span><br><span class="hljs-comment">        get: 10</span><br><span class="hljs-comment">        consumer: 11</span><br><span class="hljs-comment">        producter: 12</span><br><span class="hljs-comment">        get: 12</span><br><span class="hljs-comment">        consumer: 13</span><br><span class="hljs-comment">        producter: 14</span><br><span class="hljs-comment">        get: 14</span><br><span class="hljs-comment">        consumer: 15</span><br><span class="hljs-comment">        producter: 16</span><br><span class="hljs-comment">        get: 16</span><br><span class="hljs-comment">        consumer: 17</span><br><span class="hljs-comment">        producter: 18</span><br><span class="hljs-comment">        get: 18</span><br><span class="hljs-comment">        consumer: 19</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        从producter切换出来后，调用consumer函数。</span><br><span class="hljs-comment">        consumer切换出来后，恢复上下文继续执行producter。</span><br><span class="hljs-comment">        producter切换出来后，恢复上下文继续执行consumer。</span><br><span class="hljs-comment">        ....</span><br><span class="hljs-comment">        consumer切换出来后，恢复上下文继续执行producter。</span><br><span class="hljs-comment">        product执行完毕。</span><br><span class="hljs-comment">        恢复上下文。</span><br><span class="hljs-comment">        继续执行consumer。</span><br><span class="hljs-comment">        consumer执行完毕。</span><br><span class="hljs-comment">        恢复上下文。</span><br><span class="hljs-comment">        继续执行sync_like。</span><br><span class="hljs-comment">        sync_like执行完毕。</span><br><span class="hljs-comment">    */</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">push <span class="hljs-title">sink</span><span class="hljs-params">(consumer)</span></span>;<br>    <span class="hljs-built_in">producter</span>(sink);<br><br>    <span class="hljs-comment">// 输出同sync_like()</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">pull <span class="hljs-title">source</span><span class="hljs-params">(producter)</span></span>;<br>    <br>    <span class="hljs-comment">// cout</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        producter: 0</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        从producter切换出来后，test2执行完毕</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">push <span class="hljs-title">sink</span><span class="hljs-params">(consumer)</span></span>;<br><br>    <span class="hljs-comment">// 无输出</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        不立即进入consumer函数，test3执行完毕</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-built_in">sync_like</span>();<br><br>    <span class="hljs-built_in">test1</span>();<br><br>    <span class="hljs-built_in">test2</span>();<br>    <br>    <span class="hljs-built_in">test3</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>协程</title>
    <link href="/2021/08/18/%E5%8D%8F%E7%A8%8B/"/>
    <url>/2021/08/18/%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="协程-coroutines-转载"><a href="#协程-coroutines-转载" class="headerlink" title="协程(coroutines)(转载)"></a>协程(coroutines)(转载)</h3><p>协程就是用户态线程内可以被异步执行的函数。用来在用户态下解决异步问题。</p><p>普通函数：每次调用只能从第一条语句开始执行直到某个出口结束。<br>协程函数：协程函数交出控制权后，可以再次从交出控制权的下一语句开始执行。</p><p>在协程的叫法出现以前，处理异步问题一般会使用操作系统提供的系统级API来解决异步问题。系统级的API都是大多采用回调函数方式实现。后来人们觉得使用异步回调形式的API比较麻烦，就开始提供异步调用库或者语言级支持。并且起了个优雅的名字–协同程序。</p><p>协程不是线程。协程包含在线程内。协程在用户态，由用户控制。协程的切换比线程切换效率高。<br>同一个线程在一个时间点最多只能跑一个协程；在同一个线程中，协程的运行是穿行的[穿插运行(同一个函数内非顺序运行)，一般认为不同与串行(顺序运行)]。所以没有数据争用(data race)，也不需要锁。<br>原则上，应该尽量避免将同一个协程的主体，放到不同的线程中同时执行。因为这样有很大概率发生数据争用(data race)。[其实这种情况下就是线程的数据争用问题]。所以我们应该在线程中讨论协程；而不是在进程中讨论协程。</p><p>目前在C/C++中比较知名的协程(类协程)库有:<br>Boost.Fiber<br>Boost.Coroutine<br>fiber<br>libco<br>libtask<br>…<br>协程根据实现方式不同，分为有栈协程(stackful coroutine)和无栈协程(stackless coroutine)。<br>有栈协程可通过操作系统提供的系统调用实现;无栈协程需要语言标准和编译器支持。</p><p>微软拟提的C++20标准中(目前是ts,即:&lt;experimental/coroutine&gt;)的协程属于stackless coroutine。</p><hr><h3 id="协程函数特点："><a href="#协程函数特点：" class="headerlink" title="协程函数特点："></a>协程函数特点：</h3><p>1：首次调用协程函数，会从堆中分配一个协程上下文，调用方的返回地址、入口函数、交出控制权等信息保存在协程上下文中。</p><p>2：当协程中途交出控制权后，协程上下文不会被删除(相当于函数退出之后，上下文环境还被保存，类比线程切换)。</p><p>3：当协程再次获得控制权后，会自动从协程上下文中恢复调用环境，然后从上一次交出控制权的下一条语句继续执行(加载目标协程环境，类比线程切换)。</p><p>4：协程函数返回(非中途交出控制权)后，协程上下文将被删除。</p><p>5：若再次调用协程函数，视为首次调用。</p><h4 id="有栈协程-Stackful-Coroutines-特点："><a href="#有栈协程-Stackful-Coroutines-特点：" class="headerlink" title="有栈协程(Stackful Coroutines)特点："></a>有栈协程(Stackful Coroutines)特点：</h4><p>1：每个协程都有一个预先分配的调用栈(Call Stack)。</p><p>2：每个协程都属于且仅属于创建它的线程。</p><p>3：一个线程可以包含多个协程。</p><p>4：线程本身也可以是一个协程，成为主协程(Primary Coroutine)。</p><p>5：协程必须主动交出控制权，否则同一线程的其它协程均无法获得执行机会。</p><p>6：协程执行路径上，任何被调用的函数均可在任何位置交出控制权。</p><p>7：如果允许协程把控制权交给同一线程的其它协程，则称为对称协程(Symmetry Coroutines)。如果只允许协程把控制权交给主协程，主协程作为调度器，负责分配执行权，则称为非对称协程(Asymmetry Coroutines)。</p><p>8：属于同一线程的多个协程之间没有数据争用(Data Race)问题。</p><p>9：无需修改语言标准和编译器，利用系统调用即可实现。</p><h4 id="无栈协程-Stackless-Coroutines-特点："><a href="#无栈协程-Stackless-Coroutines-特点：" class="headerlink" title="无栈协程(Stackless Coroutines)特点："></a>无栈协程(Stackless Coroutines)特点：</h4><p>1：每个协程的执行环境，仅需包含调用栈(Call Stack)的顶层栈帧(Top Call Stack Frame)，而非整个调用栈，因而空间开销极小。</p><p>2：协程执行路径上，只有特定语句才能交出控制权。</p><p>3：无需协程调度器。</p><p>4：调用协程函数时，同一协程函数的不同部分，有可能在不同的线程环境中执行。因此需要处理好数据争用(Data Race)问题。这个问题实际是线程间数据争用问题。</p><p>5：需要语言标准和编译器支持。</p><hr><p>有栈协程和无栈协程对比，有栈协程的最大缺陷是保存调用栈的开销大，尤其协程较多且切换频繁时；<br>无栈协程不但具有有栈协程的所有优点，而且空间开销极低；唯一不足就是需要语言标准和编译器支持。</p><hr><h3 id="怎么识别C-20中的协程"><a href="#怎么识别C-20中的协程" class="headerlink" title="怎么识别C++20中的协程"></a>怎么识别C++20中的协程</h3><p>如果在C++20的一个函数体内包含co_await、co_yield、co_return中任何一个关键字，那么这个函数就是一个coroutine。其中：</p><p>co_await：挂起当前的coroutine。<br>co_return：从当前coroutine返回一个结果。<br>co_yield：返回一个结果并且挂起当前的coroutine。</p><p>一个coroutine必定包含Promise和Awaitable两个部分。</p><p>协程通过Promise和Awaitable接口来规范实现。实现最简单的协程需要用到其中的8个(5个Promise的函数和3个Awaitable的函数)。</p><p>如果要实现形如co_await xxxxx;的协程调用格式, xxxxx就必须实现Awaitable。co_await是一个新的运算符。Awaitable主要有3个函数：</p><p>await_ready：返回Awaitable实例是否已经ready。协程开始会调用此函数，如果返回true，表示你想得到的结果已经得到了，协程不需要执行了。所以大部分情况这个函数的实现是要return false。</p><p>await_suspend：挂起awaitable。该函数会传入一个coroutine_handle类型的参数。这是一个由编译器生成的变量。在此函数中调用handle.resume()，就可以恢复协程。</p><p>await_resume：当协程重新运行时，会调用该函数。这个函数的返回值就是co_await运算符的返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-08-19 13:25:46</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-08-19 13:25:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;coroutine.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">co_func1</span><span class="hljs-params">(CScheduler* _pScheduler, <span class="hljs-keyword">void</span>* _pArgs)</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> val = *<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(_pArgs);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;co_id=[&quot;</span> &lt;&lt; _pScheduler-&gt;m_running_id <br>                  &lt;&lt; <span class="hljs-string">&quot;], i=[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;], val=[&quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot;]\n&quot;</span>;<br>        <span class="hljs-built_in">coroutine_yield</span>(_pScheduler);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">co_func2</span><span class="hljs-params">(CScheduler* _pScheduler, <span class="hljs-keyword">void</span>* _pArgs)</span></span>&#123;<br>    std::string val = *<span class="hljs-keyword">reinterpret_cast</span>&lt;std::string*&gt;(_pArgs);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;co_id=[&quot;</span> &lt;&lt; _pScheduler-&gt;m_running_id <br>                  &lt;&lt; <span class="hljs-string">&quot;], i=[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;], val=[&quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot;]\n&quot;</span>;<br>        <span class="hljs-built_in">coroutine_yield</span>(_pScheduler);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">// 创建调度器</span><br>    CScheduler* pScheduler = <span class="hljs-built_in">scheduler_create</span>();<br>    <br>    <span class="hljs-keyword">int</span> val1 = <span class="hljs-number">111</span>, val2 = <span class="hljs-number">222</span>;<br>    std::string val3 = <span class="hljs-string">&quot;STRING&quot;</span>;<br><br>    <span class="hljs-comment">// 创建协程</span><br>    <span class="hljs-keyword">int32_t</span> co_1 = <span class="hljs-built_in">coroutine_create</span>(pScheduler, co_func1, &amp;val1);<br>    <span class="hljs-keyword">int32_t</span> co_2 = <span class="hljs-built_in">coroutine_create</span>(pScheduler, co_func1, &amp;val2);<br>    <span class="hljs-keyword">int32_t</span> co_3 = <span class="hljs-built_in">coroutine_create</span>(pScheduler, co_func2, &amp;val3);<br><br>    <span class="hljs-comment">// 调度协程</span><br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(flag)<br>    &#123;<br>        flag = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// 主线程(内核态的一个线程) ==&gt; 三个协程(用户态的三个线程)轮流执行</span><br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">coroutine_code</span>(pScheduler, co_1) != COROUTINE_DEAD)&#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">coroutine_resume</span>(pScheduler, co_1);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">coroutine_code</span>(pScheduler, co_2) != COROUTINE_DEAD)&#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">coroutine_resume</span>(pScheduler, co_2);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">coroutine_code</span>(pScheduler, co_3) != COROUTINE_DEAD)&#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">coroutine_resume</span>(pScheduler, co_3);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭调度器</span><br>    <span class="hljs-built_in">scheduler_close</span>(pScheduler);<br><br>    <span class="hljs-keyword">int</span> v1 = <span class="hljs-number">0b111</span>;<br>    <span class="hljs-keyword">int</span> v2 = <span class="hljs-number">0111</span>;<br>    <span class="hljs-keyword">int</span> v3 = <span class="hljs-number">0x111</span>;<br>    <span class="hljs-keyword">int</span> v4 = <span class="hljs-number">111</span>;<br><br>    <span class="hljs-comment">// #表示输出进制</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %#d\n&quot;</span>, v1, v1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%o %#o\n&quot;</span>, v2, v2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%b\n&quot;</span>, v1);<br>    <span class="hljs-comment">// #大写只能作用于X，使16进制的字母全部大写。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x %#X\n&quot;</span>, v3, v3);<br><br>    <span class="hljs-keyword">char</span> x[] = <span class="hljs-string">&quot;和&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(&#x27;和&#x27;)=%ld %c\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-string">&#x27;和&#x27;</span>), x[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(x)=%ld\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(x));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/08/18/%E5%8D%8F%E7%A8%8B/image-20211123194959348.png" alt="image-20211123194959348"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-08-18 20:30:31</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-08-18 20:30:31</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> COROUTINE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COROUTINE_H</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ucontext.h&gt;</span>   <span class="hljs-comment">// 保存上下文</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><br><span class="hljs-comment">// 协程栈大小</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACK_SIZE (1024*1024)</span><br><br><span class="hljs-comment">// 协程池中最大协程数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COROUTINE_INIT_MAX_NUM (16)</span><br><br><span class="hljs-comment">// 协程状态码</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">COROUTINE_CODE</span>&#123;</span><br>    COROUTINE_READY,<br>    COROUTINE_RUNNING,<br>    COROUTINE_SUSPEND,<br>    COROUTINE_DEAD<br>&#125;;<br><br><span class="hljs-comment">// 协程池调度器前置声明</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CScheduler</span>;</span><br><br><span class="hljs-comment">// 协程函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*pFunc)</span> <span class="hljs-params">(CScheduler*, <span class="hljs-keyword">void</span>*)</span></span>;<br><br><span class="hljs-comment">// 协程的有关数据结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CCoRoutine</span>&#123;</span><br><br>    <span class="hljs-comment">// 当前协程上下文</span><br>    <span class="hljs-keyword">ucontext_t</span> m_ctx;<br><br>    <span class="hljs-comment">// 当前协程函数指针</span><br>    pFunc m_pFunc;<br><br>    <span class="hljs-comment">// 当前协程函数参数</span><br>    <span class="hljs-keyword">void</span>* m_pArgs;<br><br>    <span class="hljs-comment">// 当前协程所属协程池的调度器</span><br>    CScheduler* m_pScheduler;<br><br>    <span class="hljs-comment">// 当前协程的状态码</span><br>    COROUTINE_CODE m_code;<br><br>    <span class="hljs-comment">// 当前协程的执行栈</span><br>    <span class="hljs-keyword">char</span>* m_pStack;<br><br>    <span class="hljs-comment">// 当前协程已经分配的内存大小</span><br>    <span class="hljs-keyword">int32_t</span> m_alloc;<br><br>    <span class="hljs-comment">// 当前协程的执行栈大小</span><br>    <span class="hljs-keyword">int32_t</span> m_stack_size;<br><br>&#125;CCoRoutine;<br><br><span class="hljs-comment">// 协程池调度器</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CScheduler</span>&#123;</span><br><br>    <span class="hljs-comment">// 协程共享栈</span><br>    <span class="hljs-keyword">char</span> m_shared_stack[STACK_SIZE];<br><br>    <span class="hljs-comment">// 主协程上下文</span><br>    <span class="hljs-keyword">ucontext_t</span> m_ctx;<br><br>    <span class="hljs-comment">// 有效的协程个数</span><br>    <span class="hljs-keyword">int32_t</span> m_valid_num;<br><br>    <span class="hljs-comment">// 可管理的最大协程数量</span><br>    <span class="hljs-keyword">int32_t</span> m_max_num;<br><br>    <span class="hljs-comment">// 当前正在运行的协程id（协程池中的index）</span><br>    <span class="hljs-keyword">int32_t</span> m_running_id;<br><br>    <span class="hljs-comment">// 协程池</span><br>    CCoRoutine** m_ppCoRoutine;<br><br>&#125;CScheduler;<br><br><br><br><span class="hljs-comment">// 协程调度器创建</span><br><span class="hljs-function">CScheduler* <span class="hljs-title">scheduler_create</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 协程调度器关闭</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">scheduler_close</span><span class="hljs-params">(CScheduler*)</span></span>;<br><br><span class="hljs-comment">// 协程创建</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_create</span><span class="hljs-params">(CScheduler*, pFunc, <span class="hljs-keyword">void</span>*)</span></span>;<br><br><span class="hljs-comment">// 协程关闭</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">coroutine_close</span><span class="hljs-params">(CCoRoutine*)</span></span>;<br><br><span class="hljs-comment">// 协程恢复/调度/运行</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_resume</span><span class="hljs-params">(CScheduler*, <span class="hljs-keyword">int32_t</span>)</span></span>;<br><br><span class="hljs-comment">// 协程挂起</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">coroutine_yield</span><span class="hljs-params">(CScheduler*)</span></span>;<br><br><span class="hljs-comment">// 协程状态码</span><br><span class="hljs-function">COROUTINE_CODE <span class="hljs-title">coroutine_code</span><span class="hljs-params">(CScheduler*, <span class="hljs-keyword">int32_t</span>)</span></span>;<br><br><span class="hljs-comment">// 运行中的协程id</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_running_id</span><span class="hljs-params">(CScheduler*)</span></span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description: </span><br><span class="hljs-comment"> * *@*Version: </span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-08-18 21:01:42</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-08-18 21:01:42</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdint&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;coroutine.h&quot;</span></span><br><br><br><br><span class="hljs-comment">// 协程调度器创建</span><br><span class="hljs-function">CScheduler* <span class="hljs-title">scheduler_create</span><span class="hljs-params">()</span></span>&#123;<br>    CScheduler* pScheduler = <span class="hljs-keyword">new</span> CScheduler;<br><br>    pScheduler-&gt;m_valid_num = <span class="hljs-number">0</span>;<br>    pScheduler-&gt;m_max_num = COROUTINE_INIT_MAX_NUM;<br>    pScheduler-&gt;m_running_id = <span class="hljs-number">-1</span>;<br>    pScheduler-&gt;m_ppCoRoutine = <span class="hljs-keyword">new</span> CCoRoutine*[COROUTINE_INIT_MAX_NUM];<br><br>    <span class="hljs-built_in">memset</span>(pScheduler-&gt;m_ppCoRoutine, <span class="hljs-number">0</span>, COROUTINE_INIT_MAX_NUM*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CCoRoutine*));<br><br>    <span class="hljs-keyword">return</span> pScheduler;<br>&#125;<br><br><span class="hljs-comment">// 协程调度器关闭</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">scheduler_close</span><span class="hljs-params">(CScheduler* _pScheduler)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; _pScheduler-&gt;m_max_num; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(_pScheduler-&gt;m_ppCoRoutine[i])&#123;<br>            <span class="hljs-built_in">coroutine_close</span>(_pScheduler-&gt;m_ppCoRoutine[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[] _pScheduler-&gt;m_ppCoRoutine;<br>    _pScheduler-&gt;m_ppCoRoutine = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">delete</span> _pScheduler;<br>&#125;<br><br><span class="hljs-comment">// 协程创建</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_create</span><span class="hljs-params">(CScheduler* _pScheduler, pFunc _func, <span class="hljs-keyword">void</span>* _pArgs)</span></span>&#123;<br>    <br>    <span class="hljs-comment">// 协程相关数据结构的初始化</span><br>    CCoRoutine* pCoRoutine = <span class="hljs-keyword">new</span> CCoRoutine;<br>    pCoRoutine-&gt;m_pFunc = _func;<br>    pCoRoutine-&gt;m_pArgs = _pArgs;<br>    pCoRoutine-&gt;m_pScheduler = _pScheduler;<br><br>    pCoRoutine-&gt;m_alloc = <span class="hljs-number">0</span>;<br>    pCoRoutine-&gt;m_stack_size = <span class="hljs-number">0</span>;<br>    pCoRoutine-&gt;m_pStack = <span class="hljs-literal">nullptr</span>;<br>    pCoRoutine-&gt;m_code = COROUTINE_CODE::COROUTINE_READY;<br><br>    <span class="hljs-keyword">int32_t</span> pos_in_pool = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 协程池扩容</span><br>    <span class="hljs-keyword">if</span>(_pScheduler-&gt;m_valid_num &gt;= _pScheduler-&gt;m_max_num)&#123;<br><br>        <span class="hljs-keyword">int32_t</span> cur_max_num = _pScheduler-&gt;m_max_num;<br>        CCoRoutine** new_space = <span class="hljs-keyword">new</span> CCoRoutine*[cur_max_num*<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">memset</span>(new_space, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*cur_max_num*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CCoRoutine*));<br>        <span class="hljs-built_in">memcpy</span>(new_space, _pScheduler-&gt;m_ppCoRoutine, cur_max_num*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CCoRoutine*));<br><br>        <span class="hljs-keyword">delete</span>[] _pScheduler-&gt;m_ppCoRoutine;<br>        _pScheduler-&gt;m_ppCoRoutine = new_space;<br><br>        _pScheduler-&gt;m_max_num = <span class="hljs-number">2</span>*cur_max_num;<br>        pos_in_pool = cur_max_num;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>; d &lt; _pScheduler-&gt;m_max_num; ++d)&#123;<br>            pos_in_pool = (d + _pScheduler-&gt;m_valid_num) % _pScheduler-&gt;m_max_num;<br>            <span class="hljs-keyword">if</span>(_pScheduler-&gt;m_ppCoRoutine[pos_in_pool] == <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(pos_in_pool != <span class="hljs-number">-1</span>) &#123;<br>        _pScheduler-&gt;m_ppCoRoutine[pos_in_pool] = pCoRoutine;<br>        _pScheduler-&gt;m_valid_num ++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> pos_in_pool;<br><br>&#125;<br><br><span class="hljs-comment">// 协程关闭</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">coroutine_close</span><span class="hljs-params">(CCoRoutine* _pCoRoutine)</span></span>&#123;<br>    <span class="hljs-keyword">delete</span>[] _pCoRoutine-&gt;m_pStack;<br>    <span class="hljs-keyword">delete</span> _pCoRoutine;<br>&#125;<br><br><span class="hljs-comment">// 协程执行封装函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func_wrapper</span><span class="hljs-params">(CScheduler* _pScheduler)</span></span>&#123;<br><br>    <span class="hljs-comment">// 获得相应协程</span><br>    <span class="hljs-keyword">int</span> id = _pScheduler-&gt;m_running_id;<br>    CCoRoutine* pCoRoutine = _pScheduler-&gt;m_ppCoRoutine[id];<br><br>    <span class="hljs-comment">// 执行函数</span><br>    pCoRoutine-&gt;<span class="hljs-built_in">m_pFunc</span>(_pScheduler, pCoRoutine-&gt;m_pArgs);<br><br>    <span class="hljs-comment">// 关闭协程</span><br>    <span class="hljs-built_in">coroutine_close</span>(pCoRoutine);<br><br>    <span class="hljs-comment">// 更新信息</span><br>    _pScheduler-&gt;m_ppCoRoutine[id] = <span class="hljs-literal">nullptr</span>;<br>    _pScheduler-&gt;m_valid_num --;<br>    _pScheduler-&gt;m_running_id = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 协程恢复/调度/运行</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_resume</span><span class="hljs-params">(CScheduler* _pScheduler, <span class="hljs-keyword">int32_t</span> _id)</span></span>&#123;<br><br>    <span class="hljs-comment">// 当前无协程正在运行, 且当前协程id有效</span><br>    <span class="hljs-built_in">assert</span>(_pScheduler-&gt;m_running_id == <span class="hljs-number">-1</span> &amp;&amp; _id &gt;= <span class="hljs-number">0</span> &amp;&amp; _id &lt; _pScheduler-&gt;m_max_num);<br><br>    <span class="hljs-comment">// 获得当前协程</span><br>    CCoRoutine* pCoRoutine = _pScheduler-&gt;m_ppCoRoutine[_id];<br>    <br>    <span class="hljs-keyword">if</span>(pCoRoutine == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 当前协程状态码</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(pCoRoutine-&gt;m_code)&#123;<br>        <span class="hljs-comment">// 就绪</span><br>        <span class="hljs-keyword">case</span> COROUTINE_CODE::COROUTINE_READY:<br><br>            <span class="hljs-comment">// 获取当前上下文环境信息保存到该协程中</span><br>            ::<span class="hljs-built_in">getcontext</span>(&amp;pCoRoutine-&gt;m_ctx);<br><br>            <span class="hljs-comment">// 设置切换环境</span><br>            pCoRoutine-&gt;m_ctx.uc_link = &amp;(_pScheduler-&gt;m_ctx);<br><br>            <span class="hljs-comment">// 设置共享栈信息</span><br>            pCoRoutine-&gt;m_ctx.uc_stack.ss_flags = <span class="hljs-number">0</span>;<br>            pCoRoutine-&gt;m_ctx.uc_stack.ss_sp = _pScheduler-&gt;m_shared_stack;<br>            pCoRoutine-&gt;m_ctx.uc_stack.ss_size = STACK_SIZE;<br><br>            <span class="hljs-comment">// 更新信息</span><br>            _pScheduler-&gt;m_running_id = _id;<br>            pCoRoutine-&gt;m_code = COROUTINE_CODE::COROUTINE_RUNNING;<br><br>            <span class="hljs-comment">// 配置协程执行环境</span><br>            <span class="hljs-comment">// makecontext主要的工作就是设置u_context_t中保存的寄存器：函数指针(lr)、堆栈指针(sp)、函数参数(r0,r1, ...) </span><br>            <span class="hljs-comment">// 这也就是makecontext调用前，必须要先getcontext下的原因(保存原来的环境)。</span><br>            <span class="hljs-comment">// uintptr_t schedulerADDR = reinterpret_cast&lt;uintptr_t&gt;(_pScheduler);</span><br>            ::<span class="hljs-built_in">makecontext</span>(&amp;pCoRoutine-&gt;m_ctx, <br>                          <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*)()&gt; (func_wrapper), <br>                          <span class="hljs-number">1</span>, <br>                          _pScheduler);<br><br>            <span class="hljs-comment">// 保存当前上下文环境信息到_pScheduler-&gt;m_ctx,并切换环境为pCoRoutine-&gt;m_ctx，即将执行协程</span><br>            ::<span class="hljs-built_in">swapcontext</span>(&amp;_pScheduler-&gt;m_ctx, &amp;pCoRoutine-&gt;m_ctx);<br><br>            <span class="hljs-comment">// 协程执行完毕后，切换环境为_pScheduler-&gt;m_ctx，原执行现场恢复</span><br><br>        <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-comment">// 挂起</span><br>        <span class="hljs-keyword">case</span> COROUTINE_CODE::COROUTINE_SUSPEND:<br><br>            <span class="hljs-comment">// 将该协程的栈信息复制到共享栈中</span><br>            <span class="hljs-built_in">memcpy</span>(_pScheduler-&gt;m_shared_stack+STACK_SIZE-pCoRoutine-&gt;m_stack_size, pCoRoutine-&gt;m_pStack, pCoRoutine-&gt;m_stack_size);<br>            <br>            <span class="hljs-comment">// 更新信息</span><br>            _pScheduler-&gt;m_running_id = _id;<br>            pCoRoutine-&gt;m_code = COROUTINE_CODE::COROUTINE_RUNNING;<br><br>            <span class="hljs-comment">// 保存现场，并切换环境，继续执行协程</span><br>            ::<span class="hljs-built_in">swapcontext</span>(&amp;_pScheduler-&gt;m_ctx, &amp;pCoRoutine-&gt;m_ctx);<br><br>            <span class="hljs-comment">// 协程执行完毕后，切换环境为_pScheduler-&gt;m_ctx，原执行现场恢复</span><br>        <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-comment">// 错误！！！   </span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 协程挂起</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">coroutine_yield</span><span class="hljs-params">(CScheduler* _pScheduler)</span></span>&#123;<br>    <span class="hljs-keyword">int32_t</span> id = _pScheduler-&gt;m_running_id;<br><br>    <span class="hljs-comment">// 当前有协程正运行</span><br>    <span class="hljs-built_in">assert</span>(id &gt;= <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 获得运行协程</span><br>    CCoRoutine* pCoRoutine = _pScheduler-&gt;m_ppCoRoutine[id];<br><br>    <span class="hljs-comment">// 栈底</span><br>    <span class="hljs-keyword">char</span>* bottom = _pScheduler-&gt;m_shared_stack + STACK_SIZE;<br><br>    <span class="hljs-comment">// 栈顶</span><br>    <span class="hljs-keyword">char</span> top = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 栈未溢出</span><br>    <span class="hljs-built_in">assert</span>(bottom - &amp;top &lt;= STACK_SIZE);<br><br>    <span class="hljs-comment">// 保存共享栈信息到该协程</span><br>    <span class="hljs-keyword">if</span>(pCoRoutine-&gt;m_alloc &lt; bottom - &amp;top)&#123;<br>        <span class="hljs-keyword">delete</span>[] pCoRoutine-&gt;m_pStack;<br>        pCoRoutine-&gt;m_alloc = bottom - &amp;top;<br>        pCoRoutine-&gt;m_pStack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[pCoRoutine-&gt;m_alloc];<br>    &#125;<br>    pCoRoutine-&gt;m_stack_size = bottom - &amp;top;<br>    <span class="hljs-built_in">memcpy</span>(pCoRoutine-&gt;m_pStack, &amp;top, pCoRoutine-&gt;m_stack_size);<br><br><br>    <span class="hljs-comment">// 更新信息</span><br>    pCoRoutine-&gt;m_code = COROUTINE_CODE::COROUTINE_SUSPEND;<br>    _pScheduler-&gt;m_running_id = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 保存现场，并切换环境到调度器[getcontext(&amp;pCoRoutine-&gt;m_ctx); setcontext(&amp;_pScheduler-&gt;m_ctx);]</span><br>    ::<span class="hljs-built_in">swapcontext</span>(&amp;pCoRoutine-&gt;m_ctx, &amp;_pScheduler-&gt;m_ctx);<br><br>    <span class="hljs-comment">// 调度器执行完毕，切换环境为pCoRoutine-&gt;m_ctx，原执行现场恢复</span><br>&#125;<br><br><span class="hljs-comment">// 协程状态码</span><br><span class="hljs-function">COROUTINE_CODE <span class="hljs-title">coroutine_code</span><span class="hljs-params">(CScheduler* _pScheduler, <span class="hljs-keyword">int32_t</span> _id)</span></span>&#123;<br><br>    <span class="hljs-comment">// 协程id有效</span><br>    <span class="hljs-built_in">assert</span>(_id &gt;= <span class="hljs-number">0</span> &amp;&amp; _id &lt; _pScheduler-&gt;m_max_num);<br><br>    <span class="hljs-keyword">if</span>(_pScheduler-&gt;m_ppCoRoutine[_id] == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> COROUTINE_CODE::COROUTINE_DEAD;<br><br>    <span class="hljs-keyword">return</span> _pScheduler-&gt;m_ppCoRoutine[_id]-&gt;m_code;<br>&#125;<br><br><span class="hljs-comment">// 运行中的协程id</span><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">coroutine_running_id</span><span class="hljs-params">(CScheduler* _pScheduler)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> _pScheduler-&gt;m_running_id;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>consul简单使用</title>
    <link href="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="consul-简介"><a href="#consul-简介" class="headerlink" title="consul 简介"></a>consul 简介</h2><p><code>consul</code>是<code>google</code>开源的一个使用<code>go</code>语言开发的__服务发现、配置管理中心服务__。内置了服务注册与发现框架、分布一致性协议实现、健康检查、KV存储、多数据中心方案，不再需要依赖其他工具（比如<a href="http://tonybai.com/tag/zookeeper">ZooKeeper</a>等）。</p><p><code>consul</code>服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行<code>agent</code>，他有两种运行模式<code>server</code>和<code>client</code>。每个数据中心官方建议需要3或5个<code>server</code>节点以保证数据安全，同时保证<code>server-leader</code>的选举能够正确的进行。</p><p>网络上对于<code>consul</code>与其他工具的比较：</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831110802119.png" alt="image-20210831110802119"></p><h3 id="consul-client模式"><a href="#consul-client模式" class="headerlink" title="consul client模式"></a>consul client模式</h3><p><code>consul</code>的<code>client</code>模式，就是客户端模式。这种模式下，所有注册到当前节点的服务会被转发到<code>server</code>，<code>client</code>本身是不持久化这些信息。</p><h3 id="consul-server-模式"><a href="#consul-server-模式" class="headerlink" title="consul server 模式"></a>consul server 模式</h3><p><code>consul</code>的<code>server</code>模式，表明这个<code>consul节点</code>是个<code>server节点</code>。这种模式下，功能和<code>client</code>一样，唯一不同的是，它会把所有的信息持久化的本地，遇到故障后信息是可以被保留的。</p><h3 id="consul-server-leader"><a href="#consul-server-leader" class="headerlink" title="consul server-leader"></a>consul server-leader</h3><p><code>server-leader</code>表明这个<code>server</code>是它们的老大，它和其它<code>server</code>不一样的一点是，它需要负责同步注册的信息给其它的<code>server</code>，同时也要负责各个节点的健康监测。<code>server节点</code>之间的数据一致性保证，一致性协议使用的是<code>raft</code>，而<code>zookeeper</code>用的<code>paxos</code>，<code>etcd</code>采用的也是<code>raft</code>。</p><h3 id="consul服务发现"><a href="#consul服务发现" class="headerlink" title="consul服务发现"></a>consul服务发现</h3><p>服务发现协议:<code>consul</code>采用<code>http</code>和<code>dns</code>协议，<code>etcd</code>只支持<code>http</code>。</p><p><code>consul</code>支持两种方式实现服务发现，一种是通过<code>http API</code>来查询有哪些服务，另外一种是通过<code>consul agent 自带的DNS</code>，域名是以<code>NAME.service.consul</code>的形式给出，<code>NAME</code>是在定义的服务配置文件中服务的名称。<code>DNS</code>方式可以通过<code>check</code>的方式检查服务。</p><h3 id="consul-服务注册"><a href="#consul-服务注册" class="headerlink" title="consul 服务注册"></a>consul 服务注册</h3><p><code>consul</code>支持两种方式实现服务注册，一种是通过<code>consul</code>的服务注册<code>http API</code>，由服务自己调用<code>API</code>实现注册，另一种方式是通过<code>json</code>格式的配置文件实现注册，将需要注册的服务以<code>json</code>格式的配置文件给出。<code>consul</code>__官方建议使用第二种方式__。</p><h2 id="consul-安装及使用"><a href="#consul-安装及使用" class="headerlink" title="consul 安装及使用"></a>consul 安装及使用</h2><p><a href="https://www.consul.io/downloads.html">consul下载地址</a>，只需要下载二进制可执行文件即可进行测试，目前我下载的是<code>v1.10.2</code>版本。</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831105535824.png" alt="image-20210831105535824"></p><h3 id="consul-启动-创建agent"><a href="#consul-启动-创建agent" class="headerlink" title="consul 启动(创建agent)"></a>consul 启动(创建agent)</h3><p><code>consul</code>必须启动<code>agent</code>才能使用，有两种启动模式<code>server</code>和<code>client</code>，还有一个官方自带的ui。server用与持久化服务信息，集群官方建议3或5个节点。client只用与于server交互。ui可以查看集群情况的</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831112620164.png" alt="image-20210831112620164"></p><p><strong>参数：</strong></p><p><code>-bootstrap-expect</code>:集群期望的节点数，只有节点数量达到这个值才会选举leader。</p><p><code>-server</code>： 运行在server模式</p><p><code>-data-dir</code>：指定数据目录，其他的节点对于这个目录必须有读的权限</p><p><code>-node</code>：指定节点的名称</p><p><code>-bind</code>：为该节点绑定一个地址</p><p><code>-config-dir</code>：指定配置文件，定义该节点的服务，默认所有以<code>.json</code>结尾的文件都会读</p><p><code>-enable-script-checks=true</code>：设置检查服务为可用</p><p><code>-datacenter</code>: 数据中心名称，</p><p><code>-join</code>：加入到已有的集群中</p><p><code>-ui</code>:使用浏览器交互界面，</p><p><code>-ui-dir</code>：指定网页交互资源的目录</p><p><code>-client</code>：指定<code>web ui</code>的监听地址，默认127.0.0.1只能本机访问。</p><p><strong>docker中运行consul：</strong></p><p><code>docker run -d  --name consul_server1 --net diy-static-net --ip 172.20.0.2 -h consul1 -p hostport:containerport -v /etc/consul.d/my_diy_service.json:/consul/config/server.json consul agent -config-dir /consul/config</code></p><p>使用<code>-v</code>挂载了宿主机的目录下的配置文件到<code>container</code>的目录下：<code>/etc/consul.d/my_diy_service.json:/consul/config/server.json</code>，然后用<code>-config-dir</code>指定<code>container</code>中<code>consul</code>的配置文件。也可以使用<code>-e</code>设置容器内的环境变量来为运行服务配置参数。</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831142705520.png" alt="image-20210831142705520"></p><p>这里在前面创建使用了<code>静态ip</code>：</p><p><code>docker network inspect  -v diy-static-net</code>可查看网段详情</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831133430366.png" alt="image-20210831133430366"></p><p>看一下<code>ui界面</code>:使用<code>localhosts:11500</code></p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831143035983.png" alt="image-20210831143035983"></p><p>看一下集群中的节点</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831151428676.png" alt="image-20210831151428676"></p><p>看一下<code>docker container</code>的日志：<code>docker logs -f consul_server1</code>, <code>-f</code>表示追踪日志。可以看到<code>consul1</code>被选为了<code>leader</code>。</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831151811120.png" alt="image-20210831151811120"></p><p>关闭<code>consul_server1</code>看哪个节点会成为新<code>leader</code>, 可以看到<code>consul3</code>被选为了新<code>leader</code>。</p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831152327100.png" alt="image-20210831152327100"></p><p><img src="/2021/08/14/consul%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20210831152301336.png" alt="image-20210831152301336"></p>]]></content>
    
    
    <categories>
      
      <category>consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>async的一个细节</title>
    <link href="/2021/08/05/async%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82/"/>
    <url>/2021/08/05/async%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h3 id="std-async使用时容易忽略的一些问题"><a href="#std-async使用时容易忽略的一些问题" class="headerlink" title="std::async使用时容易忽略的一些问题"></a>std::async使用时容易忽略的一些问题</h3><p>一、最好带上第一个参数，指定同步执行还是异步执行。<br>std::launch::async<br>std::launch::deferred<br>std::launch::async | std::launch::deferred （自动选择）</p><p>二、如果忽略返回值，则会阻塞！！！因为async的返回值是一个future对象，在析构时要等待异步任务执行结束。</p><p>坑点：在这里debug了很久。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串哈希</title>
    <link href="/2021/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    <url>/2021/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>最长重复子串<a href="https://leetcode-cn.com/problems/longest-duplicate-substring/">题目链接</a></p><p><img src="/2021/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/image-20210923204108556.png" alt="image-20210923204108556"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 字符串哈希解法</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">30010</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> base = <span class="hljs-number">131</span>;<br>    <span class="hljs-keyword">using</span> ull = <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br>    ull p[N], h[N];<br><br>    <span class="hljs-keyword">int</span> n;<br>    string str;<br>    string res;<br><br>    <span class="hljs-comment">// O(1)</span><br>    <span class="hljs-function">ull <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> h[r] - h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// O(n)</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        unordered_set&lt;ull&gt; has;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i+k<span class="hljs-number">-1</span> &lt;= n; ++i)&#123;<br>            ull cur = <span class="hljs-built_in">get</span>(i, i+k<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">if</span>(has.<span class="hljs-built_in">count</span>(cur)) &#123;<br>                <span class="hljs-keyword">if</span>(k &gt; res.<span class="hljs-built_in">size</span>()) res = str.<span class="hljs-built_in">substr</span>(i<span class="hljs-number">-1</span>, k);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            has.<span class="hljs-built_in">insert</span>(cur);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">longestDupSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, h[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, n = s.<span class="hljs-built_in">size</span>();<br>        str = s;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>            p[i] = p[i<span class="hljs-number">-1</span>] * base;<br>            h[i] = h[i<span class="hljs-number">-1</span>] * base + s[i<span class="hljs-number">-1</span>];<br>        &#125;    <br><br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n, mid;<br><br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123;<br>                l = mid;<br>            &#125;<span class="hljs-keyword">else</span> r = mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 后缀数组解法</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">30010</span>;<br><br>    <span class="hljs-comment">//后缀数组(倍增法)</span><br>    <span class="hljs-comment">// suffix[i]: 坐标从i到n的后缀数组</span><br><br>    <span class="hljs-comment">// sa[i]: 排名为i的后缀(suffix_array)</span><br>    <span class="hljs-comment">// rank[i]: i后缀的排名</span><br>    <span class="hljs-comment">// height[i]: sa[i]和sa[i-1]的最长公共前缀的长度</span><br>    <span class="hljs-keyword">int</span> sa[maxn], Rank[maxn], height[maxn];<br><br>    <span class="hljs-comment">// c是计数数组</span><br>    <span class="hljs-comment">// t1和t2是第一关键字和第二关键字排名时的需要的额外数组</span><br>    <span class="hljs-keyword">int</span> t1[maxn], t2[maxn], c[maxn];<br><br>    <span class="hljs-comment">// s是输入数组</span><br>    <span class="hljs-keyword">char</span> s[maxn];<br><br><br>    <span class="hljs-comment">// 输入为字符串数组</span><br>    <span class="hljs-comment">// str是下标从0开始的字符串, n是字符串长度, m是最大排名加一</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">da</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *str, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> *x = t1, *y = t2, i, j;<br><br>        <span class="hljs-comment">// 首次基数排序</span><br>        <span class="hljs-comment">// x[i]: 起始位置为i的后缀的第一关键字的排名(初始排名就直接依照ASCII大小)</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 初始化计数数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i] = str[i]] ++;<span class="hljs-comment">// 对第一关键字排名(x中的值)计数</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];<span class="hljs-comment">// 累加计数</span><br>        <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[x[i]]] = i;    <span class="hljs-comment">// 按照每个后缀首个值的对应累加计数进行排名</span><br><br>        <span class="hljs-comment">// 倍增（以i起始，长度为j的串为第一关键字的后缀）</span><br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>; j&lt;=n; j &lt;&lt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-comment">//用sa数组对第二关键字排序</span><br>            <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i=n-j; i&lt;n; i++) y[p++] = i;<br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-keyword">if</span> (sa[i] &gt;= j) y[p++] = sa[i] - j;<br><br>            <span class="hljs-comment">// 再次按第一关键字排序，更新sa数组</span><br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;m; i++) c[i] = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// 初始化计数数组</span><br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) c[x[i]] ++;      <span class="hljs-comment">// 第一关键字排名计数</span><br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;m; i++) c[i] += c[i<span class="hljs-number">-1</span>];  <span class="hljs-comment">// 累加计数</span><br>            <span class="hljs-keyword">for</span> (i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) sa[-- c[x[y[i]]]] = y[i];  <span class="hljs-comment">// 按第一关键字的累加计数排名，因为y[i]本身是按第二关键字排序的，这样排序后，就能得到最终有序结果.</span><br>            <br>            <span class="hljs-comment">// 更新x数组</span><br>            <span class="hljs-built_in">swap</span> (x, y);<br>            p = <span class="hljs-number">1</span>, x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;n; i++)  x[sa[i]] =  (sa[i<span class="hljs-number">-1</span>]+j&lt;n &amp;&amp; sa[i]+j&lt;n &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]]==y[sa[i]] &amp;&amp; y[sa[i<span class="hljs-number">-1</span>]+j] == y[sa[i]+j]) ? p<span class="hljs-number">-1</span> : p++ ;<br><br>            <span class="hljs-keyword">if</span>(p == n) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 如果排名超过了n，则n个后缀已经排好了.否则存在同一排名的后缀，继续按照下一个关键字排名</span><br>            m = p; <span class="hljs-comment">// 更新串中的最大值</span><br>        &#125;<br>        <br>        <span class="hljs-comment">//计算Rank数组</span><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) Rank[sa[i]] = i;<br><br>        <span class="hljs-comment">//计算height数组</span><br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(Rank[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;  <br>            <span class="hljs-keyword">if</span> (k)  k --;<br>            j = sa[Rank[i]<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">while</span> (i+k &lt; n &amp;&amp; j+k &lt; n &amp;&amp; str[i+k]==str[j+k]) k++;<br>            height[Rank[i]] = k;<br>        &#125;  <br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">longestDupSubstring</span><span class="hljs-params">(string _s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = _s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">memcpy</span>(s, _s.<span class="hljs-built_in">c_str</span>(), n);<br>        <span class="hljs-built_in">da</span>(s, n, <span class="hljs-string">&#x27;z&#x27;</span>+<span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-keyword">int</span> res_len = <span class="hljs-number">0</span>, idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(height[i] &gt; res_len)&#123;<br>                res_len = height[i];<br>                idx = sa[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(s+idx, res_len);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="后缀数组排名"><a href="#后缀数组排名" class="headerlink" title="后缀数组排名"></a>后缀数组排名</h3><p><a href="https://www.acwing.com/problem/content/description/142/">题目链接</a></p><p><img src="/2021/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/image-20210923204155582.png" alt="image-20210923204155582"></p><p><img src="/2021/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/image-20210923204218559.png" alt="image-20210923204218559"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">300010</span>;<br><span class="hljs-keyword">char</span> a[N];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">using</span> ull = <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">int</span> base = <span class="hljs-number">131</span>;<br><br>ull p[N], h[N];<br><span class="hljs-keyword">int</span> sa[N];<br><br><span class="hljs-function">ull <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> h[y] - h[x<span class="hljs-number">-1</span>]*p[y-x+<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_longest_common_prefix</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-built_in">min</span>(n-x+<span class="hljs-number">1</span>, n-y+<span class="hljs-number">1</span>), mid;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        mid = l + r + <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(x, x+mid<span class="hljs-number">-1</span>) != <span class="hljs-built_in">get</span>(y, y+mid<span class="hljs-number">-1</span>)) r = mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> common = <span class="hljs-built_in">get_longest_common_prefix</span>(x, y);<br>    <span class="hljs-keyword">if</span>(x + common &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(y + common &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> a[x+common] &lt; a[y+common];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a+<span class="hljs-number">1</span>);<br>    n = <span class="hljs-built_in">strlen</span>(a+<span class="hljs-number">1</span>);<br><br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    h[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        h[i] = h[i<span class="hljs-number">-1</span>]*base + a[i]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>;<br>        p[i] = p[i<span class="hljs-number">-1</span>]*base;<br>        sa[i] = i;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(sa+<span class="hljs-number">1</span>, sa+n+<span class="hljs-number">1</span>, cmp);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, sa[i]<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,<span class="hljs-built_in">get_longest_common_prefix</span>(sa[i], sa[i<span class="hljs-number">-1</span>]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>字符串哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下getopt函数</title>
    <link href="/2021/07/29/linux%E4%B8%8Bgetopt%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/29/linux%E4%B8%8Bgetopt%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="int-getopt-int-argc-char-const-argv-const-char-option-str"><a href="#int-getopt-int-argc-char-const-argv-const-char-option-str" class="headerlink" title="int getopt(int argc, char* const * argv, const char* option_str)"></a>int getopt(int argc, char* const * argv, const char* option_str)</h2><p>getopt是用来解析命令行选项参数的，但是只能解析短选项: -d 100,不能解析长选项。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>argc：函数传递过来的参数的个数<br>argv：函数传递过来的参数的字符串指针数组<br>option_str：选项字符串，告知 getopt()可以处理哪个选项以及哪个选项需要参数</p><hr><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果选项成功找到，返回选项字母；<br>如果所有命令行选项都解析完毕，返回 -1；<br>如果遇到选项字符不在 option_str 中，返回字符 ‘?’；<br>如果遇到丢失参数，那么返回值依赖于 option_str 中第一个字符，如果第一个字符是 ‘:’ 则返回’:’，否则返回’?’并提示出错误信息。</p><hr><h3 id="option-str"><a href="#option-str" class="headerlink" title="option_str"></a>option_str</h3><p>char*option_str = “ab:c::”;<br>单个字符a          表示选项a没有参数            格式：-a即可，不加参数<br>单字符加冒号b:     表示选项b有且必须加参数      格式：-b 100或-b100,但-b=100错<br>单字符加2冒号c::   表示选项c可以有(必须紧跟参数)，也可以无     格式：-c200，其它格式错误</p><p>如上option_str, getopt函数将依次检查命令行是否指定了 -a， -b， -c(这需要多次调用getopt函数，直到其返回-1)，当检查到上面某一个参数被指定时，函数会返回被指定的参数名称(即该字母)</p><hr><h3 id="getopt设置的全局变量"><a href="#getopt设置的全局变量" class="headerlink" title="getopt设置的全局变量"></a>getopt设置的全局变量</h3><p>optarg —— 指向当前选项参数(如果有)的指针。<br>optind —— 再次调用 getopt() 时的下一个 argv指针的索引。<br>optopt —— 最后一个未知选项。<br>opterr ­— 如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span>&#123;<br><br>    <span class="hljs-keyword">char</span> opt;<br>    <span class="hljs-keyword">while</span>((opt = <span class="hljs-built_in">getopt</span>(argc, argv, <span class="hljs-string">&quot;o:O::e:d&quot;</span>)) != <span class="hljs-number">-1</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;option: &quot;</span> &lt;&lt; opt &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;params: &quot;</span> &lt;&lt; optarg &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;nextPos: &quot;</span> &lt;&lt; optind &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;optopt: &quot;</span> &lt;&lt; optopt &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;opterr: &quot;</span> &lt;&lt; opterr &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// .\test_getopt.exe -o 1 -O 3</span><br>    <span class="hljs-comment">// option: o       params: 1       nextPos: 3      optopt: 63      opterr: 1</span><br>    <span class="hljs-comment">// option: O       params:</span><br><br>    <span class="hljs-comment">// .\test_getopt.exe -o 1 -O3 </span><br>    <span class="hljs-comment">// option: o       params: 1       nextPos: 3      optopt: 63      opterr: 1</span><br>    <span class="hljs-comment">// option: O       params: 3       nextPos: 4      optopt: 63      opterr: 1</span><br><br>    <span class="hljs-comment">// .\test_getopt.exe -o 1 -O3 -e</span><br>    <span class="hljs-comment">// option: o       params: 1       nextPos: 3      optopt: 63      opterr: 1</span><br>    <span class="hljs-comment">// option: O       params: 3       nextPos: 4      optopt: 63      opterr: 1</span><br>    <span class="hljs-comment">// D:\CPP\test\a.exe: unknown option -- e</span><br>    <span class="hljs-comment">// option: ?       params:</span><br><br>    <span class="hljs-comment">// .\test_getopt.exe  -e </span><br>    <span class="hljs-comment">// D:\CPP\test\test_getopt.exe: option requires an argument -- e</span><br>    <span class="hljs-comment">// option: ?       params:</span><br><br>    <span class="hljs-comment">// .\test_getopt.exe  -o</span><br>    <span class="hljs-comment">// D:\CPP\test\test_getopt.exe: option requires an argument -- o</span><br>    <span class="hljs-comment">// option: ?       params:</span><br><br>    <span class="hljs-comment">// .\test_getopt.exe  -o -O2</span><br>    <span class="hljs-comment">// option: o       params: -O2     nextPos: 3      optopt: 63      opterr: 1</span><br><br><br>    <span class="hljs-comment">// opt = getopt(argc, argv, &quot;:o:O::e:d&quot;</span><br>    <span class="hljs-comment">// .\test_getopt.exe  -o    </span><br>    <span class="hljs-comment">// option: :       params: </span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>index_sequence</title>
    <link href="/2021/07/26/index-sequence/"/>
    <url>/2021/07/26/index-sequence/</url>
    
    <content type="html"><![CDATA[<h2 id="integer-sequence"><a href="#integer-sequence" class="headerlink" title="integer_sequence"></a>integer_sequence</h2><p>一个空类，仅为了获得编译时常数。因为模板是编译时多态，而有时候我们需要在编译时获得常数，故可利用模板参数来作为常数使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tuple&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintArg</span><span class="hljs-params">(T t)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Expand</span><span class="hljs-params">(Args... args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// (PrintArg(args),...);  // c++17</span><br>    std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt;&#123;(<span class="hljs-built_in">PrintArg</span>(args), <span class="hljs-number">0</span>)...&#125;;  <span class="hljs-comment">// 如上一句一样，仅用来解开参数包，执行函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Expand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    std::integer_sequence&lt;<span class="hljs-keyword">long</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&gt; t1;               <span class="hljs-comment">// 类中仅有一个size()方法，还有模板参数long的别名 using value = _Tp</span><br>    <span class="hljs-keyword">decltype</span>(t1)::value_type a1;                                 <span class="hljs-comment">// long a1</span><br>    <br>    <span class="hljs-comment">// 相当于是integer_sequence的一层包裹</span><br>    <span class="hljs-comment">// 等于 std::integer_sequence&lt;long, 0, 1, 2, 3, 4&gt; t2;</span><br>    std::make_integer_sequence&lt;<span class="hljs-keyword">long</span>, <span class="hljs-number">5</span>&gt; t2;                      <span class="hljs-comment">//类中仅有一个size()方法，还有模板参数long的别名 using value = _Tp</span><br>    <span class="hljs-keyword">decltype</span>(t2)::value_type a2;                                 <span class="hljs-comment">// long a2</span><br><br>    <span class="hljs-comment">// decltype(t2) = std::integer_sequence&lt;long, 0, 1, 2, 3, 4&gt;</span><br>    std::cout &lt;&lt; std::is_same&lt;<span class="hljs-keyword">decltype</span>(t1), <span class="hljs-keyword">decltype</span>(t2)&gt;::value &lt;&lt; std::endl;  <span class="hljs-comment">// 0</span><br><br>    <span class="hljs-comment">// 相当于是integer_sequence的一层包裹,但是限定了类型为std::size_t</span><br>    <span class="hljs-comment">// 等于 std::integer_sequence&lt;std::size_t, 2, 1, 4, 5, 3&gt; t3;</span><br>    std::index_sequence&lt;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>&gt; t3;<br>    <span class="hljs-keyword">decltype</span>(t3)::value_type a3;<br><br>    <span class="hljs-comment">// 相当于是index_sequence的一层包裹</span><br>    <span class="hljs-comment">// 等于 std::index_sequence&lt;0, 1, 2, 3, 4, 5&gt; t4;</span><br>    std::make_index_sequence&lt;<span class="hljs-number">6</span>&gt; t4;<br>    <span class="hljs-keyword">decltype</span>(t4)::value_type a4;<br><br>    <span class="hljs-comment">// 相当于make_index_sequence的一层包裹</span><br>    <span class="hljs-comment">// 等于 std::make_index_sequence&lt;3&gt; t4;</span><br>    std::index_sequence_for&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">float</span>, <span class="hljs-keyword">void</span>*&gt; t5;                  <span class="hljs-comment">// std::make_index_sequence&lt;sizeof...(Args)&gt; t5;</span><br>    <span class="hljs-keyword">decltype</span>(t5)::value_type a5;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单序列化及反序列化</title>
    <link href="/2021/07/24/%E7%AE%80%E5%8D%95%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/07/24/%E7%AE%80%E5%8D%95%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="简单序列化"><a href="#简单序列化" class="headerlink" title="简单序列化"></a>简单序列化</h2><p>在网络上传输数据时，我们经常会需要首先将某个对象序列化为字节流，然后将这个字节流通过网络传输到对端，对端再通过反序列化来重构原先的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// buffer</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description:</span><br><span class="hljs-comment"> * *@*Version:</span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-07-23 19:57:50</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-07-24 18:40:42</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> CLBUFFERVEC_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLBUFFERVEC_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 包裹一个vector&lt;char&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLBuffer</span> <span class="hljs-keyword">final</span>:</span> <span class="hljs-keyword">public</span> std::vector&lt;<span class="hljs-keyword">char</span>&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    std::<span class="hljs-keyword">size_t</span> m_cur;<br><br>    <span class="hljs-built_in">CLBuffer</span>(<span class="hljs-keyword">const</span> CLBuffer&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">CLBuffer</span>(CLBuffer&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-keyword">const</span> CLBuffer&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CLBuffer&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-keyword">const</span> CLBuffer&amp; <span class="hljs-keyword">operator</span>=(CLBuffer&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-keyword">using</span> CLSptrBuf = std::shared_ptr&lt;CLBuffer&gt;;<br>    <span class="hljs-keyword">using</span> CLBase = std::vector&lt;<span class="hljs-keyword">char</span>&gt;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CLBuffer</span><span class="hljs-params">()</span>:m_cur(<span class="hljs-number">0</span>)&#123;</span> &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CLBuffer</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str, std::<span class="hljs-keyword">size_t</span> size)</span>: m_cur(<span class="hljs-number">0</span>)</span><br><span class="hljs-function">    &#123;</span><br>        CLBase::<span class="hljs-built_in">insert</span>(CLBase::<span class="hljs-built_in">begin</span>(), str, str+size);<br>    &#125;<br><br>    ~<span class="hljs-built_in">CLBuffer</span>()&#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">data</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> CLBase::<span class="hljs-built_in">data</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">curData</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">data</span>()+m_cur;<br>    &#125;<br><br>    <span class="hljs-function">std::<span class="hljs-keyword">size_t</span> <span class="hljs-title">curSize</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> CLBase::<span class="hljs-built_in">size</span>()-m_cur;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">offset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        m_cur += k;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str, std::<span class="hljs-keyword">size_t</span> size)</span></span>&#123;<br>        CLBase::<span class="hljs-built_in">insert</span>(CLBase::<span class="hljs-built_in">end</span>(), str, str+size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span></span>&#123;<br>        m_cur = <span class="hljs-number">0</span>;<br>        CLBase::<span class="hljs-built_in">clear</span>();<br>    &#125;<br><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br></code></pre></td></tr></table></figure><p>使用上面的缓冲类来保存序列化数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// serializer</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * *@*Description:</span><br><span class="hljs-comment"> * *@*Version:</span><br><span class="hljs-comment"> * *@*Author: yusheng Gao</span><br><span class="hljs-comment"> * *@*Date: 2021-07-23 19:57:50</span><br><span class="hljs-comment"> * *@*LastEditors: yusheng Gao</span><br><span class="hljs-comment"> * *@*LastEditTime: 2021-07-26 17:14:49</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">实现顺序容器及普通类型的序列化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">TODO：对于关联容器，不用resize，而是一个一个插入实现</span><br><span class="hljs-comment">TODO：const char*判断是否会越界？越界了又该怎么处理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SERIALIZE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SERIALIZE_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bufferVec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;except.h&quot;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLSerializer</span> <span class="hljs-keyword">final</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    CLBuffer::CLSptrBuf m_sptrBuf;<br>    <span class="hljs-keyword">bool</span> is_little_end;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">little_end</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">uint16_t</span> a = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">uint8_t</span>*&gt;(&amp;a) == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">CLSerializer</span>(<span class="hljs-keyword">const</span> CLSerializer&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-built_in">CLSerializer</span>(CLSerializer&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-keyword">const</span> CLSerializer&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CLSerializer&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-keyword">const</span> CLSerializer&amp; <span class="hljs-keyword">operator</span>=(CLSerializer&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> CLSptrSlz = std::shared_ptr&lt;CLSerializer&gt;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CLSerializer</span><span class="hljs-params">()</span></span>&#123;<br>        m_sptrBuf = std::make_shared&lt;CLBuffer&gt;();<br>        is_little_end = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">little_end</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CLSerializer</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str, std::<span class="hljs-keyword">size_t</span> size)</span></span>&#123;<br>        m_sptrBuf = std::make_shared&lt;CLBuffer&gt;(str, size);<br>        is_little_end = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">little_end</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CLSerializer</span><span class="hljs-params">(CLBuffer::CLSptrBuf sptrBuf)</span>:m_sptrBuf(sptrBuf)&#123;</span><br>        is_little_end = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">little_end</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span></span>&#123;<br>        m_sptrBuf-&gt;<span class="hljs-built_in">reset</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;<br>        m_sptrBuf-&gt;<span class="hljs-built_in">reset</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* str, std::<span class="hljs-keyword">size_t</span> size)</span></span>&#123;<br>        m_sptrBuf-&gt;<span class="hljs-built_in">append</span>(str, size);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-title">data</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> m_sptrBuf-&gt;<span class="hljs-built_in">curData</span>();<br>    &#125;<br><br>    <span class="hljs-function">std::<span class="hljs-keyword">size_t</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m_sptrBuf-&gt;<span class="hljs-built_in">curSize</span>();<br>    &#125;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">to_string</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">string</span>(m_sptrBuf-&gt;<span class="hljs-built_in">data</span>(), m_sptrBuf-&gt;<span class="hljs-built_in">size</span>());<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// serialize</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input_type</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* _value)</span></span>&#123;  <span class="hljs-comment">// char* 和 const char*都认为是字符数组</span><br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(std::<span class="hljs-built_in">string</span>(_value, <span class="hljs-built_in">strlen</span>(_value)));<br>    &#125;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;                           <span class="hljs-comment">// const char* 和char* 属于可平凡复制类型</span><br>        !std::is_same&lt;<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">typename</span> std::decay&lt;_Tp&gt;::type&gt;::value         <span class="hljs-comment">// 不复制指针，当成数组！</span><br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">input_type</span>(_Tp _value);<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">input_type</span>(_Tp _value);<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        !std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">input_type</span>(_Tp _value);<br><br>    <span class="hljs-comment">// deserialize</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output_type</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* _ref)</span></span>&#123;  <span class="hljs-comment">// char* 和 const char*都认为是字符数组</span><br>        std::string str;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(str);<br><br>        <span class="hljs-keyword">char</span>* ptr = <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(_ref);<br>        <span class="hljs-built_in">memcpy</span>(ptr, str.<span class="hljs-built_in">data</span>(), str.<span class="hljs-built_in">size</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        !std::is_same&lt;<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">typename</span> std::decay&lt;_Tp&gt;::type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">output_type</span>(_Tp&amp; _ref);<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">output_type</span>(_Tp&amp; _ref);<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        !std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">output_type</span>(_Tp&amp; _ref);<br><br>    <span class="hljs-comment">// 从CLSerializer中为Tuple中Index处的变量赋值</span><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Tuple, std::<span class="hljs-keyword">size_t</span> Index&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">void</span> <span class="hljs-title">get_value</span><span class="hljs-params">(CLSerializer&amp; _ref_slz, Tuple&amp; _ref_tuple)</span></span>&#123;<br>        _ref_slz &gt;&gt; std::get&lt;Index&gt;(_ref_tuple);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Tuple, std::<span class="hljs-keyword">size_t</span>... Index_Packed&gt;</span><br><span class="hljs-function">    Tuple <span class="hljs-title">get_tuple</span><span class="hljs-params">(std::index_sequence&lt;Index_Packed...&gt;)</span></span>&#123;<br>        Tuple tuple;<br>        std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt;&#123;(<span class="hljs-keyword">this</span>-&gt;get_value&lt;Tuple, Index_Packed&gt;(*<span class="hljs-keyword">this</span>, tuple), <span class="hljs-number">0</span>)...&#125;;<br>        <span class="hljs-keyword">return</span> tuple;<br>    &#125;<br><br>    <span class="hljs-comment">// 从CLSerailizer中取出一个_Tp类型的值放到_ref中</span><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br>    CLSerializer&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(_Tp&amp; _ref)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(_ref);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将一个_Tp类型的值_value输入到CLSerializer中</span><br>    <span class="hljs-comment">// 有可能大小端转换，为了不改变源的值，这里传入的是值参数</span><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br>    CLSerializer&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(_Tp _value)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(_value);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    serailize</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 一般类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        !std::is_same&lt;<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">typename</span> std::decay&lt;_Tp&gt;::type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">input_type</span>(_Tp _value)&#123;<br><br>        std::<span class="hljs-keyword">size_t</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(_Tp);<br>        <span class="hljs-keyword">char</span>* ptr = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;_value);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;is_little_end) std::<span class="hljs-built_in">reverse</span>(ptr, ptr+len);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input</span>(ptr, len);<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">input_type</span>(_Tp _value)&#123;<br>    std::<span class="hljs-keyword">size_t</span> len = _value.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(len);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; item: _value)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(item);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        !std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">input_type</span>(_Tp _value)&#123;<br>    std::<span class="hljs-keyword">size_t</span> len = _value.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(len);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; item: _value)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">input_type</span>(item);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// TODO：const char*判断是否会越界？越界了又该怎么处理</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    deserialize</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">// 一般类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        !std::is_same&lt;<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">typename</span> std::decay&lt;_Tp&gt;::type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">output_type</span>(_Tp&amp; _ref)&#123;<br>    std::<span class="hljs-keyword">size_t</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(_Tp);<br><br>    <span class="hljs-comment">// assert(this-&gt;size() &gt;= len);    ////////////////////////////////////////////////// 改为抛出异常</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">size</span>() &lt; len)&#123;<br>        CLException e;<br>        e.<span class="hljs-built_in">set_err_code</span>(ERR_CODE::SERIALIZER_ERR);<br>        e.<span class="hljs-built_in">set_err_desc</span>(<span class="hljs-string">&quot;CLSerializer does not have resource to assign to this type!&quot;</span>);<br>        <span class="hljs-keyword">throw</span> e;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>(&amp;_ref, <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">data</span>(), len);<br>    m_sptrBuf-&gt;<span class="hljs-built_in">offset</span>(len);<br><br>    <span class="hljs-keyword">char</span>* ptr = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;_ref);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;is_little_end) std::<span class="hljs-built_in">reverse</span>(ptr, ptr+len);<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">output_type</span>(_Tp&amp; _ref)&#123;<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        std::<span class="hljs-keyword">size_t</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(len);  <span class="hljs-comment">// 如果当前CLSerializer中保存的不是字符串，则这里可能会获取到一个很大的值，导致接下来resize失败</span><br><br>        <span class="hljs-keyword">try</span>&#123;<br>            _ref.<span class="hljs-built_in">resize</span>(len);<br>        &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(std::exception std_e)&#123;<br>            CLException e;<br>            e.<span class="hljs-built_in">set_err_code</span>(ERR_CODE::SERIALIZER_ERR);<br>            e.<span class="hljs-built_in">set_err_desc</span>(<span class="hljs-string">&quot;Cannot resize! CLSerializer current data may not be a Container!\n&quot;</span>);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; item: _ref)&#123;<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(item);<br>        &#125;<br>    &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(CLException e)&#123;<br>        <span class="hljs-keyword">throw</span> e;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> std::enable_if&lt;<br>        !std::is_trivially_copyable&lt;_Tp&gt;::value &amp;&amp;<br>        std::is_same&lt;<span class="hljs-keyword">typename</span> _Tp::iterator, <span class="hljs-keyword">decltype</span>(std::declval&lt;_Tp&gt;().<span class="hljs-built_in">begin</span>())&gt;::value &amp;&amp;<br>        !std::is_trivially_copyable&lt;<span class="hljs-keyword">typename</span> _Tp::value_type&gt;::value<br>        , <span class="hljs-keyword">int</span>&gt;::type N = <span class="hljs-number">0</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> CLSerializer::<span class="hljs-built_in">output_type</span>(_Tp&amp; _ref)&#123;<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        std::<span class="hljs-keyword">size_t</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(len);<br>        <span class="hljs-keyword">try</span>&#123;<br>            _ref.<span class="hljs-built_in">resize</span>(len);<br>        &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(std::exception std_e)&#123;<br>            std::string std_e_desc = std::<span class="hljs-built_in">string</span>(std_e.<span class="hljs-built_in">what</span>(), <span class="hljs-built_in">strlen</span>(std_e.<span class="hljs-built_in">what</span>()));<br>            CLException e;<br>            e.<span class="hljs-built_in">set_err_code</span>(ERR_CODE::SERIALIZER_ERR);<br>            e.<span class="hljs-built_in">set_err_desc</span>( std_e_desc + <span class="hljs-string">&quot;\nCLSerializer current data is not a Container!\n&quot;</span>);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; item: _ref)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">output_type</span>(item);<br>    &#125;<br>    &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(CLException e)&#123;<br>        <span class="hljs-keyword">throw</span> e;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> char*判断是否会越界？越界了又该怎么处理</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>initializer_list</title>
    <link href="/2021/07/23/initializer-list/"/>
    <url>/2021/07/23/initializer-list/</url>
    
    <content type="html"><![CDATA[<h3 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer_list"></a>initializer_list</h3><p>我常常用 std::vector&lt;int&gt; a = {1, 2, 3}如此来构造一个容器(set、map等等)。一直以来都是这么用的，现在看一下这后面做了什么样的隐式转换。</p><p>initializer_list是C++11提供的新类型，定义在头文件&lt;initializer_list&gt;中, 当然默认容器使用了这个类型作为构造参数，已经包含了该头文件。就像我使用std::pair&lt;T1, T2&gt;一般不会特别的再去包含&lt;utility&gt;一样，除非我没有使用map等关联容器。</p><p>initializer_list用于表示某种特定类型的值的数组，和vector一样，initializer_list也是一种模板类型。</p><p>C++11扩大了初始化列表的适用范围，使其可用于所有内置类型和用户定义的类型。无论是初始化对象还是某些时候为对象赋新值，都可以使用这样一组由花括号括起来的初始值了。使用初始化列表时，可添加=，也可不添加，即也可定义 std::vector&lt;int&gt; a{1, 2, 3}。</p><p>initializer_list对象中的元素永远是常量值，我们无法改变initializer_list对象中元素的值。并且，拷贝或赋值一个initializer_list对象不会拷贝列表中的元素，其实只是引用而已，原始列表和副本共享元素。</p><p>使用{}进行初始化，实际上是利用了一个事实：编译器看到{t1,t2…tn}时便做出一个initializer_list，它关联到一个array&lt;T,n&gt;。调用函数时该array内的元素可以被编译器分解逐一传递给函数。但是如果函数参数是一个initializer_list,这“包”数据（即{t1,t2…tn}）将整体传入到函数中。<br>例如：上述{}会形成一个initializer_list，背后有个array&lt;int,3&gt;。调用vector的ctors时，编译器找到了一个initializer_list ctor来接受initializer_list(拷贝)，而对于A来说，{}会形成一个initializer_list，背后有一个array&lt;A,2&gt;,但是若A类中没有initializer_listctor，所以编译器会将array内的元素拆解开来传递给ctor。事实上，STL中所有的容器都有此ctors。</p><p>编译器首先会调用constexpr initializer_list()进行构造，但是在调用前initializer_list的背后已经关联好了array&lt;T,_Size&gt;数组，而函数中的_First和_Last会分别为指向array数组的起始元素和末尾的元素。需要注意的是这些元素都被包含在array数组中，initializer_list中没有包含这些元素，它提供的是指向array的指针，所以如果进行拷贝动作，只是两个initializer_list的指针指向同一个array，本质上是做的一个浅拷贝。</p><p>不要返回一个initializer_list对象，因为initializer_list仅仅维护了对应数据的首地址和大小(浅拷贝），当返回时，由于弹栈操作，这个指针指向的是已经释放了的地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">void</span>*)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;parameter construct1&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-built_in">A</span>(std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt;, std::initializer_list&lt;<span class="hljs-keyword">void</span>*&gt;)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;initializer_list construct1&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;parameter construct2&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-built_in">A</span>(std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt;)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;initializer_list construct2&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">66</span>;<br><br>    std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt; s; <span class="hljs-comment">// 空列表。只能在初始化时给</span><br><br><br>    <span class="hljs-comment">// std::initializer_list&lt;int&gt; t = &#123;1, 2, 3, 4&#125;;</span><br>    std::initializer_list&lt;<span class="hljs-keyword">int</span>&gt; t&#123;a, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;; <span class="hljs-comment">// 实际上等同于上一个</span><br><br>    <span class="hljs-comment">// constrexpr初始化背后的array，因此后面即使修改a，也不会影响t。因为t中维护的array和a不是同一个地址了</span><br>    a = <span class="hljs-number">77</span>;<br>    <br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    cout &lt;&lt; t.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br>    s = t;<br>    cout &lt;&lt; s.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;  <span class="hljs-comment">// 0x56166680c020</span><br>    cout &lt;&lt; t.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;  <span class="hljs-comment">// 0x56166680c020</span><br>    cout &lt;&lt; *s.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;  <span class="hljs-comment">// 66</span><br>    cout &lt;&lt; *t.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;  <span class="hljs-comment">// 66</span><br><br>    <span class="hljs-comment">// 以下修改const在t中没有变量a的时候会段错误！！！为什么会这样？</span><br>    *<span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(s.<span class="hljs-built_in">begin</span>()) = <span class="hljs-number">3</span>;<br>    cout &lt;&lt; *t.<span class="hljs-built_in">begin</span>() &lt;&lt; endl; <span class="hljs-comment">// 3</span><br><br>    *<span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(s.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>) = <span class="hljs-number">4</span>;<br>    cout &lt;&lt; *t.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">// 4</span><br><br><br>    <span class="hljs-function">A <span class="hljs-title">a1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-literal">nullptr</span>)</span></span>;<br>    A a2&#123;<span class="hljs-number">2</span>, &amp;a1&#125;;   <span class="hljs-comment">// 与上面是一样的效果，除非A中显式声明了initializer_list的ctor</span><br>    <span class="hljs-comment">// parameter construct1</span><br>    <span class="hljs-comment">// parameter construct1</span><br><br>    <span class="hljs-function">A <span class="hljs-title">a3</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span></span>;<br>    A a4&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;; <br>    <span class="hljs-comment">// parameter construct2</span><br>    <span class="hljs-comment">// initializer_list construct2</span><br>    <br>    A a5&#123;&#123;<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-literal">nullptr</span>&#125;&#125;;<br>    <span class="hljs-function">A <span class="hljs-title">a6</span><span class="hljs-params">(&#123;<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-literal">nullptr</span>&#125;)</span></span>;<br>    <span class="hljs-comment">// initializer_list construct1</span><br>    <span class="hljs-comment">// initializer_list construct1</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承时成员函数的一些事</title>
    <link href="/2021/07/23/%E7%BB%A7%E6%89%BF%E6%97%B6%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"/>
    <url>/2021/07/23/%E7%BB%A7%E6%89%BF%E6%97%B6%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="继承时成员函数的调用"><a href="#继承时成员函数的调用" class="headerlink" title="继承时成员函数的调用"></a>继承时成员函数的调用</h2><p>除了两点之外，其余都在猜想之中：<br>1、基类成员函数继承后，基类的该成员函数会有重载版本，能接收派生类的地址作为this参数。而派生类与基类的同名成员函数则必须要派生类的指针才可以调用<br>2、传char*地址做this指针，访问了类中成员，没有报溢出错误</p><p>C++中调用非静态的类成员函数时，采用的调用规范是__thiscall。std::cout中运算符&lt;&lt;没有对void (__thiscall MyTest:: *)()类型进行重载，因而编译器将这种类型转换为bool类型，所以输出了1。<br>对于静态函数，其调用方式并非__thiscall，&lt;&lt;有对它的重载，因此类的静态函数可以直接用cout输出函数地址。<br>用printf打印地址时，一定注意格式修饰符为”%p”。”%x”是打印一个16进制的int类型，而”%p”是打印一个地址（Prints the argument as an address in hexadecimal digits. ）。在32位程序中两者没有区别，但是64位程序中，”%x”会使地址截断至32位。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>&#123; <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;address: %p, A call:%d\n&quot;</span>, <span class="hljs-keyword">this</span>, c);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> t[<span class="hljs-number">30</span>];<br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> c;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><span class="hljs-keyword">public</span> A&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> </span>&#123; <br>        A::<span class="hljs-built_in">f1</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;B call&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span> <span class="hljs-keyword">public</span> A&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>&#123;<br>        <span class="hljs-built_in">f1</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;C call&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    A a;<br>    B b;<br>    C c;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;c);<br>    <span class="hljs-comment">// 0x7ffecd58c9e8</span><br>    <span class="hljs-comment">// 0x7ffecd58c9f4</span><br><br><br>    b.<span class="hljs-built_in">f1</span>(<span class="hljs-number">0</span>); <br>    <span class="hljs-comment">// address: 0x7ffecd58c9f4, A call: 32666</span><br>    <span class="hljs-comment">// B call</span><br><br>    c.<span class="hljs-built_in">f1</span>(<span class="hljs-number">0</span>); <br>    <span class="hljs-comment">// address: 0x7ffecd58c9f4, A call: 1640943328</span><br><br>    c.<span class="hljs-built_in">f2</span>(<span class="hljs-number">0</span>); <br>    <span class="hljs-comment">// address: 0x7ffecd58c9f4, A call: 1640943328</span><br>    <span class="hljs-comment">// C call</span><br>    <br>    <span class="hljs-comment">// 必须以实例来调用</span><br>    <span class="hljs-comment">// C::f1(&amp;c, 0); // ERROR</span><br>    <span class="hljs-comment">// C::f2(&amp;c, 0); // ERROR</span><br><br>    <span class="hljs-comment">// 可通过bind来调用</span><br>    <span class="hljs-comment">// 非静态函数要取函数地址， 并且要传入this指针</span><br>    <span class="hljs-keyword">auto</span> func1 = std::<span class="hljs-built_in">bind</span>(&amp;C::f1, &amp;c, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">func1</span>(); <br>    <span class="hljs-comment">// address: 0x7ffecd58c9f4, A call: 1640943328</span><br><br>    <span class="hljs-keyword">auto</span> func2 = std::<span class="hljs-built_in">bind</span>(&amp;A::f1, &amp;c, std::placeholders::_1);<br>    <span class="hljs-built_in">func2</span>(<span class="hljs-number">1</span>);  <br>    <span class="hljs-comment">// address: 0x7ffecd58c9f4, A call: 1640943328</span><br>    <span class="hljs-comment">// A的重载函数，(A*, int) ---&gt; (B*, int),(C*, int)</span><br><br>    <span class="hljs-comment">// auto func3 = std::bind(&amp;A::f1, nullptr, 0); // OK</span><br>    <span class="hljs-comment">// func3(); // ERROR: check nullptr and type</span><br><br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;ch);<br>    <span class="hljs-comment">// 0x7ffecd58c9df</span><br><br>    <span class="hljs-keyword">auto</span> func3 = std::<span class="hljs-built_in">bind</span>(&amp;A::f1, (A*)&amp;ch, std::placeholders::_1); <span class="hljs-comment">// OK</span><br>    <span class="hljs-built_in">func3</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// address: 0x7ffecd58c9df, A call: -2104565760</span><br>    <span class="hljs-comment">// 把char类型a的地址当成A类型的地址，竟然没有溢出错误。。。。</span><br><br><br>    <span class="hljs-comment">// auto func4 = std::bind(&amp;B::f1, (B*)&amp;a, 0);  // OK</span><br>    <span class="hljs-comment">// func4();   // ERROR, B的f1需要B*指针，而A的f1有多个重载版本不一定要A*指针</span><br>    <span class="hljs-comment">// type检查不通过，若强转为B*则也能调用通过</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;A::f1);<br>    <span class="hljs-comment">// 0x55e1ce027532</span><br><br>    <span class="hljs-comment">// 可以看出来，若存在同名函数(函数地址不同，代表是不同的函数)则需要以作用域区分</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;B::A::f1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;B::f1);<br>    <span class="hljs-comment">// 0x55e1ce027532</span><br>    <span class="hljs-comment">// 0x55e1ce027566</span><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;C::f1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;C::f2);<br>    <span class="hljs-comment">// 0x55e1ce027532</span><br>    <span class="hljs-comment">// 0x55e1ce02759e</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-10</title>
    <link href="/2021/07/23/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-10/"/>
    <url>/2021/07/23/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-10/</url>
    
    <content type="html"><![CDATA[<h2 id="Canny边缘检测算法-转载）"><a href="#Canny边缘检测算法-转载）" class="headerlink" title="Canny边缘检测算法(转载）"></a>Canny边缘检测算法(转载）</h2><p>1、Canny边缘检测基本原理<br>(1)图象边缘检测必须满足两个条件：一能有效地抑制噪声；二必须尽量精确确定边缘的位置。<br>(2)根据对信噪比与定位乘积进行测度，得到最优化逼近算子。这就是Canny边缘检测算子。<br>(3)类似与Marr（LoG）边缘检测方法，也属于先平滑后求导数的方法。</p><p>2、Canny边缘检测算法：<br>step1:用高斯滤波器平滑图象；<br>step2:用一阶偏导的有限差分来计算梯度的幅值和方向；<br>step3:对梯度幅值进行非极大值抑制；<br>step4:用双阈值算法检测和连接边缘。</p><hr><p>算法详解</p><p>step1:高斯平滑函数</p><p><img src="/2021/07/23/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-10/Gauss_smooth.png"></p><hr><p>step2:用一阶偏导的有限差分来计算梯度的幅值和方向</p><p><img src="/2021/07/23/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-10/Gauss_smooth_grad.png"></p><hr><p>step3:非极大值抑制</p><p>仅仅得到全局的梯度并不足以确定边缘，因此为确定边缘，必须保留局部梯度最大的点，而抑制非极大值。（non-maxima suppression,NMS）</p><p>解决方法：利用梯度的方向。</p><p><img src="/2021/07/23/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-10/NMS.png"></p><hr><p>step4:用双阈值算法检测和连接边缘:</p><p>对非极大值抑制图像作用两个阈值th1和th2，两者关系th1=0.4th2。我们把梯度值小于th1的像素的灰度值设为0，得到图像1。然后把梯度值小于th2的像素的灰度值设为0，得到图像2。由于图像2的阈值较高，去除大部分噪音，但同时也损失了有用的边缘信息。而图像1的阈值较低，保留了较多的信息，我们可以以图像2为基础，以图像1为补充来连结图像的边缘。</p><p>链接边缘的具体步骤如下：</p><p>对图像2进行扫描，当遇到一个非零灰度的像素p(x,y)时，跟踪以p(x,y)为开始点的轮廓线，直到轮廓线的终点q(x,y)。</p><p>考察图像1中与图像2中q(x,y)点位置对应的点s(x,y)的8邻近区域。如果在s(x,y)点的8邻近区域中有非零像素s(x,y)存在，则将其包括到图像2中，作为r(x,y)点。从r(x,y)开始，重复第一步，直到我们在图像1和图像2中都无法继续为止。</p><p>当完成对包含p(x,y)的轮廓线的连结之后，将这条轮廓线标记为已经访问。回到第一步，寻找下一条轮廓线。重复第一步、第二步、第三步，直到图像2中找不到新轮廓线为止。</p><hr><p>至此，完成canny算子的边缘检测。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包问题</title>
    <link href="/2021/07/22/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2021/07/22/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">1010</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V - v[i]; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-comment">// f[i][j+v[i]] = f[i-1][j] + w[i]</span><br>            <span class="hljs-comment">// 空间优化后，反向遍历体积才能保证 f[i][j+v[i]] = f[j+v[i]] “当前轮结果”, f[i-1][j] = f[j] “上一轮结果”</span><br>            <span class="hljs-keyword">if</span> (f[j] + w[i] &gt; f[j+v[i]]) &#123;<br>                f[j+v[i]] = f[j] + w[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">1010</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j + v[i] &lt;= V; j++) &#123;<br>            <span class="hljs-comment">// f[i][j+v[i]] = f[i][j] + w[i]</span><br>            <span class="hljs-comment">// 空间优化后，正向遍历体积才能保证 f[i][j+v[i]] = f[j+v[i]] “当前轮结果”, f[i][j] = f[j] “当前轮结果”</span><br>            <span class="hljs-keyword">if</span> (f[j] + w[i] &gt; f[j+v[i]]) &#123;<br>                f[j+v[i]] = f[j] + w[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>], w[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>], g[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值、组中数量</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 分组背包</span><br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-comment">// 当前是第i组中的第k个物品</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; g[i]; k++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt; v[i][k]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-comment">// f[i][j] = max(f[i-1][j-v[i][k]] + w[i][k])</span><br>                <span class="hljs-comment">// 空间优化后，反向遍历体积才能保证 f[i][j] = f[j] “当前轮结果”, f[i-1][j-v[i][k]] = f[j-v[i][k]] “上一轮结果”</span><br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j-v[i][k]] + w[i][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        cin &gt;&gt; g[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; g[i]; j++) &#123;<br>            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>], s[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值、数量</span><br><br><span class="hljs-comment">// 由数量将一个物品分为同一组的多个物品，每组只能选择一个物品，转化为分组背包</span><br><span class="hljs-comment">// 也可以通过二进制优化，将一个物品分为多个物品，转化为01背包</span><br><span class="hljs-comment">// 多重背包的单调队列优化版本见发布的一篇博客，专讲这个方法</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 分组背包</span><br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">2010</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-comment">// 当前是第i组中的第k个物品</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i]; k++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt; k*v[i]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-comment">// f[i][j] = max(f[i-1][j-k*v[i]] + k*w[i])</span><br>                <span class="hljs-comment">// 空间优化后，反向遍历体积才能保证 f[i][j] = f[j] “当前轮结果”, f[i-1][j-k*v[i]] = f[j-k*v[i]] “上一轮结果”</span><br>                <span class="hljs-keyword">if</span> (f[j-k*v[i]] + k*w[i] &gt; f[j]) &#123;<br>                    f[j] = f[j-k*v[i]] + k*w[i];<br>                &#125;<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 01背包</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; tv, tw;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-comment">// s[i]二进制分解：s[i] = 1 + 2 + 4 + 8 + ... + 2^m + rest</span><br>        <span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (s[i] &gt;= m) &#123;<br>            tv.<span class="hljs-built_in">push_back</span>(m * v[i]);<br>            tw.<span class="hljs-built_in">push_back</span>(m * w[i]);<br>            s[i] -= m;<br>            m *= <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[i]) &#123;<br>            tv.<span class="hljs-built_in">push_back</span>(s[i] * v[i]);<br>            tw.<span class="hljs-built_in">push_back</span>(s[i] * w[i]);<br>        &#125;<br>    &#125;<br>    N = tv.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">2010</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V - tv[i]; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            f[j+tv[i]] = <span class="hljs-built_in">max</span>(f[j+tv[i]], f[j] + tw[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve2</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>], s[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值、数量</span><br><br><span class="hljs-comment">// 根据类型选择状态转移方式,多重背包转为01背包。</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 混合背包</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; tv, tw, is_01;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-comment">// 多重背包二进制分解：s[i] = 1 + 2 + 4 + 8 + ... + 2^m + rest</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-comment">// 只能用1次</span><br>            tv.<span class="hljs-built_in">push_back</span>(v[i]);<br>            tw.<span class="hljs-built_in">push_back</span>(w[i]);<br>            is_01.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 可用无限次</span><br>            tv.<span class="hljs-built_in">push_back</span>(v[i]);<br>            tw.<span class="hljs-built_in">push_back</span>(w[i]);<br>            is_01.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 可用s[i]次</span><br>            <span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (s[i] &gt;= m) &#123;<br>                tv.<span class="hljs-built_in">push_back</span>(m * v[i]);<br>                tw.<span class="hljs-built_in">push_back</span>(m * w[i]);<br>                is_01.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>                s[i] -= m;<br>                m *= <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s[i]) &#123;<br>                tv.<span class="hljs-built_in">push_back</span>(s[i] * v[i]);<br>                tw.<span class="hljs-built_in">push_back</span>(s[i] * w[i]);<br>                is_01.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    N = tv.<span class="hljs-built_in">size</span>();<br>    <br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">1010</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">if</span> (is_01[i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= tv[i]; j--) &#123;<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j-tv[i]] + tw[i]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v[i]; j &lt;= V; j++) &#123;<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j-tv[i]] + tw[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> f[V];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维体积费用背包"><a href="#二维体积费用背包" class="headerlink" title="二维体积费用背包"></a>二维体积费用背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, V, M;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], m[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、重量、价值</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 二维体积费用背包</span><br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= v[i]; j--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = M; k &gt;= m[i]; k--) &#123;<br>                f[j][k] = <span class="hljs-built_in">max</span>(f[j][k], f[j-v[i]][k-m[i]] + w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[V][M];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V &gt;&gt; M;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; m[i] &gt;&gt; w[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="背包问题求方案数"><a href="#背包问题求方案数" class="headerlink" title="背包问题求方案数"></a>背包问题求方案数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">1010</span>], g[<span class="hljs-number">1010</span>]; <span class="hljs-comment">// f[i]体积恰好为i的最大价值, g[i]体积恰好为i取得最大价值的方案数</span><br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(g));<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    g[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = V; j &gt;= v[i]; j--) &#123;<br>            <span class="hljs-keyword">if</span> (f[j] == f[j-v[i]] + w[i]) &#123;<br>                g[j] = (g[j] + g[j-v[i]]) % mod;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f[j] &lt; f[j-v[i]]+w[i]) &#123;<br>                f[j] = f[j-v[i]] + w[i];<br>                g[j] = g[j-v[i]];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> res = *<span class="hljs-built_in">max_element</span>(f, f + V + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>        <span class="hljs-keyword">if</span> (f[i] == res) &#123;<br>            cnt = (cnt + g[i]) % mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="背包求具体方案"><a href="#背包求具体方案" class="headerlink" title="背包求具体方案"></a>背包求具体方案</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> N, V;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">1010</span>], w[<span class="hljs-number">1010</span>];  <span class="hljs-comment">// 体积、价值</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>]; <span class="hljs-comment">// 求具体方案使用二维dp逆推</span><br>    <span class="hljs-comment">// 为了逆推保证字典序，我们反向枚举物品</span><br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(f));<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= V; j++) &#123;<br>            f[i][j] = f[i+<span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= v[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i+<span class="hljs-number">1</span>][j-v[i]] + w[i]);<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-comment">// 逆推</span><br>        <span class="hljs-keyword">if</span> (V &gt;= v[i]) &#123;<br>            <span class="hljs-keyword">if</span> (f[i][V] == f[i+<span class="hljs-number">1</span>][V-v[i]] + w[i]) &#123;<br>                cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                V -= v[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; V;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-9</title>
    <link href="/2021/07/22/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-9/"/>
    <url>/2021/07/22/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-9/</url>
    
    <content type="html"><![CDATA[<h2 id="图像分割-转载"><a href="#图像分割-转载" class="headerlink" title="图像分割(转载)"></a>图像分割(转载)</h2><h3 id="什么是图像分割"><a href="#什么是图像分割" class="headerlink" title="什么是图像分割"></a>什么是图像分割</h3><p>图像分割是计算计视觉研究中的经典难题，已成为图像理解领域关注的一个热点，</p><p>图像分割作为图像技术领域的一个经典难题，自上世纪七十年代以来吸引了众多研究人员的研究热情并为之付出了巨大努力，提出了很多图像分割算法。这些分割算法分割性能的优劣，是用相关图像分割质量测度来进行评价的。但由于对算法分割是否成功的客观判定标准至今未得到解决，因此图像分割算法分割质量得评价成为一项颇具研究意义的课题。有关图像分割评价的方法已有少数的初步探讨，但目前仍未有很好的归纳和整理。这不仅和图像分割技术的研究应用现状不相称，也不利于图像分割技术的发展。</p><p>图像分割是图像分析的第一步，是计算机视觉的基础，是图像理解的重要组成部分，同时也是图像处理中最困难的问题之一。所谓图像分割是指根据灰度、彩色、空间纹理、几何形状等特征把图像划分成若干个互不相交的区域，使得这些特征在同一区域内表现出一致性或相似性，而在不同区域间表现出明显的不同。简单的说就是在一副图像中，把目标从背景中分离出来。对于灰度图像来说，区域内部的像素一般具有灰度相似性，而在区域的边界上一般具有灰度不连续性。 关于图像分割技术，由于问题本身的重要性和困难性，从20世纪70年代起图像分割问题就吸引了很多研究人员为之付出了巨大的努力。虽然到目前为止，还不存在一个通用的完美的图像分割的方法，但是对于图像分割的一般性规律则基本上已经达成的共识，已经产生了相当多的研究成果和方法。</p><p>图像分割是指将图像中感兴趣区域（ROI）的边界找到，使得边界内部和外部的像素分别具备相似的特征（强度、纹理等）。医学图像分割是对医学图像进行其他后续处理的基础。对图像中目标区域的准确分割对于计算机辅助诊断、制订手术计划、目标3维重建以及放射性治疗评价等都具有重要意义。近几十年来，随着医学成像设备的不断完善，医学图像的分割算法也层出不穷，但是很少能够在临床上得到广泛应用。用一个全面的医学图像数据集合来客观评价医学图像分割算法是将该算法向临床应用推进的关键一步</p><hr><h3 id="常用的图像分割方法"><a href="#常用的图像分割方法" class="headerlink" title="常用的图像分割方法"></a>常用的图像分割方法</h3><h4 id="基于边缘检测"><a href="#基于边缘检测" class="headerlink" title="基于边缘检测"></a>基于边缘检测</h4><p>基于边缘检测的分割方法试图通过检测包含不同区域的边缘来解决分割问题，它可以说是人们研究的最多的方法之一。通常不同的区域之间的边缘上像素灰度值的变化往往比较剧烈，这是边缘检测方法得以实现的主要假设之一。边缘检测方法一般利用图像一阶导数的极大值或二阶导数的过零点信息来提供判断边缘点的基本依据。</p><p>边缘检测技术通常可以按照处理的技术分为串行边缘检测和并行边缘检测。串行边缘检测是要想确定当前像素点是否属于检测边缘上的一点，取决于先前像素的验证结果。并行边缘检测是一个像素点是否属于检测边缘上的一点取决于当前正在检测的像素点以及与该像素点的一些相邻像素点。</p><p>最简单的边缘检测方法是并行微分算子法，它利用相邻区域的像素值不连续的性质，采用一阶或二阶导数来检测边缘点。近年来还提出了基于曲面拟合的方法、基于边界曲线拟合的方法、基于反应-扩散方程的方法、串行边界查找、基于变形模型的方法。</p><p>常用的一阶导数算子有梯度算子、Prewitt算子和Sobel算子。二阶导数算子有Laplacian算子、Kirsch算子和Wallis算子。</p><p>虽然边缘检测的优点是边缘定位准确、运算速度快，但它有两大难点限制了其在图像分割中的应用，即：<br>a、不能保证边缘的连续性和封闭性；<br>b、在高细节区存在大量的碎边缘，难以形成一个大区域，但是又不宜将高细节区分为小碎片。<br>由于上述两个难点，因此无论采用什么方法，单独的边缘检测只能产生边缘点，而不是完整意义上的图像分割过程。这也就是说，边缘点信息需要后续处理或与其它相关算法相结合，才能完成分割任务。常用的方法是边缘生长技术最大程度的保证边缘的封闭性，或用有向势能函数（DPF）将有缺口的两边缘强制连接，得到封闭边缘图。</p><p>在未来的研究中，用于提取初始边缘点的自适应阀值选取、用于图像的层次分割的更大区域的选取以及如何确认重要边缘以去除假边缘将变得非常重要。</p><hr><h4 id="基于阈值"><a href="#基于阈值" class="headerlink" title="基于阈值"></a>基于阈值</h4><p>阀值分割法是一种传统的图像分割方法，因其实现简单、计算量小、性能较稳定而成为图像分割中最基本和应用最广泛的分割技术。阀值分割法的基本原理是通过设定不同的特征阀值，把图像像素点分为具有不同灰度级的目标区域和背景区域的若干类。它特别适用于目标和背景占据不同灰度级范围的图，目前在图像处理领域被广泛应用，其中阀值的选取是图像阀值分割中的关键技术。</p><p>灰度阀值分割方法是一种最常用的并行区域技术，是图像分割中应用数量最多的一类。图像若只用目标和背景两大类，那么只需要选取一个阀值，此分割方法称为单阀值分割。</p><p>在很多情况下，目标物体和背景的对比度在图像的不同位置并不是一样的，这是如果用一个统一的单阀值将目标与背景分开，效果是不理想的。如果根据图像的局部特征分别用不同的阀值对图像进行分割，即局部阀值分割，则效果要比单阀值分割要好得多。</p><p>阀值分割方法的优点是图像分割的速度快，计算简单，效率较高。但是这种方法只考虑像素点灰度值本身的特征，一般不考虑空间特征，因此对噪声比较敏感。虽然目前出现了各种基于阀值分割的改进算法，图像分割的效果有所改进，但在阀值的设置上还是没有很好的解决方法，若将智能遗传算法应用在阀值筛选上，选取能最优分割图像的阀值，这可能是基于阀值分割的图像分割法的发展趋势。</p><hr><h4 id="基于区域"><a href="#基于区域" class="headerlink" title="基于区域"></a>基于区域</h4><p>基于区域的分割方法是以直接寻找区域为基础的分割技术，具体算法有区域生长和区域分离与合并算法。基于区域提取方法有两种基本形式：一种是区域生长，从单个像素出发，逐步合并以形成所需要的分割区域；另一种是从全局出发，逐步切割至所需的分割区域。</p><p>区域生长是串行区域技术，其分割过程后续步骤的处理要根据前面步骤的结果进行判断而确定。常见的区域生长算法包括：同伦的区域生长方式、对称区域生长方式和模糊连接度方法与区域生长相结合等算法。</p><p>区域生长的基本思想是将具有相似性质的像素集合起来构成区域。具体是先对每个需要分割的区域找一个种子像素点作为生长的起点，然后将种子像素周围领域中与种子像素有相同或相似性质的像素合并到种子像素所在的区域中。将这些新像素当作新的种子像素继续进行上面的过程，直到再没有满足条件的像素可被包括进来。这样一个区域就长成了。</p><p>区域生长的优点是计算简单，对于较均匀的连通目标有较好的分割效果。它的缺点是需要人为的选取种子，对噪声较敏感，可能会导致区域内有空洞。另外它是一种串行算法，当目标较大时分割速度较慢，因此在算法设计时应尽量提高运行效率。</p><p>区域生长是从某个或者某些像素点出发，最后得到整个区域，进而实现目标的提取。而分裂合并可以说是区域生长的逆过程。它是从整个图像出发，不断分裂得到各个子区域，然后再把前景区域合并，得到前景目标，继而实现目标的提取。分裂合并的假设是对于一幅图像，前景区域是由一些相互连通的像素组成的，因此如果把一幅图像分裂到像素级，那么就可以判定该像素是否为前景像素。当所有像素点或者子区域完成判断以后，把前景区域或者像素合并就可以得到前景目标。</p><p>在实际应用中，通常是将区域生长算法和区域分裂合并算法这两种基本形式结合使用。该类算法对某些复杂物体定义的复杂场景的分割或者对某些自然景物的分割等类似先验知识不足的图像分割，效果较为理想。</p><hr>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互斥锁、信号量、自旋锁</title>
    <link href="/2021/07/21/%E4%BA%92%E6%96%A5%E9%94%81%E3%80%81%E4%BF%A1%E5%8F%B7%E9%87%8F%E3%80%81%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <url>/2021/07/21/%E4%BA%92%E6%96%A5%E9%94%81%E3%80%81%E4%BF%A1%E5%8F%B7%E9%87%8F%E3%80%81%E8%87%AA%E6%97%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="互斥锁mutex、信号量semaphore、自旋锁spin-lock"><a href="#互斥锁mutex、信号量semaphore、自旋锁spin-lock" class="headerlink" title="互斥锁mutex、信号量semaphore、自旋锁spin_lock"></a>互斥锁mutex、信号量semaphore、自旋锁spin_lock</h3><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p>自旋锁是忙等的，当没有可用的锁时，就一直忙等待并不停的进行锁请求，直到得到这个锁为止。这个过程中cpu始终处于尝试加锁状态，不能做别的任务。</p><p>自旋锁的实现是为了保护一段短小的临界区操作代码，保证这个临界区的操作是原子的，从而避免并发的竞争冒险。</p><p>使用内核自旋锁需要阻止在代码运行过程中出现的任何并发干扰。这些“干扰”包括： 中断，包括硬件中断和软件中断 （仅在中断代码可能访问临界区时需要）,内核抢占（仅存在于可抢占内核中）,其他处理器对同一临界区的访问 （仅SMP系统）</p><p>自旋锁需要在<code>芯片底层实现CAS原子操作，提供相应的汇编指令操作。</code></p><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p>当对利用<code>CAS原子操作对互斥锁进行加锁时，如果加锁失败， 则将当前线程加入这个锁的等待队列中，线程状态切换为阻塞态</code>。当其他获得锁的线程释放锁时，可以根据策略唤醒一个或者多个该锁的等待队列中的线程，将其切换为就绪态。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">cond</span>.wait(mutex)时，对mutex加锁，若加锁失败则在<span class="hljs-keyword">cond</span>中的等待队列中插入该线程。<span class="hljs-keyword">cond</span>析构时唤醒阻塞的线程。<br>mutex.lock()时，对mutex加锁，若加锁失败则在mutex中的等待队列中插入该线程。mutex.unlock()时，释放mutex的锁，唤醒mutex的等待队列中的线程。<br></code></pre></td></tr></table></figure><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><p>信号量是互斥锁的进步，Semaphore=1时可以看成互斥锁。</p>]]></content>
    
    
    <categories>
      
      <category>同步和互斥</category>
      
      <category>锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>同步和互斥</tag>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能指针</title>
    <link href="/2021/07/20/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2021/07/20/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h4 id="上一节的一点补充"><a href="#上一节的一点补充" class="headerlink" title="上一节的一点补充"></a>上一节的一点补充</h4><p>左值引用和右值引用</p><p>左值引用就是对一个左值进行引用的类型。右值引用就是对一个右值进行引用的类型，事实上，由于右值通常不具有名字，我们也只能通过引用的方式找到它的存在。</p><p>右值引用和左值引用都是属于引用类型。无论是声明一个左值引用还是右值引用，都必须立即进行初始化。<br>而其原因可以理解为是引用类型本身自己并不拥有所绑定对象的内存，只是该对象的一个别名。左值引用是具名变量值的别名，而右值引用则是不具名（匿名）变量的别名。</p><p>左值引用通常也不能绑定到右值，但常量左值引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。：<br>不过常量左值所引用的右值在它的“余生”中只能是只读的。相对地，非常量左值只能接受非常量左值对其进行初始化。</p><hr><p>C++ 11中定义了unique_ptr、shared_ptr与weak_ptr三种智能指针(smart pointer)，都包含在&lt;memory&gt;头文件中。<br>智能指针可以对动态分配的资源进行管理(RAII)，保证任何情况下，已构造的对象最终会销毁，即它的析构函数最终会被调用。</p><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p>unique_ptr<br>独占指针,默认构造是一个空指针.<br>既然是独占,那么必然没有拷贝构造和赋值构造.支持移动构造(右值赋值,原指针变为空指针)<br>任何时刻,只有一个指针指向对应的内存.<br>get()返回控制的指针<br>release()释放控制权,变为空指针.返回前面控制的指针<br>reset(ptr = nullptr)释放内存,并转而控制新内存ptr<br>可以使用模板的第二个参数来自定义该指针析构时的删除函数，该删除器可以是任意的可调用对象</p><hr><h3 id="shared-Ptr"><a href="#shared-Ptr" class="headerlink" title="shared_Ptr"></a>shared_Ptr</h3><p>shared_ptr<br>共享指针,默认构造是一个空指针(引用计数为0)<br>既然是共享,那么必然存在拷贝构造和赋值构造.支持移动构造(右值赋值,原指针变为空指针,引用计数减一)<br>任何时刻,所有指针指向指向同一块内存<br>多个该智能指针共享“拥有”同一堆分配对象的内存通过引用计数（reference counting）实现，会记录有多少个shared_ptr共同指向一个对象，<br>一旦最后一个这样的指针被销毁，也就是一旦某个对象的引用计数变为0，这个对象就会被自动删除。<br>get()返回控制的指针<br>use_count()返回指向对象内存的引用计数<br>reset(ptr = nullptr)使当前指向对象的引用计数减一,并转而控制新内存ptr并重新计数(新的根节点),因为参数是指针类型,不知道该指针指向的对象有多少引用计数.<br>unique()如果当前引用计数为1则返回true,否则返回false<br>owner_before()暂时不太了解，貌似是为了防止重复析构</p><p>注意<br><b>不要使用一个原始指针去初始化多个shared_ptr。（想一想析构！下面的代码中有这种现象，你能找出来吗）</b><br><b>不要再函数参数实参中创建shared_ptr</b><br>f(shared_ptr&lt;int&gt;(new int), g());<br>上面的函数中写法是有缺陷的。这是因为C++的参数计算顺序在不同的编译器不同的调用约定下可能是不一样的，一般是从右到左，但是也有可能是从左到右，所以，可能的过程是先new int，然后调用g()。但是如果恰好g()发生了异常，而shared_ptr&lt;int&gt;还没有创建，则int内存就泄露了，正确的写法应该是这样的<br><b>不要包裹this指针，参考第一点</b><br><b>避免循环引用，见下面weak_ptr</b></p><hr><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p>weak_ptr(用来解决shared_ptr循环引用的问题)<br>弱引用指针，默认构造是一个空指针。<br>weak_ptr是为配合shared_ptr而引入的一种智能指针来协助shared_ptr工作，它可以从一个shared_ptr或另一个weak_ptr对象构造(默认构造为空指针)<br>weak_ptr构造和析构不会引起引用计数的增加或减少。<br>没有重载 *和 -&gt; 符号!!!向shared_ptr指针指向的对象内存，却并不拥有该内存,可以使用lock获得一个可用的shared_ptr对象,并且在所指对象内存已经无效时，返回指针空值nullptr。<br>weak_ptr并不拥有资源的所有权，所以不能直接使用资源。 但却可以从一个weak_ptr构造一个shared_ptr以取得共享资源的所有权(lock)。<br>weak_ptr中只有函数lock和expired两个函数比较重要，因为它本身不会增加引用计数，所以它指向的对象可能在它用的时候已经被释放了，<br>因此在用之前需要使用expired函数来检测是否过期，然后使用lock函数来获取其对应的shared_ptr对象</p><p>weak_ptr一般应用场景<br><b>解决shared_ptr循环引用的问题</b><br><b>缓存对象</b></p><p>1、考虑一个工厂函数loadWidget，该函数基于唯一ID来创建一些指向只读对象的智能指针。</p><p>2、假设该只读对象需要被频繁使用，而且经常需要从文件或数据库中加载。那么可以考虑将对象缓存起来。同时为了避免过量缓存，当不再使用时，则将该对象删除。</p><p>3、由于带缓存，工厂函数返回unique_ptr类型显然不合适。因为调用者和缓存管理器均需要一个指向这些对象的指针。</p><p>4、当用户用完工厂函数返回的对象后，该对象会被析构，此时相应的缓存条目将会空悬。因为可以考虑将工厂函数的返回值设定为shared_ptr类型，而缓存类型为weak_ptr类型。</p><p><b>观察者模式</b></p><p>5、观察者模式是在subject状态发生改变时，通知观察者的一种设计模式。</p><p>6、在多数实现中，每个subject持有指向观察者的指针，这使得当subject状态改变时可以很容易通知观察者。</p><p>7、subject不会控制其观察者的生存期，因此应该是持有观察者的weak_ptr指针。同时在subject的使用某个指针时，可以先确定是否空悬。</p><p><b>依赖注入，控制反转</b></p><p>8、考虑到一个具体类对另一个类有依赖，可将该依赖设置为weak_ptr，将控制权交给对方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span>&#123;</span><br>    shared_ptr&lt;A&gt; sp;<br>    ~<span class="hljs-built_in">B</span>()&#123; cout &lt;&lt; <span class="hljs-string">&quot;B析构&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;  <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C</span>&#123;</span><br>    weak_ptr&lt;A&gt; wp;<br>    ~<span class="hljs-built_in">C</span>()&#123; cout &lt;&lt; <span class="hljs-string">&quot;C析构&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    shared_ptr&lt;B&gt; spb;<br>    shared_ptr&lt;C&gt; spc;<br>    ~<span class="hljs-built_in">A</span>()&#123; cout &lt;&lt; <span class="hljs-string">&quot;A析构&quot;</span> &lt;&lt; endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">auto</span> my_deleter = [](A* _pa)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;my lambda deleter called&quot;</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> _pa;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fake_deleter</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(A* _pa)</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;my fake func deleter called&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">delete</span> _pa;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func_deleter</span><span class="hljs-params">(A* _pa)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;my func deleter called&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> _pa;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">// int _;</span><br>    <span class="hljs-comment">// const int &amp;__ = _;   # 常量左值引用绑定到常量左值，OK</span><br>    <span class="hljs-comment">// const int &amp;___ = 2;  # 常量左值引用绑定到右值，OK</span><br><br>    &#123;<br><br>        <span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">up1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">3</span>))</span></span>;<br>        <span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">up2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">5</span>))</span></span>;<br><br>        up2 = <span class="hljs-built_in">move</span>(up1); <span class="hljs-comment">// OK</span><br><br>        <span class="hljs-comment">// cout &lt;&lt; *up1 &lt;&lt; endl;  // 运行时错误.因为up1变成了空指针</span><br>        cout &lt;&lt; *up2 &lt;&lt; endl;     <span class="hljs-comment">// 3</span><br><br>        <span class="hljs-comment">// 可使用make_unique&lt;typename&gt;(args)模板函数来避免显式new</span><br><br>        <span class="hljs-comment">// RVO (return value optimization) 和NRVO (named return value optimization)</span><br>        <span class="hljs-comment">// 是C++在处理一个函数返回类对象并将返回值赋给另一个对象时，为了减少拷贝构造次数以及析构次数而采用的一种编译器优化技术。</span><br>        <span class="hljs-comment">// 例如 TYPE instance = func_return_instance(); 为了避免TYPE的拷贝,最后这里将函数返回值(右值)使用move赋值给instance.</span><br><br>        cout &lt;&lt; is_same&lt;unique_ptr&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">decltype</span>(make_unique&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>))&gt;::value &lt;&lt; endl;    <span class="hljs-comment">// true</span><br>        cout &lt;&lt; is_same&lt;unique_ptr&lt;<span class="hljs-keyword">int</span>&gt;&amp;&amp;, <span class="hljs-keyword">decltype</span>(make_unique&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3</span>))&gt;::value &lt;&lt; endl;  <span class="hljs-comment">// false. 因为函数返回的是unique&lt;int&gt;类型的右值,等到赋值时才转为了右值引用</span><br><br>        <span class="hljs-comment">// 猜测:编译时检测到make_unique&lt;int&gt;(5)是右值.或者说unique&lt;typename&gt;只能用右值赋值(移动move就是将类型转为右值)</span><br>        <span class="hljs-comment">// unique_ptr&lt;int&gt; up3 = make_unique&lt;int&gt;(5);  // Ok</span><br>        <span class="hljs-keyword">auto</span> up3 = make_unique&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">5</span>);                <span class="hljs-comment">// Ok, 这也是非常正确使用make_unique的例子</span><br><br><br>        cout &lt;&lt; *up3 &lt;&lt; endl;    <span class="hljs-comment">// 5</span><br><br>        <span class="hljs-keyword">int</span>* temp;<br>        cout &lt;&lt; up3.<span class="hljs-built_in">get</span>() &lt;&lt; endl;                <span class="hljs-comment">// int*</span><br>        cout &lt;&lt; (temp = up3.<span class="hljs-built_in">release</span>()) &lt;&lt; endl;   <span class="hljs-comment">// int*</span><br>        cout &lt;&lt; up3.<span class="hljs-built_in">get</span>() &lt;&lt; endl;                <span class="hljs-comment">// nullptr</span><br>        <span class="hljs-comment">// cout &lt;&lt; *up3 &lt;&lt; endl;                  // error</span><br>        <span class="hljs-keyword">delete</span> temp;                              <span class="hljs-comment">// OK</span><br><br>        <span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">up4</span><span class="hljs-params">(move(up2))</span></span>;           <span class="hljs-comment">// OK</span><br>        up4.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">9</span>));                    <span class="hljs-comment">// OK</span><br>        up4.<span class="hljs-built_in">reset</span>(up1.<span class="hljs-built_in">get</span>());                     <span class="hljs-comment">// OK</span><br><br>        <span class="hljs-keyword">auto</span> up5 = unique_ptr&lt;A, fake_deleter&gt;(<span class="hljs-keyword">new</span> A);                          <span class="hljs-comment">// my fake func deleter called</span><br>        <span class="hljs-keyword">auto</span> up6 = unique_ptr&lt;A, <span class="hljs-keyword">decltype</span>(my_deleter)&gt;(<span class="hljs-keyword">new</span> A, my_deleter);      <span class="hljs-comment">// my lambda deleter called</span><br>        <span class="hljs-comment">// auto up7 = unique_ptr&lt;A, decltype(func_deleter)&gt;(new A, func_deleter);  // ERROR</span><br>        <span class="hljs-keyword">auto</span> up8 = unique_ptr&lt;A, std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(A*)&gt;&gt;(<span class="hljs-keyword">new</span> A, func_deleter); <span class="hljs-comment">// my func deleter called</span><br><br>    &#125;<br><br>    cout &lt;&lt; endl;<br>    <br>    &#123;<br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; _;<br>        cout &lt;&lt; _.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;      <span class="hljs-comment">// 0</span><br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; __(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>);<br>        cout &lt;&lt; __.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;     <span class="hljs-comment">// 1</span><br><br>        <span class="hljs-function">shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sp1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>))</span></span>;    <span class="hljs-comment">// sp1作为根节点</span><br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; sp2 = sp1;          <span class="hljs-comment">// 可直接赋值</span><br>        <span class="hljs-function">shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sp3</span><span class="hljs-params">(sp2)</span></span>;           <span class="hljs-comment">// 可直接拷贝</span><br><br>        cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl; <span class="hljs-comment">// 3</span><br><br>        <span class="hljs-function">shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sp4</span><span class="hljs-params">(move(sp3))</span></span>;<br><br>        cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl; <span class="hljs-comment">// 3</span><br>        cout &lt;&lt; sp1.<span class="hljs-built_in">get</span>() &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; sp4.<span class="hljs-built_in">get</span>() &lt;&lt; endl; <span class="hljs-comment">// 相同的地址</span><br><br>        <span class="hljs-comment">// sp3 ---&gt; nullptr</span><br>        <span class="hljs-comment">// sp1=sp2=sp4 ---&gt; 1</span><br><br>        sp4.<span class="hljs-built_in">reset</span>(sp2.<span class="hljs-built_in">get</span>());                   <span class="hljs-comment">// sp4将原来管理的对象的引用计数减一,然后指向sp2管理的对象并重新开始计数(sp4作为根节点)</span><br>        <span class="hljs-comment">// sp4 ---&gt; 1</span><br>        <span class="hljs-comment">// sp1=sp2 ---&gt; 1</span><br><br>        cout &lt;&lt; sp4.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>()  &lt;&lt; endl;       <span class="hljs-comment">// 2</span><br>       <br>        <span class="hljs-comment">// 与unique_ptr类似,常用make_shared&lt;typename&gt;(args)模板函数来避免显式new</span><br>        <span class="hljs-keyword">auto</span> sp5 = make_shared&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">9</span>);<br>        cout &lt;&lt; *sp5 &lt;&lt; endl;                   <span class="hljs-comment">// 9</span><br><br><br>        <span class="hljs-comment">// owner_before： 防止重复析构，目前对这个不太熟悉</span><br>        &#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span>&#123;</span><br>                A a;<br>                ~<span class="hljs-built_in">Base</span>()&#123;  cout &lt;&lt; <span class="hljs-string">&quot;Base析构&quot;</span> &lt;&lt; endl;  &#125;<br>            &#125;;<br><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Derive</span>:</span><span class="hljs-keyword">public</span> Base&#123;<br>                ~<span class="hljs-built_in">Derive</span>()&#123; cout &lt;&lt; <span class="hljs-string">&quot;Derive析构&quot;</span> &lt;&lt; endl; &#125;<br>            &#125;;<br><br>            shared_ptr&lt;Derive&gt; pDerive = make_shared&lt;Derive&gt;(); <span class="hljs-comment">// 派生类指针(owner_ptr)</span><br>            <span class="hljs-comment">// shared_ptr&lt;Base&gt; pa(pDerive.get());                 // 基类指针(stored_ptr)指向派生类。(此处用了原始指针，肯定会引发重复析构问题，但直接使用pDerive则相当于增加引用计数)</span><br>            shared_ptr&lt;Base&gt; pa = pDerive;                         <span class="hljs-comment">// OK</span><br><br>            <span class="hljs-comment">// cout &lt;&lt; pDerive.owner_before(pa) &lt;&lt; endl;        // 1     // error 重复析构</span><br>            cout &lt;&lt; pDerive.<span class="hljs-built_in">owner_before</span>(pa) &lt;&lt; endl;        <span class="hljs-comment">// 0</span><br>            cout &lt;&lt; pa.<span class="hljs-built_in">owner_before</span>(pDerive) &lt;&lt; endl;        <span class="hljs-comment">// 0</span><br><br><br>            <span class="hljs-comment">// // 更简单的例子</span><br>            <span class="hljs-comment">// struct Wrapper&#123;</span><br>            <span class="hljs-comment">//     A a;</span><br>            <span class="hljs-comment">// &#125;;</span><br>            <span class="hljs-comment">// auto pWrap = make_shared&lt;Wrapper&gt;();                // owner_ptr</span><br>            <span class="hljs-comment">// // auto pA = make_shared&lt;A&gt;(pWrap-&gt;a);                 // stored_ptr</span><br>            <span class="hljs-comment">// shared_ptr&lt;A&gt; pA(&amp;pWrap-&gt;a);                        // stored_ptr</span><br>            <br>            <span class="hljs-comment">// // 当pA和pWrap析构时都将尝试去对a进行析构: error</span><br>            <span class="hljs-comment">// cout &lt;&lt; pWrap.owner_before(pA) &lt;&lt; endl;             // 1    pA是指向了pWrap中的一个成员</span><br>            <span class="hljs-comment">// cout &lt;&lt; pA.owner_before(pWrap) &lt;&lt; endl;             // 0</span><br><br><br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>    <br>    &#123;<br>        weak_ptr&lt;<span class="hljs-keyword">int</span>&gt; wp1;<br>        cout &lt;&lt; wp1.<span class="hljs-built_in">expired</span>() &lt;&lt; endl;          <span class="hljs-comment">// 1 默认为空指针.即wp1管理的shared_ptr不存在</span><br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; sp1 = wp1.<span class="hljs-built_in">lock</span>();       <span class="hljs-comment">// lock获取指向的共享内存的所有权</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;lock success&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; sp1.<span class="hljs-built_in">get</span>() &lt;&lt; endl;              <span class="hljs-comment">// 0 nullptr</span><br><br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; sp2 = make_shared&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">66</span>);<br>        <span class="hljs-function">weak_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">wp2</span><span class="hljs-params">(sp2)</span></span>;<br><br>        cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1 不增加减少引用计数</span><br>        cout &lt;&lt; *wp2.<span class="hljs-built_in">lock</span>() &lt;&lt; endl;            <span class="hljs-comment">// 66</span><br>        cout &lt;&lt; sp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1 不增加减少引用计数</span><br><br>        <span class="hljs-comment">//（lock可以理解为获取自己管理的shared_ptr对象？即 shared_ptr&lt;int&gt; _ = sp2）</span><br>        shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; _ = wp2.<span class="hljs-built_in">lock</span>();         <span class="hljs-comment">// 赋值构造，这将增加sp2的引用计数，拷贝构造同理。</span><br>        cout &lt;&lt; _.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;          <span class="hljs-comment">// 2 增加引用计数</span><br>        cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 2</span><br><br>        _.<span class="hljs-built_in">reset</span>();                              <span class="hljs-comment">// 减少引用计数</span><br>        cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; sp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br><br><br>        <span class="hljs-comment">// 注意踩雷</span><br>        wp2.<span class="hljs-built_in">lock</span>().<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">77</span>));          <span class="hljs-comment">// 匿名shared_ptr对象指向了77. reset作为新的根节点</span><br>        cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; sp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; *wp2.<span class="hljs-built_in">lock</span>() &lt;&lt; endl;            <span class="hljs-comment">// 66 wp2并没有reset</span><br>        cout &lt;&lt; *sp2 &lt;&lt; endl;                   <span class="hljs-comment">// 66</span><br><br>        wp2.<span class="hljs-built_in">lock</span>().<span class="hljs-built_in">reset</span>(sp1.<span class="hljs-built_in">get</span>());            <span class="hljs-comment">// 匿名shared_ptr对象指向了sp1指向的对象. reset作为新的根节点。同一个地址初始化多个shared_ptr(析构！)</span><br>        cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; sp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>        cout &lt;&lt; *wp2.<span class="hljs-built_in">lock</span>() &lt;&lt; endl;            <span class="hljs-comment">// 66 wp2并没有reset</span><br>        cout &lt;&lt; *sp2 &lt;&lt; endl;                   <span class="hljs-comment">// 66  </span><br><br><br><br>        <span class="hljs-comment">// 循环引用</span><br>        &#123;<br>            <span class="hljs-keyword">auto</span> spB = make_shared&lt;B&gt;();           <span class="hljs-comment">// --&gt;B</span><br>            <span class="hljs-keyword">auto</span> spA = make_shared&lt;A&gt;();           <span class="hljs-comment">// --&gt;A</span><br><br>            spB-&gt;sp = spA;<br>            spA-&gt;spb = spB;<br>            <span class="hljs-comment">// 引用形成环</span><br><br>            cout &lt;&lt; spB.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 2</span><br>            cout &lt;&lt; spA.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 2</span><br>            <span class="hljs-comment">// 因为类内的成员要在类析构的时候才会析构,而类要析构必须要该类的引用计数为0。这就导致矛盾，这两个对象将永远不会被析构，造成了内存泄漏。</span><br>            <span class="hljs-comment">// 程序结束时，析构函数无任何输出，表示这两个对象的确没有被析构！！</span><br>        &#125;<br>        <span class="hljs-comment">// 将其中一个类(C)的成员置为弱引用指针weak_ptr</span><br>        &#123;<br>            <span class="hljs-keyword">auto</span> spC = make_shared&lt;C&gt;();            <span class="hljs-comment">// --&gt;C</span><br>            <span class="hljs-keyword">auto</span> spA = make_shared&lt;A&gt;();            <span class="hljs-comment">// --&gt;A</span><br><br>            spC-&gt;wp = spA;<br>            spA-&gt;spc = spC;<br>            <span class="hljs-comment">// 打破了环，因为环上有一个指针为弱引用指针</span><br><br>            cout &lt;&lt; spC.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 2</span><br>            cout &lt;&lt; spA.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;        <span class="hljs-comment">// 1</span><br>            <span class="hljs-comment">// spA,spC析构，各自引用计数减一</span><br>            <span class="hljs-comment">// spA.use_count() == 0, spC.use_count() == 1</span><br>            <span class="hljs-comment">// A析构</span><br>            <span class="hljs-comment">// A中成员 spc 析构，C引用计数减一</span><br>            <span class="hljs-comment">// spC.use_count() == 0</span><br>            <span class="hljs-comment">// C析构</span><br>        &#125;<br>        <br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>智能指针</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>智能指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>decltype、result_of、auto、declval</title>
    <link href="/2021/07/19/decltype%E3%80%81result-of%E3%80%81auto%E3%80%81declval/"/>
    <url>/2021/07/19/decltype%E3%80%81result-of%E3%80%81auto%E3%80%81declval/</url>
    
    <content type="html"><![CDATA[<h3 id="测试比较decltype、result-of、auto、declval"><a href="#测试比较decltype、result-of、auto、declval" class="headerlink" title="测试比较decltype、result_of、auto、declval"></a>测试比较decltype、result_of、auto、declval</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 左值、右值可以用&amp;来区分，左值具有地址(占内存)，右值没有地址</span><br><span class="hljs-comment">// 左值引用&amp; 右值引用&amp;&amp;</span><br><br><span class="hljs-comment">// decltype</span><br><span class="hljs-comment">// 类型萃取</span><br><span class="hljs-comment">// decltype中的表达式不计算，只是用来根据所给的表达式做类型萃取</span><br><span class="hljs-comment">// 当decltype中给的是变量，则返回的是该变量的类型。</span><br><span class="hljs-comment">// 当decltype中给的是表达式，若表达式是左值，则返回左值引用，否则返回表达式的值类型</span><br><span class="hljs-comment">// 作用于函数名会得到函数类型，不会自动转换成指针</span><br><br><span class="hljs-comment">// result_of</span><br><span class="hljs-comment">// 常用于获取函数返回值类型</span><br><span class="hljs-comment">// 模板参数为类型。而非实例</span><br><span class="hljs-comment">// 当我们不知道某个可调用对象（函数,std::funciton或者仿函数）的返回类型的时候，使用其得到该可调用对象的返回类型；</span><br><br><br><span class="hljs-comment">// auto </span><br><span class="hljs-comment">// 类型推断</span><br><span class="hljs-comment">// 根据值(实例)来推断当前值(实例)的类型</span><br><span class="hljs-comment">// 忽视顶层const，&amp;</span><br><br><span class="hljs-comment">// declval</span><br><span class="hljs-comment">// declval是一个函数模板，函数参数为空，模板参数为一个类型。并且只有申明，没有实现(在gcc 版本中似乎有实现，但是也不能在运行时调用——通过静态断言实现).</span><br><span class="hljs-comment">// 返回模板参数(类型)的一个右值引用(实例),该右值引用(实例)引用的是nullptr,也就是说 int v = declval&lt;int&gt;()将报错</span><br><span class="hljs-comment">// 主要是配合decltype使用,用来绕过类的构造函数 </span><br><br><br><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;type_traits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;   <span class="hljs-comment">// 自定义,返回右值引用</span><br><span class="hljs-function">_Tp&amp;&amp; <span class="hljs-title">my_declval</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">move</span>(*<span class="hljs-keyword">static_cast</span>&lt;_Tp*&gt;(<span class="hljs-literal">nullptr</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func_t</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;  <span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125; <span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(*pFunc)</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(&amp;refFunc)</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//函数引用类型</span><br><br><span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(*pFunc_t)();  <span class="hljs-comment">// 函数指针实例</span><br><span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(&amp;refFunc_t)() = <span class="hljs-keyword">func_t</span>; <span class="hljs-comment">//  函数引用实例, 或者 int(&amp;refFunc_t)()(func_t)</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FakeFunc</span>&#123;</span><br><span class="hljs-comment">// private:</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">float</span>)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PrivateCtor</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">PrivateCtor</span>()&#123; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func_</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">decltype</span>(a) b;                      <span class="hljs-comment">// a是变量，故返回该变量的类型(不会忽视所有const，&amp;)。b是int类型</span><br>    <span class="hljs-keyword">decltype</span>((a)) bb = a;               <span class="hljs-comment">// 双层括号,(a)不是变量而是表达式, 这个表达式的值是左值a，故bb是int&amp;类型，需要初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-title">decltype</span><span class="hljs-params">((a))</span> bbb </span>= a;        <span class="hljs-comment">// int&amp; 加const不管用</span><br><br>    <span class="hljs-keyword">auto</span> bbbb = bb;         <span class="hljs-comment">// auto忽略顶层const, bbbb是int类型</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> bbbbb = a;   <span class="hljs-comment">// 显式指定const，bbbbb是const int类型</span><br><br>    <span class="hljs-keyword">decltype</span>(a + bb) c;         <span class="hljs-comment">// a+b是表达式，而且不是左值，故返回表达式的值类型 int+int&amp; == int，从而c是int类型</span><br>    <span class="hljs-keyword">decltype</span>(a = <span class="hljs-number">1</span>) cc = c;     <span class="hljs-comment">// a = 1是表达式(不计算，a仍然是0)，赋值语句由于不计算就相当于decltype((a))，返回表达式是一个左值a，故cc是int&amp;类型，需要初始化</span><br><br>    <span class="hljs-keyword">auto</span> d = bb;              <span class="hljs-comment">// int            auto忽视顶层&amp;</span><br>    <span class="hljs-keyword">auto</span>&amp; dd = bb;            <span class="hljs-comment">// int&amp;           显式指定&amp;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; ddd = bb;     <span class="hljs-comment">// const int&amp;     显式指定const和&amp;</span><br>    <br>    <br>    &#123;<br>        <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">func</span>(<span class="hljs-number">0</span>)) d;    <span class="hljs-comment">//萃取一个有参函数的返回值时，需给参数传值而不是类型(因为这是一个表达式），不能写成func(int)。 d是int类型</span><br><br>        <span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">func_t</span>) _;     <span class="hljs-comment">// _是函数类型int()的实例,这里就相当于声明函数 int _();</span><br>        _();                    <span class="hljs-comment">// 若main函数后面没有定义这个函数则报错</span><br><br>        <span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">func_t</span>)&amp; __(<span class="hljs-keyword">func_t</span>);  <span class="hljs-comment">// 显式加引用变成函数引用,需要初始化</span><br>        __();<br><br>        <span class="hljs-keyword">decltype</span>((func)) ___(func);  <span class="hljs-comment">// 双层括号,(func)不是变量(int(int)类型的一个实例)而是表达式, 这个表达式的值是左值func(可以取地址)，故___是int(&amp;)(int)类型，需要初始化</span><br>        ___(<span class="hljs-number">0</span>);<br>        <br>        cout &lt;&lt; is_lvalue_reference&lt;<span class="hljs-keyword">decltype</span>((func))&gt;::value &lt;&lt; endl; <span class="hljs-comment">// true</span><br>        <br>        cout &lt;&lt; is_lvalue_reference&lt;<span class="hljs-keyword">decltype</span>(func)&gt;::value &lt;&lt; endl; <span class="hljs-comment">// false</span><br><br>    &#125;<br>    <br>    &#123;<br>        <span class="hljs-comment">// result_of模板参数为类型。而非实例</span><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-keyword">decltype</span>(func)&amp;(<span class="hljs-keyword">int</span>)&gt;::type _;   <span class="hljs-comment">// int  func为实例，用decltype加&amp;获取其引用类型.若不加则报错.(考虑前面的函数声明问题)</span><br>        <span class="hljs-comment">// typename std::result_of&lt;decltype((func))(int)&gt;::type _;   // 同上效果一样</span><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">pFunc</span>()&gt;::type __;               <span class="hljs-comment">// int</span><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">refFunc</span>()&gt;::type ___;            <span class="hljs-comment">// int</span><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">FakeFunc</span>(<span class="hljs-keyword">float</span>)&gt;::type ____;     <span class="hljs-comment">// double</span><br><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">func_t</span>)&amp;()&gt;::type ___________;<br><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-keyword">decltype</span>(refFunc_t)()&gt;::type _____; <span class="hljs-comment">// int  refFunc_t为实例，用decltype获取其类型</span><br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-keyword">decltype</span>(pFunc_t)()&gt;::type ______; <span class="hljs-comment">// int  pFunc_t为实例，用decltype获取其类型</span><br><br>        FakeFunc fakeFunc;<br>        <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-keyword">decltype</span>(fakeFunc)(<span class="hljs-keyword">float</span>)&gt;::type _______;  <span class="hljs-comment">// double   fakeFunc为实例，用decltype获取其类型</span><br>        <br>    &#125;<br>    <br>    &#123;<br>        <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">pFunc_t</span>()) _;  <span class="hljs-comment">// int</span><br>        <span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">pFunc</span>()) __;   <span class="hljs-comment">// pFunc  decltype中是变量或者表达式而不是类型！故decltype(pFunc)报错。 pFunc()相当于实例化了一个pFunc类型的值，然后在萃取值类型，就是pFunc类型。</span><br><br>        <span class="hljs-keyword">auto</span> ___ = pFunc_t;    <span class="hljs-comment">//  ___是一个函数指针实例,等号后面不能是类型，auto是根据值(实例)来推断类型。等于auto ___ = pFunc()。</span><br>        <span class="hljs-comment">// ___ = func_t;       // 若不赋值，经测试不报错</span><br>        <span class="hljs-comment">// ___();</span><br><br>    &#125;<br><br>    &#123;<br>        <span class="hljs-keyword">auto</span> lf = []()-&gt;<span class="hljs-keyword">int</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br>        <span class="hljs-keyword">decltype</span>(lf) _(lf); <span class="hljs-comment">// _是lambda函数，必须要初始化。因为lambda函数类型的默认构造函数不存在(delete)</span><br>        <span class="hljs-comment">// _();</span><br>        <span class="hljs-keyword">decltype</span>((lf)) __(lf);  <span class="hljs-comment">// __是一个lambda函数的引用</span><br>        <span class="hljs-comment">// __();</span><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span>&amp;&amp; <span class="hljs-title">n</span><span class="hljs-params">(move(a))</span></span>;  <span class="hljs-comment">// OK</span><br>    n = <span class="hljs-number">6</span>;<br>    cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// 6</span><br><br><br>    <span class="hljs-keyword">decltype</span>(declval&lt;<span class="hljs-keyword">int</span>&gt;()) <span class="hljs-built_in">m</span>(<span class="hljs-built_in">move</span>(a));   <span class="hljs-comment">// OK</span><br>    m = <span class="hljs-number">8</span>;<br>    cout &lt;&lt; a &lt;&lt; endl;                     <span class="hljs-comment">// 8</span><br>    <br>    <span class="hljs-comment">// int t = declval&lt;int&gt;();             // 报错。declval&lt;int&gt;()不能被使用。(编译时错误)</span><br>    <br>    <span class="hljs-comment">// declval&lt;PrivateCtor&gt;().func_(0);       // 报错. declval&lt;PrivateCtor&gt;()不能使用</span><br><br>    <span class="hljs-keyword">decltype</span>(declval&lt;PrivateCtor&gt;().<span class="hljs-built_in">func_</span>(<span class="hljs-number">0</span>)) t;  <span class="hljs-comment">// int decltype不计算表达式,在编译时确定有私有构造函数PrivateCtor的成员函数func_(int)的返回值,所以这条语句能通过,并且这也是declval最常用的用法</span><br><br>    <br>    <br>    <span class="hljs-keyword">decltype</span>(my_declval&lt;<span class="hljs-keyword">int</span>&gt;()) <span class="hljs-built_in">tt</span>(<span class="hljs-built_in">move</span>(a)); <span class="hljs-comment">// OK</span><br>    tt = <span class="hljs-number">10</span>;<br>    cout &lt;&lt; a &lt;&lt; endl;                       <span class="hljs-comment">// 10</span><br><br>    <span class="hljs-keyword">int</span> variable = my_declval&lt;<span class="hljs-keyword">int</span>&gt;();        <span class="hljs-comment">// 没有静态断言不使用该实例，amazing OK。但是程序从这里收到SIGSEGV直接退出了，运行时错误。</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br><br><span class="hljs-keyword">int</span> _()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(unordered_)map/set自定义key</title>
    <link href="/2021/07/18/unordered-map-set%E8%87%AA%E5%AE%9A%E4%B9%89key/"/>
    <url>/2021/07/18/unordered-map-set%E8%87%AA%E5%AE%9A%E4%B9%89key/</url>
    
    <content type="html"><![CDATA[<h2 id="unordered-set、unordered-map自定义键"><a href="#unordered-set、unordered-map自定义键" class="headerlink" title="unordered_set、unordered_map自定义键"></a>unordered_set、unordered_map自定义键</h2><p>需要定义对应key的哈希函数，以及key的等于函数。定义等于函数是因为哈希值出现碰撞时来确定是否是同一个key。<br><code>unordered_map&lt;KEY_CALSS, VALUE_CLASS, HASH_FUNC, EQUAL_FUNC&gt; obj;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">// 方案一，在std中特化哈希函数和等于比较函数</span><br><span class="hljs-comment">// namespace std&#123;</span><br><span class="hljs-comment">//     template&lt;&gt;</span><br><span class="hljs-comment">//     struct hash&lt;vector&lt;int&gt;&gt;&#123;</span><br><span class="hljs-comment">//         size_t operator()(const vector&lt;int&gt;&amp; v) const &#123;</span><br><span class="hljs-comment">//             return v.size();</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     &#125;;</span><br><br><span class="hljs-comment">//     // 因为vector&lt;int&gt;本来就有==运算，在模板中可以直接进行lhs==rhs比较，因此不用特化也行</span><br><span class="hljs-comment">//     template&lt;&gt;</span><br><span class="hljs-comment">//     struct equal_to&lt;vector&lt;int&gt;&gt;&#123;</span><br><span class="hljs-comment">//         bool operator()(const vector&lt;int&gt;&amp;lhs, const vector&lt;int&gt;&amp;rhs) const&#123;</span><br><span class="hljs-comment">//             return lhs == rhs;</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     &#125;;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 方案二，自定义函数(一般函数，lambda，仿函数，std::function)可调用对象都行。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eq</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;lhs, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;rhs)</span><span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">size</span>() == rhs.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 方案一</span><br>    <span class="hljs-comment">// unordered_map&lt;vector&lt;int&gt;, vector&lt;string&gt;&gt; hh;</span><br><br>    <span class="hljs-comment">// 方案二：hh后面是实例化hh时所需要的参数(131和可调用对象[哈希],等比函数eq由于是仿函数故不用传递实例)。注意131应该是默认分配含多少个key大小的内存。(自己的CLAVLTree中也用到了allocator)</span><br>    unordered_map&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;, vector&lt;string&gt; , std::function&lt;<span class="hljs-keyword">size_t</span>(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;)&gt;, eq &gt; <span class="hljs-built_in">hh</span>(<span class="hljs-number">131</span>, function&lt;<span class="hljs-built_in">size_t</span>(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;)&gt;([](<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;x)-&gt;<span class="hljs-keyword">size_t</span>&#123;<br>        <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">size</span>();<br>    &#125;));<br><br>    hh[&#123;&#125;].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>    hh[&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;234&quot;</span>);<br>    hh[&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;qws&quot;</span>);<br>    hh[&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;].<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;456&quot;</span>);<br><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c=hh.<span class="hljs-built_in">begin</span>(); c != hh.<span class="hljs-built_in">end</span>(); c++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; x: c-&gt;first) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; y: c-&gt;second) cout &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-8</title>
    <link href="/2021/07/17/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-8/"/>
    <url>/2021/07/17/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-8/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><h3 id="Attention-mechanism"><a href="#Attention-mechanism" class="headerlink" title="Attention mechanism"></a>Attention mechanism</h3><p>步骤：<br>1、计算attention weight: 隐藏状态和encoder的输出encoder_output进行计算(余弦，DNN，矩阵乘法。。。）之后再通过softmax得到<br>2、计算context vector：attention weight和encoder_output进行计算得到<br>3、计算最终结果：把当前的output [batch, 1, hidden_size] 和context vextor拼接，经过变换和tanh处理后的结果作为当前时间步的输出</p><h4 id="soft-attention-和-hard-attention"><a href="#soft-attention-和-hard-attention" class="headerlink" title="soft attention 和 hard attention"></a>soft attention 和 hard attention</h4><p>soft attention在encoder的每一个时间步输出都会计算出一个概率。（常用）<br>hard attention只寻找一个时间步计算概率，认为当前只与那一个时间步相关。（不常用）</p><h4 id="global-attention-和-local-attention"><a href="#global-attention-和-local-attention" class="headerlink" title="global attention 和 local attention"></a>global attention 和 local attention</h4><p>global attention使用encoder的全部时间步上的输入的attention weight<br>local attention使用encoder的部分时间步（如当前时间步上encoder的hidden_state)上的输入的attention weight，以这种方式来减少计算量。</p><hr><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><h4 id="local-attention-Bahdanau-Attention"><a href="#local-attention-Bahdanau-Attention" class="headerlink" title="local attention: Bahdanau Attention"></a>local attention: Bahdanau Attention</h4><h5 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a>encoder</h5><p>使用双向GRU/LSTM编码，将两个方向的output结果拼接起来作为最终结果。</p><h5 id="decoder"><a href="#decoder" class="headerlink" title="decoder"></a>decoder</h5><p>与上一节不同，attention mechanism不再以encoder的最后一个hidden_state来作为decoder的第一个时间步的输入，而是以一个随机初始隐藏状态z0(z0可视为上一次的decoder_hidden_state)来乘以encoder的每个时间步的隐藏状态encoder_hidden_state，从而得到a0, a1, … , a[encoder_hidden_size]。然后将这这些a做softmax，得到attention weight。attention weight与encoder_output进行计算就是context vector，也就是decoder的第一个时间步的输入c1。</p><p>这样一来，接下来的操作就和上一次说的Seq2Seq模型差不多了。有了初始隐藏状态z0，和初始输入c1，很容易得到第一个时间步的输出o1和隐藏状态z1。有了z1之后，与z0类似，z1也分别乘以encoder的每个时间步的隐藏状态encoder_hidden_stateo，从而也能得到a0, a1, … , a[encoder_hidden_size]。然后将这些a做softmax，得到attention weight。attention weight与encoder_output进行计算就是context vector，也就是下一个时间步的输入c2。</p><p>从计算步骤可以看出来，当前时间步的输入需要在计算完attention weight之后得到，于是Bahdanau Attention应该在GRU/LSTM层前面使用。</p><h4 id="global-attention-Luong-Attention"><a href="#global-attention-Luong-Attention" class="headerlink" title="global attention: Luong Attention"></a>global attention: Luong Attention</h4><h5 id="encoder-1"><a href="#encoder-1" class="headerlink" title="encoder"></a>encoder</h5><p>使用单向GRU/LSTM编码，把最后一层的隐藏状态作为最终结果。</p><h5 id="decoder-1"><a href="#decoder-1" class="headerlink" title="decoder"></a>decoder</h5><p>与Bahdanau Attention不同，Luong Attention不是使用decoder上一个时间步的隐藏状态来计算a0, a1, … , a[encoder_hidden_size], 而是使用decoder当前时间步的隐藏状态decoder_hidden_state来进行计算。既然要求先得到当前步的hidden_state，那么Luong Attention应该在GRU/LSTM层后面使用。</p><p>** 他们计算attention weight的方式也不一样 **<br>在Bahdanau Attention中，a[i] = wait_for_training_matrix * tanh(linear_transform_matrix * z, + linear_transform_matrix * encoder_output )<br>在Luong Attention中，使用三种方法来计算权重：<br>    1、dot。直接把 encoder_output * decoder_hidden_state<br>    2、general。先对decoder_hidden_state做线性变换，然后进行矩阵乘法<br>    3、concat。把decoder_hidden_state和encoder_output进行拼接，拼接后通过tanh函数。之后再与encoder_output进行矩阵乘法。</p><hr><p>以上次的seq2seq代码为例，只需要在forward_time_step中增加encoder_output参数即可，因为使用attention需要编码器encoder的输出。<br>然后，就是调用Attention方法获取当前时间步上的编码器权重attention_weight，把权重乘以编码器的输出encoder_output就得到解码器当前时间步的环境context。<br>最后，将LSTM/GRU的输出decoder_output与环境context在最后一维上拼接。为了接下来的计算能够顺利进行，我们需要把拼接后增加的维度用线性变换降下来。这里的self.concat是一个torch.nn.Linear(encoder_hidden_size+decoder_hidden_size, decoder_hidden_size)线性层用来做维度转换。</p><p>从刚才的说明中已经可以看出来:通过attention机制，我们在原先仅仅单独使用decoder_output作为这一个时间步的输出上面，增加了当前时间步的环境context。于是decoder_output中包含了环境信息，也就是说当前时间步的输出要着重注意encoder的哪一些部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当前时间步上的计算,返回改时间步的输出和下一时间步输入的隐藏状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward_time_step</span>(<span class="hljs-params">self, decoder_input, decoder_hidden, encoder_output=<span class="hljs-literal">None</span></span>):</span><br>        decoder_input = self.embedding(decoder_input)  <span class="hljs-comment"># [3, 1, 9]</span><br>        decoder_output, decoder_hidden = self.gru(decoder_input, decoder_hidden)  <span class="hljs-comment"># 如LSTM不传递隐藏状态则会有默认的隐藏状态</span><br>        <span class="hljs-comment"># print(decoder_output.size())  # [3, 1, 6]</span><br>        <span class="hljs-comment"># print(decoder_hidden.size())  # [1, 3, 6]</span><br>        <span class="hljs-comment"># print(encoder_output_size())  # [3, 14, 6]</span><br><br>        <span class="hljs-comment">## 开始attention</span><br>        <span class="hljs-keyword">if</span> encoder_output <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            attention_weight = self.attention(decoder_hidden, encoder_output) <span class="hljs-comment"># [3, 14]</span><br>            context = torch.bmm(attention_weight.unsqueeze(<span class="hljs-number">1</span>), encoder_output) <span class="hljs-comment"># [3, 1, 6]</span><br>            decoder_output = torch.cat((decoder_output, context), dim=-<span class="hljs-number">1</span>)<br><br>        decoder_output = decoder_output.squeeze(dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(decoder_output.size())  # [3, 6] if attention then it will be [3, 6+6]</span><br><br>        <span class="hljs-keyword">if</span> encoder_output <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            decoder_output = self.concat(decoder_output) <span class="hljs-comment"># [3, 6]</span><br><br><br>        decoder_output = self.fc(decoder_output) <span class="hljs-comment">#[3, 100]</span><br><br>        decoder_output = F.log_softmax(decoder_output, dim=-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> decoder_output, decoder_hidden<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br>num_layers = <span class="hljs-number">1</span><br>batch = <span class="hljs-number">2</span><br>seq_len = <span class="hljs-number">14</span><br>encoder_hidden_size = <span class="hljs-number">6</span><br>decoder_hidden_size = <span class="hljs-number">6</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LuongAttention</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, method=<span class="hljs-string">&quot;dot&quot;</span></span>):</span><br>        <span class="hljs-built_in">super</span>(LuongAttention, self).__init__()<br>        <span class="hljs-keyword">assert</span> method <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;concat&quot;</span>, <span class="hljs-string">&quot;general&quot;</span>], <span class="hljs-string">&quot;method error&quot;</span><br>        self.method = method<br><br>        <span class="hljs-keyword">if</span> self.method == <span class="hljs-string">&quot;concat&quot;</span>:<br>            self.wa = nn.Linear(encoder_hidden_size+decoder_hidden_size, decoder_hidden_size, bias=<span class="hljs-literal">False</span>)<br>            self.va = nn.Parameter(torch.FloatTensor(batch, decoder_hidden_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">else</span>:<br>            self.wa = nn.Linear(encoder_hidden_size, decoder_hidden_size, bias=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, hidden_state, encoder_output</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        看大部分网上的资料，好像默认encoder_hidden_size == decoder_hidden_size.</span><br><span class="hljs-string">        这样的话dot方法就可以直接进行批量矩阵乘法，general的转换矩阵则是一个方阵</span><br><span class="hljs-string"></span><br><span class="hljs-string">        但是，这里我假设encoder_hidden_size != decoder_hidden_size。如此一来general和dot就没有差别了。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param hidden_state: [num_layer*factor, batch, decoder_hidden_size]</span><br><span class="hljs-string">        :param encoder_output: [batch, seq_len, encoder_hidden_size*factor]  batch_first=True</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-comment"># 1、dot</span><br>        <span class="hljs-keyword">if</span> self.method == <span class="hljs-string">&quot;dot&quot;</span>:<br>            hidden_state = hidden_state[-<span class="hljs-number">1</span>, :, :].unsqueeze(<span class="hljs-number">2</span>) <span class="hljs-comment"># [batch, decoder_hidden_size, 1]</span><br>            encoder_output = self.wa(encoder_output) <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br><br>            attention_weight = torch.bmm(encoder_output, hidden_state)  <span class="hljs-comment"># [batch, seq_len, 1]</span><br><br>            attention_weight = attention_weight.squeeze(-<span class="hljs-number">1</span>)<br>            attention_weight = F.softmax(attention_weight, dim=-<span class="hljs-number">1</span>)   <span class="hljs-comment"># [batch, seq_len]</span><br><br>        <span class="hljs-comment"># 2、general</span><br>        <span class="hljs-keyword">elif</span> self.method == <span class="hljs-string">&quot;general&quot;</span>:<br>            hidden_state = hidden_state[-<span class="hljs-number">1</span>, :, :].unsqueeze(<span class="hljs-number">2</span>)  <span class="hljs-comment"># [batch, encoder_hidden_size, 1]</span><br>            encoder_output = self.wa(encoder_output)  <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br><br>            attention_weight = torch.bmm(encoder_output, hidden_state) <span class="hljs-comment"># [batch, seq_len, 1]</span><br><br>            attention_weight = attention_weight.squeeze(-<span class="hljs-number">1</span>)<br>            attention_weight = F.softmax(attention_weight, dim=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># [batch, seq_len]</span><br>        <span class="hljs-comment"># 3、concat</span><br>        <span class="hljs-keyword">else</span>:<br>            hidden_state = hidden_state.transpose(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-comment"># [batch, num_layers*factor, decoder_hidden_size]</span><br>            hidden_state = hidden_state.expand(-<span class="hljs-number">1</span>, encoder_output.size(<span class="hljs-number">1</span>), -<span class="hljs-number">1</span>) <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br><br>            attention_weight = torch.cat((hidden_state, encoder_output), dim=<span class="hljs-number">2</span>)  <span class="hljs-comment"># [batch, seq_len, encoder_hidden_size+decoder_hidden_size]</span><br><br>            attention_weight = self.wa(attention_weight) <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br>            attention_weight = torch.bmm(attention_weight, self.va) <span class="hljs-comment"># [batch, seq_len, 1]</span><br><br>            attention_weight = attention_weight.squeeze(<span class="hljs-number">2</span>) <span class="hljs-comment"># [batch, seq_len]</span><br><br>            attention_weight = torch.tanh(attention_weight)<br>            attention_weight = F.softmax(attention_weight, dim=-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> attention_weight<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BahdanauAttention</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(BahdanauAttention, self).__init__()<br>        self.wa = nn.Linear((encoder_hidden_size*<span class="hljs-number">2</span>)+decoder_hidden_size, decoder_hidden_size, bias=<span class="hljs-literal">False</span>)<br>        self.va = nn.Linear(decoder_hidden_size, <span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, hidden_state, encoder_output</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        通常用Bahdanau Attention时，encoder部分是使用双向RNN的，故这里 factor=2</span><br><span class="hljs-string">        :param hidden_state: [num_layers*factor, batch, decoder_hidden_size]</span><br><span class="hljs-string">        :param encoder_output: [batch, seq_len, encoder_hidden_size*factor]</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        hidden_state = hidden_state[-<span class="hljs-number">1</span>, :, :] <span class="hljs-comment"># [batch, decoder_hidden_size]</span><br><br>        <span class="hljs-comment"># 对decoder的状态重复seq_len次，用来计算和每个encoder状态的相似度</span><br>        hidden_state = hidden_state.unsqueeze(<span class="hljs-number">1</span>).expand(-<span class="hljs-number">1</span>, seq_len, -<span class="hljs-number">1</span>)  <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br><br>        attention_weight = torch.cat((hidden_state, encoder_output), dim=-<span class="hljs-number">1</span>) <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size+encoder_hidden_size*2]</span><br><br>        attention_weight = self.wa(attention_weight) <span class="hljs-comment"># [batch, seq_len, decoder_hidden_size]</span><br>        attention_weight = torch.tanh(attention_weight)<br><br>        attention_weight = self.va(attention_weight) <span class="hljs-comment"># [batch, seq_len, 1]</span><br><br>        attention_weight = attention_weight.squeeze(-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> attention_weight<br><br><br>p1 = torch.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, size=[num_layers, batch, decoder_hidden_size], dtype=torch.float32)<br>p2 = torch.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, size=[batch, seq_len, encoder_hidden_size], dtype=torch.float32)<br><br>a = LuongAttention(method=<span class="hljs-string">&quot;general&quot;</span>)<br>b = LuongAttention(method=<span class="hljs-string">&quot;concat&quot;</span>)<br>c = BahdanauAttention()<br><br><span class="hljs-built_in">print</span>(a(p1, p2).size()) <span class="hljs-comment"># [batch, seq_len]</span><br><span class="hljs-built_in">print</span>(b(p1, p2).size()) <span class="hljs-comment"># [batch. seq_len]</span><br><br>p2 = torch.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, size=[batch, seq_len, encoder_hidden_size*<span class="hljs-number">2</span>], dtype=torch.float32)<br><br><span class="hljs-built_in">print</span>(c(p1, p2).size()) <span class="hljs-comment"># [batch, seq_len]</span><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-7</title>
    <link href="/2021/07/16/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-7/"/>
    <url>/2021/07/16/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-7/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><p>主要学习torch.nn.utils.rnn.pack_padded_sequence和torch.nn.utils.rnn.pad_packed_sequence这两个API的使用，以及Sequence2Sequence模型的简单使用示例</p><hr><h3 id="pack-padded-sequence和pad-packed-sequence"><a href="#pack-padded-sequence和pad-packed-sequence" class="headerlink" title="pack_padded_sequence和pad_packed_sequence"></a>pack_padded_sequence和pad_packed_sequence</h3><p>当采用RNN训练序列样本数据时，会面临序列样本数据长短不一的情况。比如做NLP任务、语音处理任务时，每个句子或语音序列的长度经常是不相同的。这样的话一条数据一条数据的训练显然是不现实的，<br>为了进行高效的批量处理，一个常用的方法是对所有数据进行填充pad到一个固定的最大长度，然后就可以按照标准批量处理方法来训练网络了。</p><p>然而，加入了pad信息的序列也有明显的缺陷。一方面，它增加了资源消耗；另一方面，pad对于RNN的训练经常会带来不良的影响，因为我们并不关心pad值处的信息，所以pad值过多必然要导致信息的损失&gt;，让我们的RNN学习不到原有的信息。</p><p>为了解决这一问题，PyTorch中提供了pack_padded和pad_packed这两种方式来进行压缩数据和解压数据的转换操作。在对原始数据pad后，可以使用pack_padded_sequence来得到一个压缩pad值的packedSequence对象。而PyTorch的RNN层可以直接接收packedSequence对象作为层参数，同样的，该RNN层的输出仍然是一个压缩的packedSequence对象。要想得到非压缩数据，就要使用PyTorch提供的另一个成对使用<br>的方法pad_packed_sequence来将packedSequence对象转化为tensor。</p><p>下面是一个简单的示例，可以和前面介绍PyTorch的LSTM结合学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">先补齐到相同长度 再压紧</span><br><span class="hljs-string">torch.nn.utils.pack_padded_sequence(input, </span><br><span class="hljs-string">    lengths, </span><br><span class="hljs-string">    batch_first=False, </span><br><span class="hljs-string">    enforce_sorted=True)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">input(Tensor): [T, B, *] == [max_len, batch, embedding_dim], if batch_first= True, then [B, T, *]</span><br><span class="hljs-string">lengths(Tensor or list(int)) ：每个batch中的句子的长度序列，句子长度值的顺序要和对应的输入中的序列顺序一致</span><br><span class="hljs-string">enforce_sorted： 默认值是 True，表示输入已经按句子长度降序排好序。如果输入在 pad 时没有顺序，那么此时在此处需要设置该值为 False,那么函数会再去排序</span><br><span class="hljs-string"></span><br><span class="hljs-string">返回的对象是PackedSequence object。该类型的变量可以作为参数直接传入给RNN/LSTM等。</span><br><span class="hljs-string"></span><br><span class="hljs-string">对压紧后的序列 进行扩充补齐操作</span><br><span class="hljs-string">torch.nn.utils.rnn.pad_packed_sequence(sequence, </span><br><span class="hljs-string">       batch_first=False, </span><br><span class="hljs-string">       padding_value=0.0, </span><br><span class="hljs-string">       total_length=None)</span><br><span class="hljs-string"></span><br><span class="hljs-string">sequence(PackedSequence): 要pad的PackSequence对象</span><br><span class="hljs-string">total_length: pad的最长长度max_len，如果该值比原先pack_padded_sequence小则报错</span><br><span class="hljs-string"></span><br><span class="hljs-string">返回的是一个元组(原先的tensor, 每个batch里面的句子长度列表)</span><br><span class="hljs-string"></span><br><span class="hljs-string">注意：inputs是否排好序和 lengths参数和enforce_sorted 一定要对应起来。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>x = torch.tensor(np.arange(<span class="hljs-number">144</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>)).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># [batch, seq_len, embedding]</span><br><br>x[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>:<span class="hljs-number">6</span> , :] = <span class="hljs-number">0</span>  <span class="hljs-comment"># 假设第二个样本的第4，5个词的embedding是pad来的</span><br>x[<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, :] = <span class="hljs-number">0</span>     <span class="hljs-comment"># 假设第一个样本的第5个词的embedding是pad来的</span><br><br>layer = torch.nn.LSTM(input_size=<span class="hljs-number">8</span>, <br>      hidden_size=<span class="hljs-number">5</span>, <br>      num_layers=<span class="hljs-number">1</span>, <br>      batch_first=<span class="hljs-literal">True</span>)<br><br>y, (h_n, c_n) = layer(x)<br><span class="hljs-comment"># y == output</span><br><br><span class="hljs-built_in">print</span>(y.size())   <span class="hljs-comment">#[3,6,5]</span><br><span class="hljs-built_in">print</span>(h_n.size()) <span class="hljs-comment">#[1,3,5]</span><br><span class="hljs-built_in">print</span>(c_n.size()) <span class="hljs-comment">#[1,3,5]</span><br><br><span class="hljs-built_in">input</span> = torch.nn.utils.rnn.pack_padded_sequence(<span class="hljs-built_in">input</span>=x, <br>lengths=[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>], <br>batch_first=<span class="hljs-literal">True</span>, <br>enforce_sorted=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 返回值packedSequence对象input中包含pad压缩后的该tensor的数据，以及压缩的位置等等其他信息</span><br><br>packedSequence, _ = layer(<span class="hljs-built_in">input</span>)<br><br><span class="hljs-comment"># print(packedSequence)  # packedSequence中包含pad压缩后的数据，以及压缩的位置等等其他信息</span><br><span class="hljs-comment"># _ 和h_n, c_n一样</span><br><br>output, lenlist = torch.nn.utils.rnn.pad_packed_sequence(sequence=packedSequence, batch_first=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># output == y</span><br><br><span class="hljs-built_in">print</span>(output.size())  <span class="hljs-comment"># [3, 6, 5]</span><br><span class="hljs-built_in">print</span>(lenlist)        <span class="hljs-comment"># [5, 4, 6]</span><br><br></code></pre></td></tr></table></figure><h3 id="Seq2Seq模型"><a href="#Seq2Seq模型" class="headerlink" title="Seq2Seq模型"></a>Seq2Seq模型</h3><p>Seq2Seq模型是输出的长度不确定时采用的模型，这种情况一般是在机器翻译的任务中出现，将一句中文翻译成英文，那么这句英文的长度有可能会比中文短，也有可能会比中文长，所以输出的长度就不确定了。</p><p>seq2seq属于encoder-decoder结构的一种，这里看看常见的encoder-decoder结构，基本思想就是利用两个RNN，一个RNN作为encoder，另一个RNN作为decoder。encoder负责将输入序列压缩成指定长度的向量，这个向量就可以看成是这个序列的语义，这个过程称为编码，而decoder则负责根据语义向量生成指定的序列，这个过程也称为解码。</p><h4 id="Teacher-Forcing"><a href="#Teacher-Forcing" class="headerlink" title="Teacher Forcing"></a>Teacher Forcing</h4><p>由于RNN的特性，如果在某一个单元的输出出错了，那么这势必会影响接下来的所有单元的结果，使模型收敛的难度提升。为了应对这一情形，在动态监督学习任务中经常使用的一种有趣的技术是，在计算过程中用教师信号(label)替换上一个单元的实际输出(decoder_output)。我们称这种技术为Teacher Forcing。训练过程中的每个时刻，有一定概率使用上一时刻的输出作为输入，也有一定概率使用正确的label作为输入。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">############################### data and label ###################################</span><br><br><span class="hljs-comment"># 设1是句子结束标志</span><br>END = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 输入为3个长度分别为13， 12， 14的句子</span><br><span class="hljs-comment"># dataset进行 pad 处理</span><br><span class="hljs-built_in">input</span> = torch.randint(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>, size=[<span class="hljs-number">3</span>, <span class="hljs-number">16</span>])<br>input_length = [<span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>]<br><span class="hljs-built_in">input</span>[<span class="hljs-number">0</span>, <span class="hljs-number">14</span>:] = <span class="hljs-number">0</span><br><span class="hljs-built_in">input</span>[<span class="hljs-number">1</span>, <span class="hljs-number">13</span>:] = <span class="hljs-number">0</span><br><span class="hljs-built_in">input</span>[<span class="hljs-number">2</span>, <span class="hljs-number">15</span>:] = <span class="hljs-number">0</span><br><span class="hljs-built_in">input</span>[<span class="hljs-number">0</span>, <span class="hljs-number">14</span>] = END<br><span class="hljs-built_in">input</span>[<span class="hljs-number">1</span>, <span class="hljs-number">13</span>] = END<br><span class="hljs-built_in">input</span>[<span class="hljs-number">2</span>, <span class="hljs-number">15</span>] = END<br><br><span class="hljs-comment"># 输出为3个长度分别为9， 13， 16的句子</span><br><span class="hljs-comment"># dataset进行 pad 处理</span><br>label = torch.randint(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>, size=[<span class="hljs-number">3</span>, <span class="hljs-number">16</span>])<br>label_length = [<span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>]<br>label[<span class="hljs-number">0</span>, <span class="hljs-number">9</span>:] = <span class="hljs-number">0</span><br>label[<span class="hljs-number">1</span>, <span class="hljs-number">13</span>:] = <span class="hljs-number">0</span><br>label[<span class="hljs-number">0</span>, <span class="hljs-number">9</span>] = END<br>label[<span class="hljs-number">1</span>, <span class="hljs-number">13</span>] = END<br><br><span class="hljs-comment">############################### encoder model ####################################</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoder</span>(<span class="hljs-params">torch.nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(Encoder, self).__init__()<br><br>        <span class="hljs-comment"># 假设100是词典的总词数</span><br>        self.embedding = torch.nn.Embedding(num_embeddings=<span class="hljs-number">100</span>, embedding_dim=<span class="hljs-number">9</span>)  <span class="hljs-comment"># [3, 16, 9]</span><br><br>        self.gru = torch.nn.GRU(input_size=<span class="hljs-number">9</span>,<br>                                hidden_size=<span class="hljs-number">6</span>,<br>                                num_layers=<span class="hljs-number">1</span>,<br>                                batch_first=<span class="hljs-literal">True</span><br>                           )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, input_length</span>):</span><br><br>        encoder_input = self.embedding(<span class="hljs-built_in">input</span>)<br>        pad = torch.nn.utils.rnn.pack_padded_sequence(<span class="hljs-built_in">input</span>=encoder_input,<br>                                                      lengths=input_length, <span class="hljs-comment"># [13, 12, 14]</span><br>                                                      batch_first=<span class="hljs-literal">True</span>,<br>                                                      enforce_sorted=<span class="hljs-literal">False</span>)<br><br>        encoder_output, encoder_hidden = self.gru(pad)<br>        <span class="hljs-comment"># print(encoder_hidden.size()) # [1, 3, 6]</span><br><br>        encoder_output, lenlist = torch.nn.utils.rnn.pad_packed_sequence(sequence=encoder_output,<br>                                                                         batch_first=<span class="hljs-literal">True</span>,<br>                                                                         padding_value=<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># print(encoder_output.size())  # [3, 14, 6]</span><br>        <span class="hljs-comment"># print(lenlist)        # [13, 12, 14]</span><br><br>        <span class="hljs-keyword">return</span> encoder_output, encoder_hidden<br><br><span class="hljs-comment">##################################################################################</span><br><br><br><span class="hljs-comment">################################# decoder model ##################################</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decoder</span>(<span class="hljs-params">torch.nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(Decoder, self).__init__()<br>        self.embedding = torch.nn.Embedding(num_embeddings=<span class="hljs-number">100</span>, embedding_dim=<span class="hljs-number">9</span>)  <span class="hljs-comment"># 假设100是词典的总词数</span><br><br>        self.gru = torch.nn.GRU(input_size=<span class="hljs-number">9</span>,<br>                                hidden_size=<span class="hljs-number">6</span>,<br>                                num_layers=<span class="hljs-number">1</span>,<br>                                batch_first=<span class="hljs-literal">True</span><br>                           )<br><br>        self.fc = torch.nn.Linear(in_features=<span class="hljs-number">6</span>, out_features=<span class="hljs-number">100</span>) <span class="hljs-comment"># 假设32是词典的总词数</span><br><br><span class="hljs-comment"># 当前时间步上的计算,返回改时间步的输出和下一时间步输入的隐藏状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward_time_step</span>(<span class="hljs-params">self, decoder_input, decoder_hidden</span>):</span><br>        decoder_input = self.embedding(decoder_input)  <span class="hljs-comment"># [3, 1, 9]</span><br>        decoder_output, decoder_hidden = self.gru(decoder_input, decoder_hidden)  <span class="hljs-comment"># 如LSTM不传递隐藏状态则会有默认的隐藏状态</span><br>        <span class="hljs-comment"># print(decoder_output.size())  # [3, 1, 6]</span><br>        <span class="hljs-comment"># print(decoder_hidden.size())  # [1, 3, 6]</span><br><br>        decoder_output = decoder_output.squeeze(dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">#print(decoder_output.size())  # [3, 6]</span><br><br>        decoder_output = self.fc(decoder_output) <span class="hljs-comment">#[3, 100]</span><br><br>        decoder_output = F.log_softmax(decoder_output, dim=-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> decoder_output, decoder_hidden<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, encoder_hidden, label = <span class="hljs-literal">None</span></span>):</span><br>        y_pred = torch.zeros([<span class="hljs-number">3</span>, <span class="hljs-number">16</span>, <span class="hljs-number">100</span>])  <span class="hljs-comment">#[batch, seq_len, dict_len]</span><br><br>        decode_hidden = encoder_hidden      <span class="hljs-comment"># [1, 3, 6]</span><br>        <span class="hljs-comment"># 1、获取encoder的输出作为decoder第一个时间步的hidden_state输入</span><br><br>        decoder_input = torch.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)).<span class="hljs-built_in">int</span>()<br>        <span class="hljs-comment"># 2、准备decoder第一个时间步的输入，shape为 [batch, 1]。这个tensor是一个开始标志.</span><br><br>        finish = []<br>        <span class="hljs-comment"># 如果是评估模式，则可以考虑 while(True) 碰到 index == END 就退出循环</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>): <span class="hljs-comment"># 句子最长长度为16</span><br>            decoder_output, decoder_hidden = self.forward_time_step(decoder_input=decoder_input,<br>                                                                    decoder_hidden=decode_hidden)<br><br>            <span class="hljs-comment"># print(decoder_output.size()) # [3, 100]</span><br><br>            value, index = torch.topk(decoder_output, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(index.size()) # [3, 1]</span><br><br>    <span class="hljs-keyword">if</span> label <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> random.random() &gt; <span class="hljs-number">0.9</span>:<br>    <span class="hljs-comment"># teacher forcing</span><br>decoder_input = label[:, i].unsqueeze(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>    decoder_input = index<br><br>            <span class="hljs-comment"># y_pred[:, i, :] = decoder_output</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> finish:<br>                    y_pred[j, i, :] = decoder_output[j, :]<br>                    <span class="hljs-keyword">if</span> index[j] == END:<br>                        finish.append(j)<br><br>        <span class="hljs-comment"># 3、循环计算每一个时间步的输出和hidden_state。</span><br><br>        <span class="hljs-keyword">return</span> y_pred<br><br><span class="hljs-comment">##################################################################################</span><br><br><br><span class="hljs-comment">################################# Seq2Seq model ##################################</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seq2Seq</span>(<span class="hljs-params">torch.nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(Seq2Seq, self).__init__()<br><br>        self.encoder = Encoder()<br>        self.decoder = Decoder()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, input_length, label</span>):</span><br>        encoder_output, encoder_hidden = self.encoder(<span class="hljs-built_in">input</span>, input_length)<br>        decoder_output = self.decoder(encoder_hidden, label = Node)<br>        <span class="hljs-keyword">return</span> decoder_output<br><br><span class="hljs-comment">##################################################################################</span><br><br>model = Seq2Seq()<br><br>optimizer = torch.optim.Adam(model.parameters(), lr=<span class="hljs-number">0.0015</span>)<br>criterion = torch.nn.CrossEntropyLoss()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    <span class="hljs-comment"># from DataLoader get input input_length label label_length</span><br>    <br>    y_pred = model(<span class="hljs-built_in">input</span>, input_length, label) <span class="hljs-comment"># use teacher forcing</span><br>    <span class="hljs-comment"># y_pred = model(input, input_length)</span><br><br>    <span class="hljs-comment"># print(y_pred.size()) # [3, 20, 100]</span><br>    <span class="hljs-comment"># print(label.size())  # [3, 20]</span><br>    <span class="hljs-comment"># loss = F.nll_loss(y_pred.view(-1, y_pred.size(-1)), label.view(-1))</span><br>    loss = criterion(y_pred.view(-<span class="hljs-number">1</span>, y_pred.size(-<span class="hljs-number">1</span>)), label.view(-<span class="hljs-number">1</span>))<br><br>    optimizer.zero_grad()<br>    loss.backward()<br>    optimizer.step()<br><br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(loss.item())<br>        <span class="hljs-built_in">print</span>(y_pred.<span class="hljs-built_in">max</span>(dim=-<span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].eq(label).<span class="hljs-built_in">float</span>().mean())<br>        <span class="hljs-comment"># print(y_pred.max(dim=-1)[-1])</span><br>        <span class="hljs-comment"># print(y_pred.max(dim=-1)[-1].eq(label))</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-6</title>
    <link href="/2021/07/15/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-6/"/>
    <url>/2021/07/15/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-6/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch的序列化容器以及卷积层"><a href="#PyTorch的序列化容器以及卷积层" class="headerlink" title="PyTorch的序列化容器以及卷积层"></a>PyTorch的序列化容器以及卷积层</h2><h3 id="torch-nn-sequential"><a href="#torch-nn-sequential" class="headerlink" title="torch.nn.sequential"></a>torch.nn.sequential</h3><p>torch.nn.sequential是一个有序的容器，传入其中的是构造器类，通过该容器的输入会依次通过该容器中的构造器，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>self.layer = torch.nn.sequential(<br>torch.nn.Linear(input_dim, hidden_dim1),<br>torch.nn.ReLU(<span class="hljs-literal">True</span>),<br>torch.nn.BatchNorm1d(hidden_dim1), <span class="hljs-comment"># 参数是输入最后一个维度的大小</span><br>torch.nn.Dropout(<span class="hljs-number">0.3</span>) <span class="hljs-comment"># 参数是随机失活的几率，默认0.5</span><br>torch.nn.Linear(hidden_dim1, hidden_dim2),<br>torch.nn.ReLU(<span class="hljs-literal">True</span>),<br>torch.nn.BatchNorm1d(hidden_dim2)<br>torch.nn.Dropout(<span class="hljs-number">0.3</span>)<br>torch.nn.Linear(hidden_dim2, output_dim)<br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):</span><br>output = self.layer(<span class="hljs-built_in">input</span>)<br><span class="hljs-keyword">return</span> output<br><br></code></pre></td></tr></table></figure><p>torch.nn.BatchNorm1d顾名思义是常说的批标准化，用来解决梯度消失的问题，加速训练，一般在激活层之后设置标准化层。</p><p>torch.nn.Dropout是对参数进行随机失活，增加模型的健壮性和泛化性，解决模型过拟合问题，可以理解为最终模型是多个模型组合而成的，类似于随机森林(boosting)。一般在标准化层之后设置Dropout层。</p><hr><h3 id="torch-nn-ConvXd"><a href="#torch-nn-ConvXd" class="headerlink" title="torch.nn.ConvXd"></a>torch.nn.ConvXd</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">一般来说，一维卷积nn.Conv1d用于文本数据，只对宽度进行卷积，对高度不卷积。</span><br><span class="hljs-string">通常，输入大小为word_embedding_dim * max_length，其中，word_embedding_dim为词向量的维度，max_length为句子的最大长度。</span><br><span class="hljs-string">卷积核窗口在句子长度的方向上滑动，进行卷积操作。</span><br><span class="hljs-string"></span><br><span class="hljs-string">torch.nn.Conv1d(in_channels,</span><br><span class="hljs-string">                out_channels,</span><br><span class="hljs-string">                kernel_size,</span><br><span class="hljs-string">                stride=1,</span><br><span class="hljs-string">                padding=0,</span><br><span class="hljs-string">                dilation=1,</span><br><span class="hljs-string">                groups=1,</span><br><span class="hljs-string">                bias=True)</span><br><span class="hljs-string"></span><br><span class="hljs-string">主要参数说明：</span><br><span class="hljs-string"></span><br><span class="hljs-string">in_channels：在文本应用中，即为词向量的维度</span><br><span class="hljs-string">out_channels：卷积产生的通道数，有多少个out_channels，就需要多少个一维卷积（也就是卷积核的数量）</span><br><span class="hljs-string">kernel_size：卷积核的尺寸；卷积核的第二个维度由in_channels决定，所以实际上卷积核的大小为kernel_size * in_channels</span><br><span class="hljs-string">padding：对输入的每一条边，补充0的层数</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">一般来说，二维卷积nn.Conv2d用于图像数据，对宽度和高度都进行卷积。</span><br><span class="hljs-string"></span><br><span class="hljs-string">torch.nn.Conv2d(in_channels,</span><br><span class="hljs-string">                out_channels,</span><br><span class="hljs-string">                kernel_size,</span><br><span class="hljs-string">                stride=1,</span><br><span class="hljs-string">                padding=0,</span><br><span class="hljs-string">                dilation=1,</span><br><span class="hljs-string">                groups=1,</span><br><span class="hljs-string">                bias=True)</span><br><span class="hljs-string"></span><br><span class="hljs-string">代码示例</span><br><span class="hljs-string">假设现有大小为32 x 32的图片样本，输入样本的channels为1，该图片可能属于10个类中的某一类。CNN框架定义如下：</span><br><span class="hljs-string"></span><br><span class="hljs-string">class CNN(nn.Module):</span><br><span class="hljs-string">    def __init__(self):</span><br><span class="hljs-string">        nn.Model.__init__(self)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        self.conv1 = nn.Conv2d(1, 6, 5)  # 输入通道数为1，输出通道数为6</span><br><span class="hljs-string">        self.conv2 = nn.Conv2d(6, 16, 5)  # 输入通道数为6，输出通道数为16</span><br><span class="hljs-string">        self.fc1 = nn.Linear(5 * 5 * 16, 120)</span><br><span class="hljs-string">        self.fc2 = nn.Linear(120, 84)</span><br><span class="hljs-string">        self.fc3 = nn.Linear(84, 10)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def forward(self,x):</span><br><span class="hljs-string">        # 输入x -&gt; conv1 -&gt; relu -&gt; 2x2窗口的最大池化</span><br><span class="hljs-string">        x = self.conv1(x)</span><br><span class="hljs-string">        x = F.relu(x)</span><br><span class="hljs-string">        x = F.max_pool2d(x, 2)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # 输入x -&gt; conv2 -&gt; relu -&gt; 2x2窗口的最大池化</span><br><span class="hljs-string">        x = self.conv2(x)</span><br><span class="hljs-string">        x = F.relu(x)</span><br><span class="hljs-string">        x = F.max_pool2d(x, 2)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # view函数将张量x变形成一维向量形式，总特征数不变，为全连接层做准备</span><br><span class="hljs-string">        x = x.view(x.size()[0], -1)</span><br><span class="hljs-string">        x = F.relu(self.fc1(x))</span><br><span class="hljs-string">        x = F.relu(self.fc2(x))</span><br><span class="hljs-string">        x = self.fc3(x)</span><br><span class="hljs-string">        return x</span><br><span class="hljs-string"></span><br><span class="hljs-string">网络整体结构：[conv + relu + pooling] * 2 + FC * 3</span><br><span class="hljs-string">原始输入样本的大小：32 x 32 x 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">第一次卷积：使用6个大小为5 x 5的卷积核，故卷积核的规模为(5 x 5) x 6；卷积操作的stride参数默认值为1 x 1，32 - 5 + 1 = 28，并且使用ReLU对第一次卷积后的结果进行非线性处理，输出大小为28 x 28 x 6；</span><br><span class="hljs-string">第一次卷积后池化：kernel_size为2 x 2，输出大小变为14 x 14 x 6；</span><br><span class="hljs-string">第二次卷积：使用16个卷积核，故卷积核的规模为(5 x 5 x 6) x 16；使用ReLU对第二次卷积后的结果进行非线性处理，14 - 5 + 1 = 10，故输出大小为10 x 10 x 16；</span><br><span class="hljs-string">第二次卷积后池化：kernel_size同样为2 x 2，输出大小变为5 x 5 x 16；</span><br><span class="hljs-string">第一次全连接：将上一步得到的结果铺平成一维向量形式，5 x 5 x 16 = 400，即输入大小为400 x 1，W大小为120 x 400，输出大小为120 x 1；</span><br><span class="hljs-string">第二次全连接，W大小为84 x 120，输入大小为120 x 1，输出大小为84 x 1；</span><br><span class="hljs-string">第三次全连接：W大小为10 x 84，输入大小为84 x 1，输出大小为10 x 1，即分别预测为10类的概率值。</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><br><span class="hljs-comment"># 从下面示例理解参数</span><br><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><br>s = torch.tensor(np.arange(<span class="hljs-number">128</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>)).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># [batch, seq_len, embedding_dim]</span><br>t = torch.tensor(np.arange(<span class="hljs-number">5376</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>)).<span class="hljs-built_in">float</span>() <span class="hljs-comment"># [batch, channel, hight, width]</span><br><br><br><span class="hljs-comment"># input [batch, embedding_dim(in_channels), seq_len]</span><br>cov1 = torch.nn.Conv1d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">5</span>, kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># output [batch, out_channels, after_conv]</span><br><span class="hljs-comment"># after_conv = [ seq_len + 2*pad - dilation*(kernel_size-1) - 1 ] / stride + 1</span><br><br><br>cov2 = torch.nn.Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>)<br><br><br><span class="hljs-comment"># s: [2, 4, 16]</span><br>s = cov1(s.transpose(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))  <span class="hljs-comment"># 当成图像，第二维是channels</span><br><span class="hljs-comment"># s: [2, 5, 3]</span><br><br><span class="hljs-comment"># t: [2, 3, 32, 28]</span><br>t = cov2(t)<br><span class="hljs-comment"># t: [2, 6, 30, 26]</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-5</title>
    <link href="/2021/07/15/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-5/"/>
    <url>/2021/07/15/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-5/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch-LSTM-使用"><a href="#PyTorch-LSTM-使用" class="headerlink" title="PyTorch LSTM 使用"></a>PyTorch LSTM 使用</h2><p>记录一下使用PyTorch的LSTM层，talk is cheap， show me the code！<br>主要是一个非常简单(恶心的代码qAq)的使用，顺便记录一下一般搭建模型的顺序。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __init__.py</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataLoader.py</span><br><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset,DataLoader<br><span class="hljs-keyword">from</span> emotionClassify <span class="hljs-keyword">import</span> collate, Tokenlize<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IMDBDataSet</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, train=<span class="hljs-literal">True</span></span>):</span><br>        self.train_data_path = <span class="hljs-string">r&quot;./IMDB/train&quot;</span><br>        self.test_data_path = <span class="hljs-string">r&quot;./IMDB/test&quot;</span><br><br>        self.data_path = self.train_data_path <span class="hljs-keyword">if</span> train <span class="hljs-keyword">else</span> self.test_data_path<br><br>        <span class="hljs-comment"># 把文件夹名放入列表中</span><br>        self.data_dirs = [os.path.join(self.data_path, <span class="hljs-string">&quot;pos&quot;</span>), os.path.join(self.data_path, <span class="hljs-string">&quot;neg&quot;</span>)]<br><br>        <span class="hljs-comment"># 所有的文件路径</span><br>        self.total_file_path = []<br><br>        <span class="hljs-keyword">for</span> data_dir <span class="hljs-keyword">in</span> self.data_dirs:<br>            self.file_name_lists = os.listdir(data_dir)<br><br>            self.file_path_lists = [os.path.join(data_dir, name) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> self.file_name_lists <span class="hljs-keyword">if</span> name.endswith(<span class="hljs-string">&quot;.txt&quot;</span>)]<br><br>            self.total_file_path.extend(self.file_path_lists)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, item</span>):</span><br><br>        <span class="hljs-comment"># 获取label</span><br>        <span class="hljs-comment"># label = re.split(&quot;/|\\\\|\\.|_&quot;, self.total_file_path[item])</span><br>        <span class="hljs-comment"># 当输入两个反斜杠时，两个反斜杠首先在 Python 解释器进行转义，变成一个反斜杠，然后将这一个反斜杠输入到re模块中</span><br>        label = re.split(<span class="hljs-string">r&quot;/|\\|\.|_&quot;</span>, self.total_file_path[item])<br>        <span class="hljs-comment"># 用r将原始字符串输入到re模块</span><br><br>        label = <span class="hljs-built_in">eval</span>(label[-<span class="hljs-number">2</span>])<br>        content = <span class="hljs-built_in">open</span>(self.total_file_path[item], encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br>        <span class="hljs-comment"># open() 与 with open()   区别</span><br>        <span class="hljs-comment"># 1、open需要主动调用close()，with open不需要</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># 2、open读取文件时发生异常，没有任何处理，with有很好的处理上下文产生的异常</span><br><br>        <span class="hljs-keyword">return</span> Tokenlize.tokenlize(content),label<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.total_file_path)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dataloader</span>(<span class="hljs-params">Train=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">False</span>, drop_last=<span class="hljs-literal">True</span>, collate_fn=collate.collate</span>):</span><br>    <span class="hljs-keyword">return</span> DataLoader(IMDBDataSet(train=Train),<br>                      batch_size=batch_size,<br>                      shuffle=shuffle,<br>                      drop_last=drop_last,<br>                      collate_fn=collate_fn)<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Tokenlize.py</span><br><br><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tokenlize</span>(<span class="hljs-params">content</span>):</span><br><br>    <span class="hljs-comment"># *?是非贪婪匹配，vim中用过别忘了</span><br>    content = re.sub(<span class="hljs-string">&quot;&lt;.*?&gt;|_&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, content)<br>    content = re.sub(<span class="hljs-string">r&#x27;\w\&#x27;s &#x27;</span>, <span class="hljs-string">&quot; is &quot;</span>, content)<br>    content = re.sub(<span class="hljs-string">r&#x27;\&#x27;re &#x27;</span>, <span class="hljs-string">&quot; are &quot;</span>, content)<br>    content = re.sub(<span class="hljs-string">r&#x27;\&#x27;d &#x27;</span>, <span class="hljs-string">&quot; would &quot;</span>, content)<br>    <span class="hljs-comment"># filters = [&#x27;\*&#x27;, &#x27;#&#x27;, &#x27;\$&#x27;, &#x27;%&#x27;, &#x27;\^&#x27;, &#x27;&amp;&#x27;, &#x27;\.&#x27;, &#x27;,&#x27;]</span><br>    content = re.sub(<span class="hljs-string">r&#x27;\W&#x27;</span>, <span class="hljs-string">&quot; &quot;</span>, content)<br><br>    tokens = [token.strip().lower() <span class="hljs-keyword">for</span> token <span class="hljs-keyword">in</span> content.split()]<br><br>    <span class="hljs-keyword">return</span> tokens<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># collate.py</span><br><br><br><span class="hljs-comment"># 注意</span><br><br><span class="hljs-comment"># 当Dataset中的__getitem__返回的(输入,标签)的输入是字符串的时候，应该要自定义collate_fn函数，否则报错</span><br><span class="hljs-comment"># 因为，default_collate_fn中对于字符串是将batch中每个样本做zip,于是发现每个样本的长度不是一样长就报错了</span><br><span class="hljs-comment"># 如 batch = [([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], 0), ([&quot;z&quot;,&quot;y&quot;], 1)]</span><br><br><span class="hljs-comment"># default_collate_fn的一段代码</span><br><span class="hljs-comment"># transposed = zip(*batch)</span><br><span class="hljs-comment">#         return [default_collate(samples) for samples in transposed]</span><br><br><span class="hljs-comment"># 按照default_collate_fn, 对于字符串 return [[(&quot;a&quot;,&quot;z&quot;), (&quot;b&quot;,&quot;y&quot;), (&quot;c&quot;, ???)], (0,1) ]</span><br><span class="hljs-comment"># 而实际上，我们需要 [([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[&quot;z&quot;,&quot;y&quot;]), (0,1)]</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> Lib <span class="hljs-keyword">import</span> ws, max_len<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collate</span>(<span class="hljs-params">batch</span>):</span><br>    <span class="hljs-comment"># print(type(batch))  # list: 每个元素就是__getitem__返回的结果</span><br>    <span class="hljs-comment"># print(len(batch))   # batch_size</span><br><br>    content, label = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(*batch))<br>    <span class="hljs-comment"># list(zip(*batch)) = [ ([content1], [content2], ..., [contentBatchSize]), (label1, label2, ..., labelBatchSize)]</span><br><br>    content = [ws.word2seq(sentence=i, max_len=max_len) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content]<br><br>    content = torch.LongTensor(content)<br><br>    label = torch.LongTensor(<span class="hljs-built_in">list</span>(label))<br><br>    <span class="hljs-keyword">return</span> content, label<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Word_sequence.py</span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">word_sequence</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.UNK = <span class="hljs-string">&quot;UNK&quot;</span><br>        self.PAD = <span class="hljs-string">&quot;PAD&quot;</span><br>        self.<span class="hljs-built_in">dict</span> = &#123;self.UNK:<span class="hljs-number">0</span>, self.PAD:<span class="hljs-number">1</span>&#125;<br>        self.rdict = &#123;&#125;<br>        self.count = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">self, sentence</span>):</span><br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> sentence:<br>            self.count[word] = self.count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build</span>(<span class="hljs-params">self, min_count = <span class="hljs-number">0</span>, max_count = <span class="hljs-literal">None</span>, max_words = <span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        根据count生成词典</span><br><span class="hljs-string">        :param min_count: 小于该次数将被舍弃</span><br><span class="hljs-string">        :param max_count: 大于该次数也被舍弃</span><br><span class="hljs-string">        :param max_words: 词典最多保存多少个词</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.count = &#123;word:count <span class="hljs-keyword">for</span> word,count <span class="hljs-keyword">in</span> self.count.items() <span class="hljs-keyword">if</span> count &gt; min_count <span class="hljs-keyword">and</span> (max_count <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> count &lt; max_count)&#125;<br><br>        <span class="hljs-keyword">if</span> max_words <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self.count = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(self.count.items(), key=<span class="hljs-keyword">lambda</span> x:x[-<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)[:max_words])<br><br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> self.count:<br>            self.<span class="hljs-built_in">dict</span>[word] = <span class="hljs-built_in">len</span>(self.<span class="hljs-built_in">dict</span>)<br><br>        self.rdict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(self.<span class="hljs-built_in">dict</span>.values(), self.<span class="hljs-built_in">dict</span>.keys()))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">word2seq</span>(<span class="hljs-params">self, sentence, max_len = <span class="hljs-literal">None</span></span>):</span><br>        sentence = <span class="hljs-built_in">list</span>(sentence)<br>        <span class="hljs-keyword">if</span> max_len <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sentence) &lt; max_len:<br>                sentence += [self.PAD] * (max_len - <span class="hljs-built_in">len</span>(sentence))<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(sentence) &gt; max_len:<br>                sentence = sentence[:max_len]<br>        <span class="hljs-keyword">return</span> [self.<span class="hljs-built_in">dict</span>.get(word, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> sentence]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">seq2word</span>(<span class="hljs-params">self, sequence</span>):</span><br>        <span class="hljs-keyword">return</span> [self.rdict.get(<span class="hljs-built_in">id</span>, self.UNK) <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> sequence]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.<span class="hljs-built_in">dict</span>)<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Main.py</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle <span class="hljs-comment"># 序列化保存python对象</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> Word_sequence <span class="hljs-keyword">import</span> word_sequence<br><span class="hljs-keyword">from</span> Tokenlize <span class="hljs-keyword">import</span> tokenlize<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    <span class="hljs-comment"># 建词典</span><br>    ws = word_sequence()<br>    data_dir = <span class="hljs-string">r&quot;./IMDB/train&quot;</span><br>    data_dirs = [os.path.join(data_dir, <span class="hljs-string">&quot;pos&quot;</span>), os.path.join(data_dir, <span class="hljs-string">&quot;neg&quot;</span>)]<br><br>    <span class="hljs-keyword">for</span> data_dir_path <span class="hljs-keyword">in</span> data_dirs:<br>        file_path_lists = [os.path.join(data_dir_path, file_name) <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(data_dir_path)]<br>        <span class="hljs-keyword">for</span> file_path <span class="hljs-keyword">in</span> tqdm(file_path_lists):<br>            sentence = <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>            ws.add(tokenlize(sentence))<br>    ws.build(min_count=<span class="hljs-number">5</span>, max_words=<span class="hljs-number">15000</span>)<br>    pickle.dump(ws, <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;./model/ws.pkl&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ws))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Lib.py</span><br><br><br><span class="hljs-keyword">import</span> pickle<br><br>ws = pickle.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;./model/ws.pkl&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>))<br>max_len = <span class="hljs-number">32</span><br><br>batch = <span class="hljs-number">256</span><br>seq_len = max_len<br>embedding_dim = <span class="hljs-number">64</span><br>hidden_size = <span class="hljs-number">64</span><br>num_layers = <span class="hljs-number">1</span><br>lr = <span class="hljs-number">0.001</span><br>epoch = <span class="hljs-number">2</span><br>bidirectional = <span class="hljs-literal">True</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Model.py</span><br><br><br><br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> emotionClassify <span class="hljs-keyword">import</span> Lib<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IMDBModel</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(IMDBModel, self).__init__()<br><br>        self.factor = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> Lib.bidirectional <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span> <span class="hljs-keyword">else</span> <span class="hljs-number">2</span><br><br>        <span class="hljs-comment"># embedding</span><br>        self.embedding = nn.Embedding(<span class="hljs-built_in">len</span>(Lib.ws), embedding_dim=Lib.embedding_dim)<br>        <span class="hljs-comment"># [batch, max_len, embedding_dim]</span><br><br>        <span class="hljs-comment"># lstm</span><br>        self.lstm1 = nn.LSTM(input_size=Lib.embedding_dim, hidden_size=Lib.hidden_size, num_layers=Lib.num_layers,<br>                             bidirectional=Lib.bidirectional, batch_first=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># output: [batch, max_len, hidden_size*self.factor]</span><br>        <span class="hljs-comment"># h_n: [Lib.num_layers*self.factor, batch, hidden_size]</span><br>        <span class="hljs-comment"># c_n: [Lib.num_layers*self.factor, batch, hidden_size]</span><br><br>        <span class="hljs-comment"># linear</span><br>        self.linear1 = nn.Linear(Lib.hidden_size*self.factor, Lib.embedding_dim*Lib.max_len)<br>        <span class="hljs-comment"># [batch, max_len, embedding_dim]</span><br><br>        self.relu = nn.ReLU(<span class="hljs-literal">True</span>) <span class="hljs-comment"># True 表示原地操作</span><br><br>        <span class="hljs-comment"># lstm</span><br>        self.lstm2 = nn.LSTM(input_size=Lib.embedding_dim, hidden_size=Lib.hidden_size, num_layers=Lib.num_layers,<br>                            bidirectional=Lib.bidirectional, batch_first=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># output: [batch, max_len, hidden_size*self.factor]</span><br>        <span class="hljs-comment"># h_n: [Lib.num_layers*self.factor, max_len, hidden_size]</span><br>        <span class="hljs-comment"># c_n: [Lib.num_layers*self.factor, max_len, hidden_size]</span><br><br>        self.linear2 = nn.Linear(Lib.hidden_size*self.factor, <span class="hljs-number">10</span>)<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):</span><br><br>        <span class="hljs-built_in">input</span> = self.embedding(<span class="hljs-built_in">input</span>)<br><br>        output, (h_n, c_n) = self.lstm1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-comment"># output: [batch, max_len, hidden_size*factor]</span><br>        <span class="hljs-comment"># h_n: [num_layers*factor, max_len, hidden_size]</span><br>        <span class="hljs-comment"># c_n: [num_layers*factor, max_len, hidden_size]</span><br><br>        output = output[:,-<span class="hljs-number">1</span>,:]<br>        <span class="hljs-comment"># output: [batch, hidden_size*factor]</span><br><br>        <span class="hljs-comment">#获取两个方向上最后一次output进行拼接</span><br>        h_n_forward = h_n[-<span class="hljs-number">2</span>, :, :]<br>        h_n_backward = h_n[-<span class="hljs-number">1</span>, :, :]<br>        output = torch.cat([h_n_forward, h_n_backward], dim=-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># output = self.linear1(output)</span><br>        <span class="hljs-comment"># # output: [batch, max_len*embedding_dim]</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># output = self.relu(output)</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># output, (h_n, c_n) = self.lstm2(output.view(Lib.batch, Lib.max_len, -1))</span><br>        <span class="hljs-comment"># # output: [batch, max_len, hidden_size*factor]</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># output = output[:, -1, :]</span><br>        <span class="hljs-comment"># # output: [batch, hidden_size*factor]</span><br><br>        output = self.linear2(output)<br>        <span class="hljs-comment"># output: [batch, 10]</span><br><br>        <span class="hljs-keyword">return</span> F.log_softmax(output, dim=-<span class="hljs-number">1</span>)<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Train.py</span><br><br><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> emotionClassify <span class="hljs-keyword">import</span> DataLoader, Lib, Model<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>(<span class="hljs-params">epoch</span>):</span><br><br>    dataloader = DataLoader.get_dataloader(Train=<span class="hljs-literal">True</span>,<br>                                           batch_size=Lib.batch,<br>                                           shuffle=<span class="hljs-literal">True</span>,<br>                                           drop_last=<span class="hljs-literal">True</span>)<br><br>    model = Model.IMDBModel()<br>    optimizer = torch.optim.Adam(model.parameters(), lr=Lib.lr)<br>    criterion = torch.nn.CrossEntropyLoss()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>        <span class="hljs-keyword">for</span> idx, (<span class="hljs-built_in">input</span>, label) <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">enumerate</span>(dataloader)):<br><br>            y_pred = model(<span class="hljs-built_in">input</span>)<br>            <span class="hljs-comment"># print(y_pred.max(dim=-1)[-1])</span><br>            <span class="hljs-comment"># print(label-1)</span><br><br>            loss = criterion(y_pred, label-<span class="hljs-number">1</span>)**<span class="hljs-number">2</span><br>            <span class="hljs-comment"># print(y_pred.max(dim=-1)[-1].eq(label).float().mean().item())</span><br>            <span class="hljs-comment"># print(loss.item())</span><br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br><br>            <span class="hljs-keyword">if</span> idx%<span class="hljs-number">100</span> == <span class="hljs-number">0</span> :<br>                <span class="hljs-built_in">print</span>(y_pred.<span class="hljs-built_in">max</span>(dim=-<span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].eq(label).<span class="hljs-built_in">float</span>().mean().item())<br>                <span class="hljs-built_in">print</span>(loss.item())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    train(Lib.epoch)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-4</title>
    <link href="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/"/>
    <url>/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch-LSTM"><a href="#PyTorch-LSTM" class="headerlink" title="PyTorch LSTM"></a>PyTorch LSTM</h2><h3 id="复习LSTM一些知识点：Long-Short-Term-Memory"><a href="#复习LSTM一些知识点：Long-Short-Term-Memory" class="headerlink" title="复习LSTM一些知识点：Long-Short Term Memory"></a>复习LSTM一些知识点：Long-Short Term Memory</h3><p>1、LSTM是属于RNN里面的一个网络模型，一个LSTM单元就是如下图所示的一个绿色框中的内容：<br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/LSTM_unit.png"></p><p>LSTM单元的输入：hidden_state[t-1]，x[t], c[t-1]<br>LSTM单元的输出：hidden_state[t], x+1[t] == hidden_state[t], c[t]</p><p>LSTM的核心在于单元(细胞)中的状态，也就是上图一个LSTM单元中的最上面那根线，如果只有那根线，那么这个单元无法实现信息的增加或者删除，但LSTM通过一个被称为“门”的结构来实现信息的增加和删除，“门”可以控制信息是否通过。“门”的实现主要是通过sigmoid函数和pointwise点乘。</p><p>2、遗忘门：通过sigmoid函数来决定哪些信息被遗忘<br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/LSTM_forget_gate.png"></p><p>3、输入门：决定哪些信息被保留，主要有两步：<br>    一个被称为输入门的sigmoid层决定哪些信息将会被更新<br>    tanh层会创建一个新的候选向量，这个候选向量后续可能会被添加到细胞状态中<br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/LSTM_input_gate.png"><br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/LSTM_update.png"><br>4、输出门：决定哪些信息被输出，主要有三步：<br>    前一个时间步的输出和当前时间步的输入组合后通过sigmoid层处理<br>    将通过遗忘门和输入门后更新过的当前LSTM单元的状态通过tanh层转到(-1,1)的区间<br>    将上面两个得到的结果相乘后的结果(隐藏状态)传到下一个LSTM单元同时输出</p><p><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/LSTM_output_gate.png"></p><hr><p>GRU(Gate Recurrent Unit)是LSTM的变形简化版本，GRU将遗忘门和输入门组合成一个更新门，同时它还合并了LSTM单元的单元状态和隐藏状态，并做了些许修改。<br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/GRU_unit.png"></p><hr><p>双向LSTM(PyTorch中设置torch.nn.LSTM()的参数bidirectional=True即可): 不仅要从前往后记忆状态，还要从后往前记忆状态。<br><img src="/2021/07/14/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-4/BiLSTM.png"></p><p>因为是双向的，所以每个LSTM单元在两个方向上都会有输出，故相对于LSTM来说，最终输出包含两部分，这往往需要concatenate操作。</p><h3 id="PyTorch中LSTM的api"><a href="#PyTorch中LSTM的api" class="headerlink" title="PyTorch中LSTM的api"></a>PyTorch中LSTM的api</h3><p>torch.nn.LSTM(input_size,hidden_size,num_layers,batch_first,dropout,bidirectional)</p><p>其中：<br>    input_size: 输入数据的维度，也就是embedding_dim<br>    hidden_size: 隐藏层的数量，即一层包含有多少个LSTM单元<br>    num_layers: RNN中LSTM单元的层数<br>    batch_first: 默认为False，输入的tensor的shape是[seq_len, batch, embedding_dim]。若设为True,则需要输入的tensor的shape是[batch, seq_len, embedding_dim]<br>    dropout: 随机失活的几率。这里是在LSTM最后一层对每个输出dropout, 默认为0。<br>    bidirectional: 是否使用双向LSTM，默认为False。</p><p>LSTM的输出为: output, (h_n, c_n)<br>其中：<br>    output(batch_first=False): [seq_len, batch, num_directions*hidden_size], 把每个时间步上的输出在seq_len(如果batch_first则为batch)这个维度上拼接起来<br>    h_n: [num_layers*num_directions, batch, hidden_size]，把不同层的隐藏状态h[1],h[2],…,h[hidden_size]拼接起来。<br>    c_n: [num_layers*num_directions, batch, hidden_size]，把不同层的c[1],c[2],…,c[hidden_size]拼接起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>batch = <span class="hljs-number">3</span><br>seq_len = <span class="hljs-number">12</span><br>embedding_dim = <span class="hljs-number">6</span><br>hidden_size = <span class="hljs-number">2</span><br>num_layers = <span class="hljs-number">4</span><br><br><span class="hljs-built_in">input</span> = torch.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,size=[batch, seq_len])<br><br><span class="hljs-built_in">input</span> = torch.nn.Embedding(dict_len,embedding_dim=embedding_dim)(<span class="hljs-built_in">input</span>)<br><span class="hljs-comment"># input = torch.nn.Embedding(dict_len,embedding_dim=embedding_dim)(input).permute(1,0,2)</span><br><br>lstm = torch.nn.LSTM(input_size=embedding_dim, hidden_size=<span class="hljs-number">5</span>, num_layers=num_layers, bidirectional=<span class="hljs-literal">True</span>, batch_first=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># lstm = torch.nn.LSTM(input_size=embedding_dim, hidden_size=hidden_size, num_layers=num_layers, bidirectional=True)</span><br><br><br>output,(h_n, c_n) = lstm(<span class="hljs-built_in">input</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.size())  <span class="hljs-comment"># seq_len * batch * embedding_dim</span><br>                     <span class="hljs-comment"># batch * seq_len * embedding_dim (batch_first)</span><br><br><span class="hljs-built_in">print</span>(output.size()) <span class="hljs-comment"># seq_len * batch * hidden_size_if_bidirection_times_2</span><br>                     <span class="hljs-comment"># batch * seq_len * hidden_size_if_bidirection_times_2 (batch_first)</span><br><span class="hljs-built_in">print</span>(h_n.size())  <span class="hljs-comment"># num_layers_if_bidirection_times_2 * batch * hidden_size</span><br><span class="hljs-built_in">print</span>(c_n.size())  <span class="hljs-comment"># num_layers_if_bidirection_times_2 * batch * hidden_size</span><br><br><span class="hljs-comment"># 当bidirectional=True时，output的拼接是在最后一个维度上进行的，拼接法则是第一个正向LSTM单元的output拼接上最后一个反向的LSTM单元的output，第二个正向LSTM单元的output拼接上倒数第二个反向的LSTM单元的output，... 。因为这两个output是描述输入序列中的同一个元素在双向LSTM下的不同结果。</span><br><span class="hljs-comment"># 若不拼接则有 output1:  seq_len * batch * hidden_size 。 output2:  seq_len * batch * hidden_size。</span><br><br><br><span class="hljs-comment"># 一般使用output的最后一维来代表最后输出结果, 若是双向LSTM则往往使用两个方向的最后一次output的连接结果作为最后输出结果。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式复习</title>
    <link href="/2021/07/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/07/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h3><p>自己在linux中用过vim，sed,awk等等，对于正则有些了解，不知道python的re用法是否有区别。</p><p>步骤：<br>1、确定模式包含几个子模式<br>2、子模式是什么字符<br>3、重复形式<br>4、外部位置约束<br>5、内部制约关系</p><h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h3><p>1、\d表示任何数字，\D表示任何非数字。\w表示任何数字字母下划线，\W表示任何非数字字母下划线。\s表示空格，\S表示非空格。.表示非换行符\n的任意字符。<br>2、+表示前面一个字符可以出现1次到多次，如 \d+ 表示多个数字<br>3、*表示前面一个字符可以出现0次到多次，如 \d*表示0个到多个数字<br>4、？表示前面一个字符出现0次或1次，如\d?表示0个或者1个数字<br>5、{}中的数字用逗号隔开，表示出现次数，如\d{3,5}表示3个到5个数字。这里可以用‘，’省略，如{，4}表示最多4个，{4，}表示最少4个。<br>6、|表示或者，但要注意作用范围是否被()限制。<br>7、()中是一组匹配模式。根据括号的顺序可以用\第几个括号来表示和前面第几个括号的匹配结果是一样的。如(\d-\w)(\1)表示形如1a1a的模式。注意区别(\d-\w){2}。<br>8、[]中表示在[]中的内容匹配一个字符就行，[1-4]和[u-v]表示[1234]和[uv], []中的^表示取反如[^1-4]表示任何非1，2，3，4的一个字符<br>9、^表示开头，$表示结尾<br>10、\b表示单词边界，即它的前一个“显式位置”字符和后一个“显式位置”字符不全是\w。如 123\b 表示123后面是一个单词边界，此时\b的前一个字符是3，故后一个字符必须要是任何非数字字母下划线才是一个匹配。\B表示非单词边界，即它的前一个“显式位置”字符和后一个“显式位置”字符全都是\w。<br>11、(?#注释)用来加注释，这部分包括括号都被正则忽略，作为读正则表达式的一个帮助理解的解释说明。如(?#前面第三个括号是匹配一个电话号码)。</p><p>匹配但不捕捉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># (?&lt;=Expression) 逆序肯定环视，表示所在位置左侧能够匹配Expression</span><br><br><span class="hljs-comment"># (?&lt;!Expression) 逆序否定环视，表示所在位置左侧不能匹配Expression</span><br><br><span class="hljs-comment"># (?=Expression) 顺序肯定环视，表示所在位置右侧能够匹配Expression</span><br><br><span class="hljs-comment"># (?!Expression) 顺序否定环视，表示所在位置右侧不能匹配Expression</span><br><br><span class="hljs-comment"># (?()|) 条件判断</span><br><br><span class="hljs-comment"># 例如</span><br><span class="hljs-comment"># (?&lt;!\d)cat 表示匹配cat但是cat左侧不是数字。不捕捉的含义就是当模式来修改时，只修改cat，因为环视不捕捉。</span><br><br><span class="hljs-comment"># \d&#123;5&#125;(?(?=-) -\d&#123;4&#125;| \s\d&#123;4&#125;)</span><br><span class="hljs-comment"># \d&#123;5&#125;，这个很简单，就是匹配5个数字</span><br><span class="hljs-comment"># (?(?=-)-\d&#123;4&#125; | \s\d&#123;4&#125;) 5个数字的右边是不是一个连字符-？如果是，-\d&#123;4&#125;将匹配那个连字符后连同随后的4位数字，相当于\d&#123;5&#125;-\d&#123;4&#125;。如果不是，就会匹配\s\d&#123;4&#125;，相当于\d&#123;5&#125;\s\d&#123;4&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><p>regex库</p><p>原生字符串 R”()”</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>python的re模块和我之前用过的正则大同小异，除此之外，re模块提供了flag标志，如flag.I表示忽略大小写。</p>]]></content>
    
    
    <categories>
      
      <category>regular expression</category>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regular expression</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-3</title>
    <link href="/2021/07/13/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-3/"/>
    <url>/2021/07/13/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-3/</url>
    
    <content type="html"><![CDATA[<h2 id="一个简单的使用例子"><a href="#一个简单的使用例子" class="headerlink" title="一个简单的使用例子"></a>一个简单的使用例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __init__.py</span><br><br><span class="hljs-comment"># 空实现，文件夹下有这个类可以让其他文件导入该文件夹下的.py文件</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Model.py</span><br><br><br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br><br>        <span class="hljs-comment"># 因为batch_size是变化的，于是我们不考虑batch_size</span><br>        <span class="hljs-comment"># nn.Linear(输入的列的维度， 输出的列的维度)</span><br>        self.linear1 = nn.Linear(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>*<span class="hljs-number">1</span>, <span class="hljs-number">32</span>) <span class="hljs-comment"># input的形状[batch_size, 1, 28, 28], 经过后变为[batch_size, 32]</span><br>        self.linear2 = nn.Linear(<span class="hljs-number">32</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 经过后变成[batch_size, 10]</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):</span><br>        <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>*<span class="hljs-number">28</span>*<span class="hljs-number">28</span>) <span class="hljs-comment"># [batch_size, 输入的列的维度]: 每张图片是一列</span><br>        <span class="hljs-comment"># input = input.view(input.size(0), 1*28*28)</span><br><br>        <span class="hljs-built_in">input</span> = self.linear1(<span class="hljs-built_in">input</span>)<br>        F.relu_(<span class="hljs-built_in">input</span>);<br>        output = self.linear2(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> F.softmax(output, dim=-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dataloader.py</span><br><br><br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dataloader</span>(<span class="hljs-params">train=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-keyword">if</span> train:<br>        dataset = torchvision.datasets.MNIST(root=<span class="hljs-string">&#x27;MNIST&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>,<br>                                             transform=torchvision.transforms.Compose<br>                                                 ([<br>                                                 torchvision.transforms.ToTensor(),<br>                                             ]<br>                                             )<br><br>                                             )<br>        batch_size = <span class="hljs-number">64</span><br>        shuffle = <span class="hljs-literal">True</span><br>        drop_last = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        dataset = torchvision.datasets.MNIST(root=<span class="hljs-string">&#x27;MNIST&#x27;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                             transform=torchvision.transforms.Compose<br>                                                 ([<br>                                                 torchvision.transforms.ToTensor(),<br>                                             ]<br>                                             )<br><br>                                             )<br><br>        batch_size = <span class="hljs-number">1</span><br>        shuffle = <span class="hljs-literal">False</span><br>        drop_last = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, drop_last=drop_last)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Train.py</span><br><br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Dataloader<br><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>():</span><br>    model = Model.Model()<br><br>    dataloader = Dataloader.get_dataloader(train=<span class="hljs-literal">True</span>)<br>    optimizer = torch.optim.Adam(model.parameters(), lr=<span class="hljs-number">1e-2</span>)<br>    criterion = torch.nn.CrossEntropyLoss()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br><br>        <span class="hljs-keyword">for</span> idx, (img, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br><br>            y_pred = model(img)<br>            loss = criterion(y_pred, label)<br>            <span class="hljs-comment"># loss = F.nll_loss(y_pred, label)</span><br><br>            acc = y_pred.<span class="hljs-built_in">max</span>(dim=-<span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].eq(label).<span class="hljs-built_in">float</span>().mean()<br>            <span class="hljs-comment"># y_pred.max(dim=-1) # 取最后一维上的最大值，返回最大值和索引的列表</span><br>            <span class="hljs-comment"># y_pred.max(dim=-1)[-1] # 取最大值的索引</span><br>            <span class="hljs-comment"># y_pred.max(dim=-1)[-1].eq(label) # tensor的对应元素比较，返回值类型为bool的tensor</span><br>            <span class="hljs-comment"># y_pred.max(dim=-1)[-1].eq(label).float()) # 转为浮点数</span><br>            <span class="hljs-comment"># y_pred.max(dim=-1)[-1].eq(label).float().mean() # 最后求平均就是其中值是True的概率</span><br><br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br><br>            <span class="hljs-keyword">if</span> idx % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;epoch &#123;&#125; : [batch_id=&#123;&#125;, process: &#123;&#125;/&#123;&#125;  (&#123;:.0f&#125;%)]\tLoss=&#123;:.6f&#125;\tAcc=&#123;:.6f&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<br>                    i, idx, idx * <span class="hljs-built_in">len</span>(label), <span class="hljs-built_in">len</span>(dataloader.dataset),<span class="hljs-number">100.</span> * idx / <span class="hljs-built_in">len</span>(dataloader), loss.item(), acc.item()*<span class="hljs-number">100</span><br>                ))<br>    torch.save(model.state_dict(), <span class="hljs-string">&quot;./model/model.pkl&quot;</span>)<br>    torch.save(optimizer.state_dict(), <span class="hljs-string">&quot;./model/optimizer.pkl&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    train()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Val.py</span><br><br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Dataloader<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">val</span>():</span><br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        <span class="hljs-keyword">return</span><br>    dataloader = Dataloader.get_dataloader(train=<span class="hljs-literal">False</span>)<br>    criterion = torch.nn.CrossEntropyLoss()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        loss = <span class="hljs-number">0.</span><br>        acc = <span class="hljs-number">0.</span><br>        model = Model.Model()<br>        model.load_state_dict(torch.load(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>))<br>        <span class="hljs-keyword">for</span> idx, (img, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>            y_pred = model(img)<br>            loss += criterion(y_pred, label)<br>            <span class="hljs-comment"># loss = F.nll_loss(y_pred, label)</span><br>            acc += y_pred.<span class="hljs-built_in">max</span>(dim=-<span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].eq(label).<span class="hljs-built_in">float</span>()<br><br>    <span class="hljs-keyword">return</span>  loss/<span class="hljs-built_in">len</span>(dataloader), acc/<span class="hljs-built_in">len</span>(dataloader)<br><br><span class="hljs-comment"># print(val())</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Test.py</span><br><br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Dataloader<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        <span class="hljs-keyword">return</span><br>    dataloader = Dataloader.get_dataloader(train=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        model = Model.Model()<br>        model.load_state_dict(torch.load(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>))<br>        <span class="hljs-keyword">for</span> idx, (img, label) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>            y_pred = model(img)<br>            <span class="hljs-built_in">print</span>(y_pred.<span class="hljs-built_in">max</span>(dim=-<span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># print(test())</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-2</title>
    <link href="/2021/07/13/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-2/"/>
    <url>/2021/07/13/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-2/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><h3 id="torch-nn-Module"><a href="#torch-nn-Module" class="headerlink" title="torch.nn.Module"></a>torch.nn.Module</h3><p>torch.nn.Module是torch.nn中的一个类，这个类中定义了很多有用的方法，我们在自定义网络时继承这个类会让我们的自定义网络实现更为简单。</p><p>torch.nn.Module含有方法eval(),调用此方法表示模型进入评估模式，即相当于不更新参数的训练模式。eval()方法中实质上是调用train(False)方法。</p><p>torch.nn中定义了神经网络的各种模块，如线性层，卷积层，池化层，padding，激活层等等，使用时只需要根据shape来传递对应的尺寸参数即可：如self.conv1 = torch.nn.Conv2d(16, 33, 3, stride=2)<br><a href="https://pytorch.org/docs/1.2.0/nn.html#">PyTorch关于torch.nn的说明文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params">torch.nn.Module</span>):</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-built_in">super</span>(Model, self).__init()<br>self.linear = torch.nn.Linear(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):</span><br>output = self.linear(<span class="hljs-built_in">input</span>)<br><span class="hljs-keyword">return</span> output<br><br>myModel = Model()<br>y_pred = myModel(x)  <span class="hljs-comment"># 等于调用 myModel.forward(x)。因为类中存在__call__方法，相当于c++中重载()号，仿函数。</span><br><br></code></pre></td></tr></table></figure><hr><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1、__init__()方法需要调用基类nn.Module的super方法来继承基类的属性和方法。<br>2、forward()方法必须实现，定义我们的自定义网络的前向计算过程。形象化地说，组织我们前面定义的网络各层的顺序。<br>3、模型类内的参数要移到gpu上只需要使用model.to(device)来实现。但是模型外部我们自定义的tensor任然需要手动tensor.to(device)来移到gpu上。</p><hr><h3 id="优化器类optimizer"><a href="#优化器类optimizer" class="headerlink" title="优化器类optimizer"></a>优化器类optimizer</h3><p>torch.optim中定义了很多常用的优化函数，如SGD,Adam,RMSprop等等。使用时只需传入模型的参数和学习率等其他参数：optimizer = torch.optim.SGD(myModel.parameters(), lr=1e-3)</p><p>上一节中，已经讲过每次反向传播都应该要将tensor.grad置0。有了优化器类，我们不需要手动找到每一个相关tensor然后tensor.grad=0来完成，而只需要optimizer.zero_grad()便可将所有相关的tensor.grad全部置为0。</p><p>optimzier优化器的作用形象地来说就是需要根据网络反向传播的梯度信息来更新网络的参数，以起到降低loss函数计算值。<br>从优化器的作用出发，要使得优化器能够起作用，需要主要两个东西：1是优化器需要知道当前模型的参数空间，这也就是为什么在训练文件中，正式开始训练之前需要将网络的参数放到优化器里面。2是需要知道反向传播的梯度信息。</p><p>比起麻烦的手动对参数进行如 x = x-lr*grad 来更新参数x，optimizer.step()方法用来更简洁方便的更新模型的参数，一般是在loss.backward()之后optimizer.step()。</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>1、如果要把模型放在gpu上计算，则在定义优化器之前将tensor放在gpu上。</p><hr><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>torch.nn中同时也定义了常用的损失函数类，如MSELoss(),L1Loss(),CrossEntropyLoss()等等。</p><p>loss = torch.nn.MSELoss()(y_true, y_pred)<br>更一般的，我们常用早先定义 criterion = torch.nn.MSELoss(); 然后计算loss时使用 loss = criterion(y_true, y_pred) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>myModel = Model()<br>criterion = torch.nn.MSELoss()<br>optimizer = torch.optim.SGD(myModel.parameters(), lr=<span class="hljs-number">1e-3</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>y_pred = myModel(x)<br><br>loss = criterion(y_true, y_pred)<br><br>optimizer.zero_grad()<br><br>loss.backward()<br><br>optimizer.step()<br><br></code></pre></td></tr></table></figure><hr><h3 id="数据集基类Dataset"><a href="#数据集基类Dataset" class="headerlink" title="数据集基类Dataset"></a>数据集基类Dataset</h3><p>torch.utils.data中定义了数据集的抽象基类Dataset。于是我们继承抽象类后实现必须要实现对应的两个虚方法__getitem__(self, index)和__len__(self)。</p><p>__getitem__:实现能够通过传入索引的方式来获取对应的数据，如dataset[i]获取数据集中的第i条数据<br>__len__:实现能够通过全局len()方法来获取其中的元素个数</p><hr><h3 id="数据加载器类DataLoader"><a href="#数据加载器类DataLoader" class="headerlink" title="数据加载器类DataLoader"></a>数据加载器类DataLoader</h3><p>torch.utils.data中还定义了数据加载器类DataLoader，通过传递数据集类和一些其他想设置的参数来实例化数据加载器类: myDataLoder = torch.utils.data.DataLoader(myDataset,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myDataset</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.lines = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData.txt&#x27;</span>, <span class="hljs-string">&quot;r&quot;</span>).readlines()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, item</span>):</span><br>        <span class="hljs-comment"># return self.lines[item]</span><br><br>        <span class="hljs-comment"># 如果想返回更详细一点</span><br>        cur_line = self.lines[item].strip()<br><br>        label = cur_line[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br>        content = cur_line[<span class="hljs-number">2</span>:]<br><br>        <span class="hljs-keyword">return</span> label, content<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.lines)<br><br>dataset = myDataset()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">print</span>(dataset[i])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))<br><br>myDataLoader = DataLoader(dataset, batch_size=<span class="hljs-number">2</span>, shuffle=<span class="hljs-literal">True</span>, drop_last=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(myDataLoader))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> myDataLoader: <span class="hljs-comment"># list</span><br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span>,(label, content) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(myDataLoader):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>, label, content)<br><br><br></code></pre></td></tr></table></figure><hr><h3 id="使用PyTorch自带数据集"><a href="#使用PyTorch自带数据集" class="headerlink" title="使用PyTorch自带数据集"></a>使用PyTorch自带数据集</h3><p>torchvision和torchtext分别提供了对图片和文本数据处理相关的api和数据。<br>数据位置在torchvision.datasets和torchtext.datasets下，如torchvision.datasets.MNIST(手写数字图片数据),torchtext.datasets.IMDB(电影评论文本数据)。值得一提的是，所有在datasets下的数据集类都是继承自数据集基类DataSet，因此直接对他们直接实例化得到的就是DataSet的实例。</p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><p>参数：例如myDataset = torchvision.datasets.MNIST(root=’/pathYouPutTheDatas’, train=True[是训练数据还是测试数据], download=True[若不存在，是否下载数据到root目录], transform=[实现对图片处理的函数])</p><p>transform要实现对类似前面myDataset[index]进行处理，就MNIST数据而言，没有transform则索引返回的不是tensor而是一个PIL对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> MNIST<br><br>myDataset = MNIST(root=<span class="hljs-string">&#x27;/MNIST&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(myDataset[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># (&lt;PIL.Image.Image image mode=L size=28x28 at 0x20CCCE09B20&gt;, 5) </span><br><br><span class="hljs-comment"># 当然， PIL.Image.Image对象可以使用show()方法来展示该图片</span><br>myDataset[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].show()<br><br></code></pre></td></tr></table></figure><p>可以看出这里__getitem__返回的也是一个元组，前面是图片类型image，后面是标签5。</p><p>torchvision.transforms下提供了多个类用来对数据进行相关处理，如:<br>    ToTensor()将Image对象或者shape为[height,width,channels]的numpyArray转化为shape为[channels,height,width]的tensor<br>    ToPILImage()将shape为[channels,height,width]的numpyArray或者tensor转化为Image对象<br>    Normalize(mean=(mean1, mean2, … , meanChannels), std=(std1, std2, … , stdChannels))将一个shape为[channels, height, width]的tensor进行规范化，meanINDEX和stdINDEX分别表示对应channel的均值和方差<br>    …<br>    注意上述的tensor和numpyArray中数据的数据类型都是0~1.0的浮点型, shape的转换相当于使用tensor.permute(2,0,1)方法</p><pre><code>Compose(listOfTransforms)将多个transforms组合起来，处理时依次通过transfroms列表中的transforms</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = torchvision.transforms.ToTensor()<br>t2 = torchvision.transforms.ToPILImage()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t2))<br><br><span class="hljs-comment"># &lt;class &#x27;torchvision.transforms.transforms.ToTensor&#x27;&gt;</span><br><span class="hljs-comment"># &lt;class &#x27;torchvision.transforms.transforms.ToPILImage&#x27;&gt;</span><br><br><span class="hljs-built_in">print</span>(myDataset[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])  <span class="hljs-comment"># tensor</span><br><br>t2(t1(myDataset[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])).show() <span class="hljs-comment"># 等于 myDataset[0][0].show()</span><br><span class="hljs-comment"># t1和t2中包含__call__方法</span><br><br>t3 = torchvision.transforms.Normalize(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br><br>t4 = t3(t1(myDataset[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))  <span class="hljs-comment"># tensor</span><br><br>t2(t4).show() <span class="hljs-comment"># Image</span><br><br>t5 = torchvision.transforms.Compose(<br>    [<br>        t1,   <span class="hljs-comment"># 转为tensor</span><br>        t3    <span class="hljs-comment"># 规范化</span><br>    ]<br>)<br><br><span class="hljs-built_in">print</span>(t5(myDataset[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 等同于 print( t3(t1(myDataset[0][0])) ) </span><br><br></code></pre></td></tr></table></figure><hr><h3 id="模型的保存与读取"><a href="#模型的保存与读取" class="headerlink" title="模型的保存与读取"></a>模型的保存与读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模型的保存，包括模型参数和优化器参数</span><br>torch.save(myModel.state_dict(), <span class="hljs-string">&quot;./model/model.pkl&quot;</span>)<br>torch.save(optimizer.state_dict(), <span class="hljs-string">&quot;./model/optimizer.pkl&quot;</span>)<br><br><span class="hljs-comment"># 模型的读取，包括模型参数和优化器参数</span><br>myModel = Model()<br>optimizer = torch.optim.Adam(myModel.parameters(), lr=<span class="hljs-number">0.001</span>)<br><span class="hljs-keyword">if</span>(os.path.exists(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>):<br>myModel.load_state_dict(torch.load(<span class="hljs-string">&quot;./model/model.pkl&quot;</span>)<br>optimizer.load_state_dict(torch.load(<span class="hljs-string">&quot;./model/optimizer.pkl&quot;</span>)<br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建筑结构损伤图像识别-1</title>
    <link href="/2021/07/12/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-1/"/>
    <url>/2021/07/12/%E5%BB%BA%E7%AD%91%E7%BB%93%E6%9E%84%E6%8D%9F%E4%BC%A4%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB-1/</url>
    
    <content type="html"><![CDATA[<h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>1、torch的api来初始化tensor，参数是列表或者序列表示各个维度上的大小: torch.randn([1,2,3])——-&gt;torch.dim() == 3<br>2、数组或者numpy数组来初始化tensor: torch.tensor([1,2,3], dtype=torch.int32)—–&gt;torch.dim() == 1<br>3、使用参数dtype指定tensor中数据的数据类型，device来指定tensor放在cpu/gpu上</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>(torch.tensor(1,2,3)报错，torch.Tensor(1,2,3)创建一个3维tensor)<br>(可以通过tensor.float(),tensor.int(),tensor.long()来获取原tensor的不同数据类型的tensor)<br>(当require_grad=true时，要得到numpyArray要先detach(): tensor.detach().numpay())</p><p>(torch.Tensor()是Python类，更明确的说，是默认张量类型torch.FloatTensor()的别名)<br>(torch.tensor(data, dtype=None, device=None, requires_grad=False)仅仅是Python的函数。其中data可以是：list, tuple, array, scalar等类型，可以从data中的数据部分做拷贝[不是直接引用]，根据原始数据类型生成相应的torch.LongTensor，torch.FloatTensor，torch.DoubleTensor。)</p><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>4、tensor.view()和numpy.reshape()是浅拷贝<br>5、tensor.item()获取只有一个元素的tensor的值<br>6、tensor.transpose(a, b)转置tensor的a，b维<br>7、tensor.permuta(n-1, 3, n-4, … , 0, 1)重排tensor的各个维度的大小<br>8、tensor.size()获取tensor的shape，tensor.size(x)获取x维上的大小<br>9、tensor.dim()获取tensor的维度<br>10、tensor.type()获取tensor的数据类型,tensor.dtype获取tensor中的数据的数据类型<br>11、tensor.add(other), tensor.sub(other),tensor.mul(other),tensor.div(other)来对tensor的对应元素做四则运算，等同于tensor+tensor,tensor-tensor,tensor*tensor,tensor/tensor。tensor.mm(other)是矩阵乘法。tensor.min(),tensor.max(),tensor.mean(),tensor.norm(x)取tensor的x范数，默认2范数。<br>12、tensor.to(device)来转移tensor到cpu/gpu上<br>13、tensor.expand([3,2,1])和tensor.expand_as(tensor)来扩展某一为1的维度(类似两个tensor之间进行广播)。内存不共享，如果维度不是1则报错。<br>14、tensor.where(condition, true_tensor, false_tensor)按照condition来合并两个tensor</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>(带下划线的方法表示原地操作)<br>(torch的矩阵运算: torch.dot(a,b)是一维tensor的内积，torch.mm(a,b)是矩阵的乘法，torch.mv(a,b)是矩阵乘向量[将矩阵看成多个向量后进行向量内积计算]，torch.bmm(a,b)是批量矩阵乘法[3维矩阵的乘法]，torch.addmm(input,a,b,beta,alpha)是矩阵相乘后相加[alpha*a.mm(b)+beta*input, input是向量，将矩阵每行加上input]，torch.addbmm(input,a,b,beta,alpha)是批量矩阵相乘后相加[input是矩阵，批量矩阵相乘后的多个矩阵先加起来，最后再与input矩阵相加])</p><h4 id="tensor的广播-兼容"><a href="#tensor的广播-兼容" class="headerlink" title="tensor的广播(兼容)"></a>tensor的广播(兼容)</h4><p>从后往前比较两个tensor的维度，要么两个tensor在该维度上的大小相等，要么两个tensor有一个在该维度上的大小为1，则称这两个tensor是兼容的(可广播的)。通过广播可让两个维度不同的tensor也能进行+-*/运算。</p><hr><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>11、tensor[a,b,c]意思是tensor[a][b][c]<br>12、tensor[a,:,:]意思是tensor[a][0 1 2 … dim-1][0 1 2 … dim-1]<br>13、tensor[a,:,::2]意思是tensor[a][0 1 2 … dim-1][0 2 4 …]</p><hr><h3 id="动态计算图"><a href="#动态计算图" class="headerlink" title="动态计算图"></a>动态计算图</h3><p>新版PyTorch的tensor已经不仅仅是一个纯粹用来计算的载体，tensor本身可以支持微分运算。创建tensor时可使用参数autograd=true指定该tensor需要计算微分，然后所有与该tensor运算[直接/间接]的tensor也会自动支持微分运算[具有传播性]，这样就形成了一张用来计算微分的计算图[想想链式求导法则]。值得一提的是，PyTorch的计算图是动态计算图，会根据可微分tensor的计算过程自动生成，并伴随新tensor的加入或运算来不断更新，这使得PyTorch的计算图更加灵活高效，更易于构建。静态计算图[先构建整个计算图然后进行计算]。</p><p>可微分tensor的导数[梯度]值存储在tensor.grad中，最初tensor.grad属性是空值，随着tensor.backward()反向传播完成，我们可以获得tensor.grad的值。注意一点，只有叶节点tensor可以查看tensor.grad，这是为了节省存储资源，若要查看某一非叶节点tensor的grad属性，则需要tensor.retain_grad()方法来设置保存tensor的grad值。</p><p>很自然的，当我们在进行第二次tensor.backward()时要清空上一次计算图中的grad值，否则会累加导致错误。</p><h4 id="阻止计算图追踪"><a href="#阻止计算图追踪" class="headerlink" title="阻止计算图追踪"></a>阻止计算图追踪</h4><p>有时，对于与可微分tensor发生关系的tensor我们并不需要其微分值，并不需要将其扩充到计算图中，为了节省资源，加快计算速度，可以使用上下文管理器with，with torch.no_grad():,在这之后创建或者计算不需要微分的tensor，从而阻止计算图的记录。</p><p>我们也可以使用tensor.detach()方法来新建一个和原tensor值相同但是不计算微分的tensor[是同一块地址空间]，用该tensor来进行上述运算。<br>tensor.detach():将grad_fn设置为None,将requires_grad设置为False。不改变计算图的状态，若使用tensor.detach_()原地操作则已经改变了原计算图的状态。尽管如此，若对tensor.detach()得到的tensor进行了原地修改，则仍会被autograd追踪到，之后的原tensor.backward()将报错。</p><p>使用tensor.data和tensor.detach()类似，不同之处在于tensor.data原地修改不会被autograd追踪，故原tensor.backward()不报错，但是会得到不想要的错误结果。</p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><p>tensor.is_leaf可以判断当前节点在计算图中是否是叶子节点。混淆点：一个刚创建的tensor[朴素创建，而不是计算得来的]无论是否可微分，都可以是叶节点。</p><p>计算图可能大于一个[森林]。</p>]]></content>
    
    
    <categories>
      
      <category>PyTorch</category>
      
      <category>机器学习</category>
      
      <category>建筑结构损伤图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>机器学习</tag>
      
      <tag>建筑结构损伤图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大团算法</title>
    <link href="/2021/07/11/%E6%9C%80%E5%A4%A7%E5%9B%A2%E7%AE%97%E6%B3%95/"/>
    <url>/2021/07/11/%E6%9C%80%E5%A4%A7%E5%9B%A2%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">auto</span> _ = []()&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;();<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">55</span>;<br><span class="hljs-keyword">bool</span> g[N][N];<br><br><span class="hljs-keyword">int</span> res, n, memo[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* adj, <span class="hljs-keyword">int</span> total, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t[N], k;<br>    <span class="hljs-keyword">if</span>(total == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(c &gt; res)&#123;<br>            res = c;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 剪枝</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 当前团继续扩展最大团的最多点数为c加上目前的邻接点总数total</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = total<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(c+i+<span class="hljs-number">1</span> &lt;= res) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 剪枝</span><br>        <br>        <span class="hljs-comment">// 邻接点的标号是比当前团里面的节点标号更小的标号</span><br>        <span class="hljs-keyword">if</span>(c+memo[adj[i]] &lt;= res) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        k = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j)&#123;<br>            <span class="hljs-comment">// 当前团的所有邻接点中，adj[i]和adj[j]又是邻接的，于是当前团加上两个邻接点adj[i], adj[j]是c+2个节点的团</span><br>            <span class="hljs-keyword">if</span>(g[adj[i]][adj[j]]) t[k++] = adj[j]; <br>        &#125;<br>        <br>        <span class="hljs-comment">// 递归判断。将adj[i]合并进当前团，成为下一次dfs的团，但是c=c+1意味着已经多了一个节点在团中了</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(t, k, c+<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxClique</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> adj[N], k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<br>        k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j)&#123;<br>            <span class="hljs-keyword">if</span>(g[i][j]) adj[k++] = j; <span class="hljs-comment">//得到当前点i的所有相邻点存入adj</span><br>        &#125;<br>        <span class="hljs-comment">// 大坐标指向小坐标</span><br>        <span class="hljs-comment">// 小坐标先完成dfs</span><br>        <span class="hljs-built_in">dfs</span>(adj, k, <span class="hljs-number">1</span>); <span class="hljs-comment">//每次dfs相当于必选当前i点看是否能更新res</span><br>        memo[i] = res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n, n)&#123;<br>        res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)&#123;<br>                cin &gt;&gt; x;<br>                g[i][j] = x;<br>            &#125;<br>        &#125;<br>        <br>        cout &lt;&lt; <span class="hljs-built_in">maxClique</span>() &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/">题目链接</a></p><p><img src="/2021/07/11/%E6%9C%80%E5%A4%A7%E5%9B%A2%E7%AE%97%E6%B3%95/image-20210923211134408.png" alt="image-20210923211134408"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>        <span class="hljs-keyword">int</span> id;<br>        list&lt;node*&gt; ptr;<br>    &#125;;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    node nodes[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">bool</span> g[<span class="hljs-number">64</span>][<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">int</span> memo[<span class="hljs-number">64</span>];<br>    <span class="hljs-keyword">int</span> N, res;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; adj, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(adj.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(c &gt; res)&#123;<br>                res = c;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = adj.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>            <br>            <span class="hljs-keyword">if</span>(c+i+<span class="hljs-number">1</span> &lt;= res) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(c+memo[adj[i]] &lt;= res) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            vector&lt;<span class="hljs-keyword">int</span>&gt; temp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) <span class="hljs-keyword">if</span>(g[adj[i]][adj[j]]) temp.<span class="hljs-built_in">push_back</span>(adj[j]);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(temp, c+<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxClique</span><span class="hljs-params">()</span></span>&#123;<br>        res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>            vector&lt;<span class="hljs-keyword">int</span>&gt; adj;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) <span class="hljs-keyword">if</span>(g[i][j]) adj.<span class="hljs-built_in">push_back</span>(j);<br><br>            <span class="hljs-built_in">dfs</span>(adj, <span class="hljs-number">1</span>);<br>            memo[i] = res;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxStudents</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; seats)</span> </span>&#123;<br>        <span class="hljs-comment">// 最大独立集----&gt;最大团</span><br>        <span class="hljs-keyword">int</span> m = seats.<span class="hljs-built_in">size</span>(), n = seats[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">memset</span>(g, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(g));<br><br>        N = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(seats[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    nodes[i][j].id = N++;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ni = <span class="hljs-number">0</span>; ni &lt; m; ++ni)&#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> nj = <span class="hljs-number">0</span>; nj &lt; n; ++nj)&#123;<br>                            <span class="hljs-keyword">if</span>(ni == i &amp;&amp; nj == j) <span class="hljs-keyword">continue</span>;<br>                            <span class="hljs-keyword">if</span>(seats[ni][nj] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                            nodes[i][j].ptr.<span class="hljs-built_in">push_back</span>(&amp;nodes[ni][nj]);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; ++k)&#123;<br>                        <span class="hljs-keyword">int</span> nx = i+dx[k], ny = j+dy[k];<br>                        <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">0</span> || nx&gt;=m || ny&lt;<span class="hljs-number">0</span> || ny&gt;=n || seats[nx][ny] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                        nodes[i][j].ptr.<span class="hljs-built_in">remove</span>(&amp;nodes[nx][ny]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(seats[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p : nodes[i][j].ptr) g[nodes[i][j].id][p-&gt;id] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">maxClique</span>();<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>最小点覆盖</tag>
      
      <tag>最大独立集</tag>
      
      <tag>最大团</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分图匹配-匈牙利算法</title>
    <link href="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    <url>/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="无权二分图"><a href="#无权二分图" class="headerlink" title="无权二分图"></a>无权二分图</h1><h2 id="匈牙利算法-求最大匹配"><a href="#匈牙利算法-求最大匹配" class="headerlink" title="匈牙利算法(求最大匹配)"></a>匈牙利算法(求最大匹配)</h2><p><a href="https://www.acwing.com/problem/content/2177/">题目链接1</a></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211010194405664.png" alt="image-20211010194405664"></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211010194433874.png" alt="image-20211010194433874"></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211010194455232.png" alt="image-20211010194455232"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, M = N*N;<br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], tot = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[N];<span class="hljs-comment">// 访问数组</span><br><span class="hljs-keyword">int</span> m, n;<br><br><span class="hljs-keyword">int</span> match[N];  <span class="hljs-comment">// 表示 i与match[i] 匹配</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<br>    e[tot] = y, ne[tot] = h[x], h[x] = tot++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[x]; ~i; i = ne[i])&#123;<br>        <span class="hljs-keyword">int</span> y = e[i];<br>        <span class="hljs-keyword">if</span>(!vis[y])&#123; <br>            vis[y] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(match[y] == <span class="hljs-number">-1</span> || <span class="hljs-built_in">find</span>(match[y]))&#123;  <span class="hljs-comment">// y还没匹配或者y可以换一个匹配对象[一条可扩路]</span><br>                match[y] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 匈牙利算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Hungarian</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-comment">// 重置访问数组</span><br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>        <span class="hljs-comment">// 寻找可扩路，以i为起点的可扩路[选中的边和没选中的边交替的路]</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) ++res;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <br>    <span class="hljs-comment">// 输出匹配的对</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = m+<span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(match[i] != <span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, match[i], i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>    <span class="hljs-built_in">memset</span>(match, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(match));<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);<br>    <br>    <span class="hljs-comment">// 建图</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), x != <span class="hljs-number">-1</span>) <span class="hljs-built_in">add</span>(x, y);<br>    <br>    <span class="hljs-comment">// 匈牙利算法</span><br>    <span class="hljs-built_in">Hungarian</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/1396/">题目链接2</a></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20210923204950790.png" alt="image-20210923204950790"></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211211204842602.png" alt="image-20211211204842602"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">410</span>, M = N*N;<br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    e[tot] = b, ne[tot] = h[a], h[a] = tot++;<br>&#125;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-keyword">int</span> match[N];<br><br><span class="hljs-keyword">int</span> n1, n2;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    vis[x] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[x]; ~i; i = ne[i])&#123;<br>        <span class="hljs-keyword">int</span> y = e[i];<br>        <br>        <span class="hljs-keyword">if</span>(!vis[y])&#123;<br>            vis[y] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(match[y] == <span class="hljs-number">-1</span> || <span class="hljs-built_in">find</span>(match[y]))&#123;<br>                match[y] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 匈牙利算法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Hungarian</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i)&#123;<br>        <span class="hljs-comment">// 重置访问数组</span><br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>        <br>        <span class="hljs-comment">// 寻找可扩路</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i))&#123;<br>            res++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(h));<br>    <span class="hljs-built_in">memset</span>(match, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(match));<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n1, &amp;n2);<br>    <br>    <span class="hljs-comment">// 建图</span><br>    <span class="hljs-keyword">int</span> t, v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; t; ++j)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v);<br>            <span class="hljs-built_in">add</span>(i, v+n1, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">Hungarian</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/4301/">题目链接3</a></p><h1 id="带权二分图"><a href="#带权二分图" class="headerlink" title="带权二分图"></a>带权二分图</h1><h2 id="KM算法（求最大权匹配）"><a href="#KM算法（求最大权匹配）" class="headerlink" title="KM算法（求最大权匹配）"></a>KM算法（求最大权匹配）</h2><p><a href="https://www.acwing.com/problem/content/description/2195/">题目链接</a></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211211203624166.png" alt="image-20211211203624166"></p><p><img src="/2021/07/11/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/image-20211211203635814.png" alt="image-20211211203635814"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">55</span>;<br><br><span class="hljs-comment">// 带权图</span><br><span class="hljs-keyword">int</span> g[N][N];<br><br><span class="hljs-comment">// i与match[i]匹配</span><br><span class="hljs-keyword">int</span> match[N];<br><br><span class="hljs-comment">// 可行顶点标号</span><br><span class="hljs-keyword">int</span> lx[N], ly[N];<br><br><span class="hljs-comment">// 当成是一维的访问数组即可，因为这里建图时2*n个顶点建成了g[n][n],而不是g[2*n][2*n]</span><br><span class="hljs-keyword">bool</span> visx[N], visy[N];<br><br><span class="hljs-keyword">int</span> n1, n2;<br><br><span class="hljs-comment">// 寻找可扩路</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    visx[x] = <span class="hljs-literal">true</span>;                                 <span class="hljs-comment">// 置访问标记</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; ++j)&#123;<br>        <span class="hljs-keyword">if</span>(!visy[j] &amp;&amp; lx[x]+ly[j] == g[x][j])&#123;     <span class="hljs-comment">// 当前点没有访问，并且当前边属于相等子图内的边</span><br>            visy[j] = <span class="hljs-literal">true</span>;                         <span class="hljs-comment">// 置访问标记</span><br>            <span class="hljs-keyword">if</span>(match[j] == <span class="hljs-number">-1</span> || <span class="hljs-built_in">find</span>(match[j]))&#123;   <span class="hljs-comment">// 当前点没有匹配，或者当前点可以换一个匹配对象。[可扩路]</span><br>                match[j] = x;                       <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">// KM算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">KM</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i)&#123;<br>        <span class="hljs-comment">// 判断是否存在以i为起点的可扩路</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 重置访问数组</span><br>            <span class="hljs-built_in">memset</span>(visx, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(visx));<br>            <span class="hljs-built_in">memset</span>(visy, <span class="hljs-literal">false</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(visy));<br>            <br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 找到了增广路径</span><br>            <br>            <span class="hljs-comment">// 没有找到增广路径</span><br>            <br>            <span class="hljs-comment">// 找最小值，更新可行顶点标号</span><br>            <span class="hljs-keyword">int</span> d = INF;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt;= n1; ++x)&#123;<br>                <span class="hljs-comment">// 第一个集合中访问过的点</span><br>                <span class="hljs-keyword">if</span>(visx[x])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y = <span class="hljs-number">1</span>; y &lt;= n2; ++y)&#123;<br>                        <span class="hljs-comment">// 第二个集合中没有访问过的点</span><br>                        <span class="hljs-keyword">if</span>(!visy[y]) d = <span class="hljs-built_in">min</span>(d, lx[x]+ly[y]-g[x][y]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">// 所有访问过的点更新可行顶点标号</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt;= n1; ++x) <span class="hljs-keyword">if</span>(visx[x]) lx[x] -= d;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y = <span class="hljs-number">1</span>; y &lt;= n2; ++y) <span class="hljs-keyword">if</span>(visy[y]) ly[y] += d;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-built_in">memset</span>(match, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(match));<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n1);<br>    n2 = n1;<br>    <br>    <span class="hljs-comment">// 可行顶点标号</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span> ; j &lt;= n2; ++j)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i][j]);<br>            lx[i] = <span class="hljs-built_in">max</span>(lx[i], g[i][j]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">KM</span>();<br>    <br>    <span class="hljs-comment">// 最大权</span><br>    <span class="hljs-keyword">int</span> maxWeight = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i) maxWeight += lx[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n2; ++i) maxWeight += ly[i];<br><br>    <br>    <span class="hljs-comment">// 求最小权匹配则只需要把边权改成负值，问题仍然转化为了最大权匹配</span><br>    <span class="hljs-comment">// 权值取反，执行一遍KM算法</span><br>    <span class="hljs-built_in">memset</span>(lx, <span class="hljs-number">-0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(lx));<br>    <span class="hljs-built_in">memset</span>(ly, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ly));<br>    <span class="hljs-built_in">memset</span>(match, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(match));<br>    <br>    <span class="hljs-comment">// 可行顶点标号</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span> ; j &lt;= n2; ++j)&#123;<br>            g[i][j] *= <span class="hljs-number">-1</span>;<br>            lx[i] = <span class="hljs-built_in">max</span>(lx[i], g[i][j]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">KM</span>();<br>    <br>    <span class="hljs-comment">// 最小权</span><br>    <span class="hljs-keyword">int</span> minWeight = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; ++i) minWeight += lx[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n2; ++i) minWeight += ly[i];<br>    <br>    <br>    cout &lt;&lt; -minWeight &lt;&lt; endl &lt;&lt; maxWeight &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>完美匹配</tag>
      
      <tag>最大匹配</tag>
      
      <tag>最小点覆盖</tag>
      
      <tag>匈牙利算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚表</title>
    <link href="/2021/07/09/%E8%99%9A%E8%A1%A8/"/>
    <url>/2021/07/09/%E8%99%9A%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>虚函数存放在代码段，C++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类类型的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术(Run Time Type Identification即通过<strong>运行时类型识别</strong>,程序能够使用基类的指针或引用来检查着这些指针或引用所指的对象的实际派生类型。 区分RAII(Resource Acquire Is Initiation)，即<strong>资源获取就是初始化</strong>，是c++等编程语言常用的管理资源、避免内存泄露的方法。它保证在任何情况下，使用对象时先申请资源构造对象，最后析构对象释放资源。)，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。<br>编译时多态性：通过重载函数实现。<br>运行时多态性：通过虚函数实现。</p><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><p>虚函数表存放在只读数据段<code>.rodata段</code>， 虚函数是通过一张虚函数表来实现的。在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。</p><p>这里我们着重分析虚函数表。C++的编译器应该是保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证取到虚函数表的有最高的性能——如果有多层继承或是多重继承的情况下）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。</p><h3 id="虚继承与虚函数"><a href="#虚继承与虚函数" class="headerlink" title="虚继承与虚函数"></a>虚继承与虚函数</h3><h5 id="（虚继承内存分布跟编译器有关）"><a href="#（虚继承内存分布跟编译器有关）" class="headerlink" title="（虚继承内存分布跟编译器有关）"></a>（虚继承内存分布跟编译器有关）</h5><p>虚继承和虚函数是完全无相关的两个概念。<br>虚继承是解决C++多重继承问题的一种手段，从不同途径继承来的同一基类，会在子类中存在多份拷贝。这将存在两个问题：<br>1、浪费存储空间。<br>2、存在二义性问题，通常可以将派生类对象的地址赋值给基类对象，实现的具体方式是，将基类指针指向继承类（继承类有基类的拷贝）中的基类对象的地址，但是多重继承可能存在一个基类的多份拷贝，这就出现了二义性。</p><p>虚继承可以解决多种继承前面提到的两个问题：<br>虚继承底层实现原理与编译器相关，一般通过虚基类指针和虚基类表实现，每个虚继承的子类都有一个虚基类指针（占用一个指针的存储空间）和虚基类表（不占用类对象的存储空间）（需要强调的是，虚基类依旧会在子类里面存在拷贝，只是仅仅最多存在一份而已，并不是不在子类里面了）；当虚继承的子类被当做父类继承时，虚基类指针也会被继承。</p><p>实际上，vbptr指的是虚基类表指针（virtual base table pointer），该指针指向了一个虚基类表（virtual table），虚表中记录了虚基类与本类的偏移地址；通过偏移地址，这样就找到了虚基类成员，而虚继承也不用像普通多继承那样维持着公共基类（虚基类）的两份同样的拷贝，节省了存储空间。</p><p>在这里我们可以对比虚函数的实现原理：他们有相似之处，都利用了虚指针（均占用类的存储空间）和虚表（均不占用类的存储空间）。</p><p>虚基类依旧存在继承类中，只占用存储空间；虚函数不占用存储空间。<br>虚基类表存储的是虚基类相对直接继承类的偏移；而虚函数表存储的是虚函数地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">public</span> Base2&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">3</span>;<br>&#125;;<br><br><span class="hljs-comment">// sizeof(A) == 28 ----&gt; 4byte*7</span><br><br>(gdb) x/<span class="hljs-number">32b</span>x &amp;a<br><span class="hljs-number">0x61fe00</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe08</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe10</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe18</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><br><br><span class="hljs-comment">// with virtual derived: class A: virtual public Base1, virtual public Base2</span><br><span class="hljs-comment">// sizeof(A) == 40</span><br><br>(gdb) x/<span class="hljs-number">40b</span>x &amp;a<br><span class="hljs-number">0x61fdf0</span>:       <span class="hljs-number">0x80</span>    <span class="hljs-number">0x45</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fdf8</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe00</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe08</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe10</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404580</span><br><span class="hljs-number">0x404580</span> &lt;_ZTV1A+<span class="hljs-number">32</span>&gt;:   <span class="hljs-number">0x47</span>    <span class="hljs-number">0x43</span>    <span class="hljs-number">0x43</span>    <span class="hljs-number">0x3a</span>    <span class="hljs-number">0x20</span>    <span class="hljs-number">0x28</span>    <span class="hljs-number">0x78</span>    <span class="hljs-number">0x38</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x387828203a434347</span><br><span class="hljs-number">0x387828203a434347</span>:     Cannot access memory at address <span class="hljs-number">0x387828203a434347</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">// 菱形继承</span><br><span class="hljs-comment">// 虚继承后a只有一份,否则a有多份</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">1</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><span class="hljs-keyword">public</span> Base1, <span class="hljs-keyword">public</span> Base2&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">3</span>;<br>&#125;;<br><br><span class="hljs-comment">// A a;</span><br><span class="hljs-comment">// sizeof(A) == 48</span><br><br>(gdb) x/<span class="hljs-number">48b</span>x &amp;a<br><span class="hljs-number">0x61fdf0</span>:       <span class="hljs-number">0x28</span>    <span class="hljs-number">0x46</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fdf8</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe00</span>:       <span class="hljs-number">0x40</span>    <span class="hljs-number">0x46</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe08</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe10</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe18</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x04</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404628</span><br><span class="hljs-number">0x404628</span> &lt;_ZTV1A+<span class="hljs-number">24</span>&gt;:   <span class="hljs-number">0x1c</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// 0x1c + 0x61fe00 == 0x61fe1c -----&gt; a == 4</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404640</span><br><span class="hljs-number">0x404640</span> &lt;_ZTV1A+<span class="hljs-number">48</span>&gt;:   <span class="hljs-number">0x47</span>    <span class="hljs-number">0x43</span>    <span class="hljs-number">0x43</span>    <span class="hljs-number">0x3a</span>    <span class="hljs-number">0x20</span>    <span class="hljs-number">0x28</span>    <span class="hljs-number">0x78</span>    <span class="hljs-number">0x38</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x387828203a434347</span><br><span class="hljs-number">0x387828203a434347</span>:     Cannot access memory at address <span class="hljs-number">0x387828203a434347</span><br><br><span class="hljs-comment">// 把两个virtual关键字移到放在A继承 class A: virtual public Base1, virtual public Base2</span><br><span class="hljs-comment">// 打印内存后发现，具有与上述完全一模一样的内存分布</span><br><br><br><span class="hljs-comment">// 不移动virtual关键字，而是再加两个virtual关键字 class A: virtual public Base1, virtual public Base2</span><br><span class="hljs-comment">// sizeof(A) == 64</span><br><br>(gdb) x/<span class="hljs-number">64b</span>x &amp;a<br><span class="hljs-number">0x61fde0</span>:       <span class="hljs-number">0x48</span>    <span class="hljs-number">0x46</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fde8</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fdf0</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fdf8</span>:       <span class="hljs-number">0x60</span>    <span class="hljs-number">0x46</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe00</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe08</span>:       <span class="hljs-number">0x04</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe10</span>:       <span class="hljs-number">0x78</span>    <span class="hljs-number">0x46</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x61fe18</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404648</span><br><span class="hljs-number">0x404648</span> &lt;_ZTV1A+<span class="hljs-number">40</span>&gt;:   <span class="hljs-number">0x10</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>     <span class="hljs-comment">// 0x10 + 0x61fdf8 == 0x61fe08 -----&gt; a == 4</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404660</span><br><span class="hljs-number">0x404660</span> &lt;_ZTV1A+<span class="hljs-number">64</span>&gt;:   <span class="hljs-number">0xf8</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span><br>(gdb) x/<span class="hljs-number">8b</span>x <span class="hljs-number">0x404678</span><br><span class="hljs-number">0x404678</span> &lt;_ZTV1A+<span class="hljs-number">88</span>&gt;:   <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><br><br></code></pre></td></tr></table></figure><hr><h3 id="多重继承-网上收集"><a href="#多重继承-网上收集" class="headerlink" title="多重继承(网上收集)"></a>多重继承(网上收集)</h3><p>测试一：不带虚继承，不带虚函数<br>结果：<br>    1、内存空间只有变量</p><p>测试二：不带虚继承，基类带虚函数<br>结果：<br>    1、基类会带有一个虚函数指针</p><p>测试三：单个虚继承，不带虚函数<br>结果：虚继承与继承的区别<br>    1、多了一个虚基指针<br>    2、虚基类位于派生类存储空间的最末尾</p><p>测试四：单个虚继承，带虚函数<br>结果：<br>    1、如果派生类没有独立的虚函数，此时派生类对象不会产生虚函数指针<br>    2、如果派生类拥有自己的虚函数，此时派生类对象就会产生自己本身的虚函数指针，并且该虚函数指针位于派生类对象存储空间的最开始位置（放在了虚基指针的前面，为了加快虚函数的查找速度）</p><p>测试五：多重继承（带虚函数）<br>结果：<br>    1、每个基类都有自己的虚函数表<br>    2、派生类如果有自己的虚函数，会被加入到第一个虚函数表之中<br>    3、内存布局中，其基类的布局按照基类被声明时的顺序进行排列<br>    4、派生类会覆盖基类的虚函数，只有第一个虚函数表中存放的是真实的被覆盖的函数的地址；其它的虚函数表中存放的并不是真实的对应的虚函数的地址，而只是一条跳转指令</p><p>测试六：菱型虚继承<br>虚基指针所指向的虚基表的内容：<br>    1、虚基指针的第一条内容表示的是该虚基指针距离所在的子对象的首地址的偏移<br>    2、虚基指针的第二条内容表示的是该虚基指针距离虚基类子对象的首地址的偏移</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">// 注意内存对齐</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IBase1</span>&#123;</span><br><span class="hljs-keyword">public</span>: <br>    ~<span class="hljs-built_in">IBase1</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;IBase1::g() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">specific1</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;IBase1::specific1() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br>  <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IBase2</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    ~<span class="hljs-built_in">IBase2</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;IBase2::g() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">specific2</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;IBase2::specific2() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br>  <span class="hljs-keyword">int</span> a= <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span> <span class="hljs-keyword">public</span> IBase1, <span class="hljs-keyword">public</span> IBase2&#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;f() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;g() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">h</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;h() call&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br>&#125;;<br><br>A a;<br><span class="hljs-comment">// sizeof(A) == 32</span><br><br>(gdb) x/<span class="hljs-number">32b</span>x &amp;a<br><span class="hljs-number">0x61fdc0</span>:       <span class="hljs-number">0x60</span>    <span class="hljs-number">0x56</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// vfptr1</span><br><span class="hljs-number">0x61fdc8</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// &amp;a.IBase1::a == 0x61fdc8</span><br><span class="hljs-number">0x61fdd0</span>:       <span class="hljs-number">0x88</span>    <span class="hljs-number">0x56</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>  <span class="hljs-comment">// vfptr2</span><br><span class="hljs-number">0x61fdd8</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// &amp;a.IBase2::a == 0x61fdd8     &amp;a.a == 0x61fddc</span><br>(gdb) x/<span class="hljs-number">32b</span>x <span class="hljs-number">0x0000000000405660</span><br><span class="hljs-number">0x405660</span> &lt;_ZTV1A+<span class="hljs-number">16</span>&gt;:   <span class="hljs-number">0xe0</span>    <span class="hljs-number">0x2f</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405668</span> &lt;_ZTV1A+<span class="hljs-number">24</span>&gt;:   <span class="hljs-number">0x20</span>    <span class="hljs-number">0x30</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405670</span> &lt;_ZTV1A+<span class="hljs-number">32</span>&gt;:   <span class="hljs-number">0xf0</span>    <span class="hljs-number">0x30</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405678</span> &lt;_ZTV1A+<span class="hljs-number">40</span>&gt;:   <span class="hljs-number">0xf0</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span><br>(gdb) x/<span class="hljs-number">32b</span>x <span class="hljs-number">0x0000000000405688</span><br><span class="hljs-number">0x405688</span> &lt;_ZTV1A+<span class="hljs-number">56</span>&gt;:   <span class="hljs-number">0xf0</span>    <span class="hljs-number">0x31</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405690</span> &lt;_ZTV1A+<span class="hljs-number">64</span>&gt;:   <span class="hljs-number">0x00</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405698</span> &lt;_ZTV1A+<span class="hljs-number">72</span>&gt;:   <span class="hljs-number">0x90</span>    <span class="hljs-number">0x31</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056a0</span> &lt;_ZTV6IBase1&gt;: <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    A a;<br>    a.<span class="hljs-built_in">f</span>();<br><br>    a.IBase1::<span class="hljs-built_in">g</span>();  <span class="hljs-comment">// 解决办法一: 类名限定。  指定调用哪一个</span><br>    a.<span class="hljs-built_in">g</span>(); <span class="hljs-comment">// 解决方法二：同名覆盖。 如果A中没有重载g()则报错: &#x27;g&#x27; is ambiguous</span><br><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;size of a: &quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(A) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">auto</span> p = &amp;a;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of a: &quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>    <span class="hljs-keyword">int64_t</span>* pVTable1 = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int64_t</span>*&gt;( *<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int64_t</span>*&gt;(p) );<br>    <span class="hljs-keyword">int64_t</span>* pVTable2 = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int64_t</span>*&gt;( *<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int64_t</span>*&gt;(<span class="hljs-built_in">int64_t</span>(p)+<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(IBase1)) );<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;address of variable a.a:&quot;</span> &lt;&lt; &amp;a.a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of virtul table1: &quot;</span> &lt;&lt; pVTable1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of virtul table2: &quot;</span> &lt;&lt; pVTable2 &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase1::a: &quot;</span> &lt;&lt; &amp;(a.IBase1::a) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase1::f(): &quot;</span> &lt;&lt;IBase1::f &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase1::g(): &quot;</span> &lt;&lt; IBase1::g &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase1::specific1(): &quot;</span> &lt;&lt; IBase1::specific1 &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase2::a: &quot;</span> &lt;&lt; &amp;(a.IBase2::a) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase2::f(): &quot;</span> &lt;&lt; IBase2::f &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase2::g(): &quot;</span> &lt;&lt; IBase2::g &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;address of IBase2::specific2(): &quot;</span> &lt;&lt; IBase2::specific2 &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;traverse pVTable1:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">int</span> funPos1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>( funPos1 &lt; <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">//  reinterpret_cast&lt;void(*)()&gt; (pVTable1[funPos1]) != nullptr</span><br><br>        <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*func)() = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*)()&gt; (pVTable1[funPos1]);<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;address of function: &quot;</span> &lt;&lt; (<span class="hljs-keyword">void</span>*)func &lt;&lt; endl;<br><br>        <span class="hljs-built_in">func</span>();<br><br>        ++funPos1;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;traverse pVTable2:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">int</span> funPos2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>( funPos2 &lt; <span class="hljs-number">3</span>)&#123; <span class="hljs-comment">//  reinterpret_cast&lt;void(*)()&gt; (pVTable1[funPos1]) != nullptr</span><br><br>        <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*func)() = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*)()&gt; (pVTable2[funPos2]);<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;address of function: &quot;</span> &lt;&lt; (<span class="hljs-keyword">void</span>*)func &lt;&lt; endl;<br><br>        <span class="hljs-built_in">func</span>();<br><br>        ++funPos2;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果是虚继承 class A:virtual public IBase1,virtual public IBase2</span><br><span class="hljs-comment">// sizeof(A) == 48</span><br><span class="hljs-comment">// 网上：虚继承时，虚基类指针vbptr指向虚基类表vbtable，虚基类表中存放的就是数据相对于虚基类指针的偏移，从而根据偏移找到数据</span><br><br>(gdb) x/<span class="hljs-number">48b</span>x &amp;a<br><span class="hljs-number">0x61fdb0</span>:       <span class="hljs-number">0x90</span>    <span class="hljs-number">0x56</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// vbptr : 该派生类的虚表指针,从下面内存打印中可以看出包含两个函数</span><br><span class="hljs-number">0x61fdb8</span>:       <span class="hljs-number">0x03</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0xfe</span>    <span class="hljs-number">0x7f</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>  <span class="hljs-comment">// &amp;a.a == 0x61fdb8</span><br><span class="hljs-number">0x61fdc0</span>:       <span class="hljs-number">0xc8</span>    <span class="hljs-number">0x56</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>  <span class="hljs-comment">// vfptr1</span><br><span class="hljs-number">0x61fdc8</span>:       <span class="hljs-number">0x01</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// &amp;a.IBase1::a == 0x61fdc8</span><br><span class="hljs-number">0x61fdd0</span>:       <span class="hljs-number">0x08</span>    <span class="hljs-number">0x57</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// vfptr2</span><br><span class="hljs-number">0x61fdd8</span>:       <span class="hljs-number">0x02</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>      <span class="hljs-comment">// &amp;a.IBase2::a == 0x61fdd8</span><br>(gdb) x/<span class="hljs-number">32b</span>x <span class="hljs-number">0x0000000000405690</span><br><span class="hljs-number">0x405690</span> &lt;_ZTV1A+<span class="hljs-number">32</span>&gt;:   <span class="hljs-number">0xd0</span>    <span class="hljs-number">0x2f</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405698</span> &lt;_ZTV1A+<span class="hljs-number">40</span>&gt;:   <span class="hljs-number">0x10</span>    <span class="hljs-number">0x30</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056a0</span> &lt;_ZTV1A+<span class="hljs-number">48</span>&gt;:   <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056a8</span> &lt;_ZTV1A+<span class="hljs-number">56</span>&gt;:   <span class="hljs-number">0xf0</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span>    <span class="hljs-number">0xff</span><br>(gdb) x/<span class="hljs-number">32b</span>x <span class="hljs-number">0x00000000004056c8</span><br><span class="hljs-number">0x4056c8</span> &lt;_ZTV1A+<span class="hljs-number">88</span>&gt;:   <span class="hljs-number">0xd0</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056d0</span> &lt;_ZTV1A+<span class="hljs-number">96</span>&gt;:   <span class="hljs-number">0xe0</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056d8</span> &lt;_ZTV1A+<span class="hljs-number">104</span>&gt;:  <span class="hljs-number">0x70</span>    <span class="hljs-number">0x31</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x4056e0</span> &lt;_ZTV1A+<span class="hljs-number">112</span>&gt;:  <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br>(gdb) x/<span class="hljs-number">32b</span>x <span class="hljs-number">0x0000000000405708</span><br><span class="hljs-number">0x405708</span> &lt;_ZTV1A+<span class="hljs-number">152</span>&gt;:  <span class="hljs-number">0xd0</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405710</span> &lt;_ZTV1A+<span class="hljs-number">160</span>&gt;:  <span class="hljs-number">0xe0</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405718</span> &lt;_ZTV1A+<span class="hljs-number">168</span>&gt;:  <span class="hljs-number">0x40</span>    <span class="hljs-number">0x32</span>    <span class="hljs-number">0x40</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><span class="hljs-number">0x405720</span> &lt;_ZTV6IBase1&gt;: <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span>    <span class="hljs-number">0x00</span><br><br><br></code></pre></td></tr></table></figure><hr><p>是不是头晕了？等待再更。。。。</p>]]></content>
    
    
    <categories>
      
      <category>内存</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>内存</tag>
      
      <tag>虚函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>strtok多线程不安全</title>
    <link href="/2021/07/09/strtok%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/"/>
    <url>/2021/07/09/strtok%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>strtok()函数:<br>    char *strtok(char *str, const char *delim);</p><p>按分解标志字符串delim(其中所有字符均被当作分割标志)把字符串str分解为一组字符串。<br>首次调用时，参数str指向要分解的字符串；之后再次调用要把参数str设成nullptr，因为参数str为nullptr，所以函数将自己上一次分解时所保存的指针SAVE_PTR在本次调用中将作为起始位置。</p><hr><p>注意事项：</p><p>1、使用该函数进行字符串分割时，会破坏被分解字符串的完整，调用前和调用后的str已经不一样了，因为处于delim中的字符被设为’\0’，相当于源字符串str被截断。<br>2、第一次分割之后，原字符串str是分割完成之后的第一个字符串，剩余的字符串存储在一个静态变量中，因此多线程同时访问该静态变量时，则会出现错误。<br>3、如果要保持原字符串的完整，可以使用strchr和sscanf的组合等。</p><p>4、常用的其他字符串库函数包括：strchr, strrchr, strstr。。。。</p>]]></content>
    
    
    <categories>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO多路复用</title>
    <link href="/2021/07/09/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <url>/2021/07/09/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select poll epoll"></a>select poll epoll</h3><p><a href="https://www.jianshu.com/p/5768b187a970">其他参考信息</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">select</span>把所有监听的文件描述符拷贝到内核中，挂起进程。<br>当某个文件描述符可读或可写的时候，中断程序唤起进程，<br><span class="hljs-keyword">select</span>将监听的文件描述符再次拷贝到用户空间，然<span class="hljs-keyword">select</span>后遍历这些文件描述符找到IO可用的文件。<br>下次监控的时候需要再次拷贝这些文件描述符到内核空间。<span class="hljs-keyword">select</span>支持监听的描述符最大数量是<span class="hljs-number">1024</span>.<br><br>poll使用链表保存文件描述符，其他的跟<span class="hljs-keyword">select</span>没有什么不同。因此poll支持监听的描述符数量理论上没有限制。<br><br>epoll将文件描述符拷贝到内核空间后使用红黑树进行维护，同时向内核注册每个文件描述符的回调函数，<br>当某个文件描述符可读可写的时候，将这个文件描述符加入到就绪链表里，并唤起进程，返回就绪链表到用户空间。<br><br><br><span class="hljs-comment">############ 底层原理</span><br>每创建一个<span class="hljs-keyword">socket</span>，会在内核中分配输入输出缓冲区和等待队列，等待队列中保存的是阻塞在该<span class="hljs-keyword">socket</span>上的线程。<br>（中断程序先将网络数据写入到对应<span class="hljs-keyword">socket</span>的接收缓冲区里面，然后唤醒阻塞在该<span class="hljs-keyword">socket</span>上的线程）<br><br>使用<span class="hljs-keyword">select</span>时，<span class="hljs-keyword">select</span>线程处于它所管理的所有<span class="hljs-keyword">socket</span>的的等待队列中，当其中某个<span class="hljs-keyword">socket</span>有事件到来时，执行对应的中断函数唤醒<span class="hljs-keyword">select</span>线程<br><span class="hljs-keyword">select</span>被唤醒后，它知道一定有事件触发，但它不知道具体是哪些触发了，于是要再次遍历所有的<span class="hljs-keyword">socket</span>。<br><br>epoll底层用红黑树管理<span class="hljs-keyword">socket</span>，同时还额外多了一个就绪链表，当其中某个<span class="hljs-keyword">socket</span>有事件到来时，执行对应的中断函数，<br>与<span class="hljs-keyword">select</span>不同的是epoll的中断函数在这里并不直接唤醒epoll线程，该中断函数将这个<span class="hljs-keyword">socket</span>对应的红黑树节点以引用的方式插入到就绪链表中。<br>之后再唤醒epoll文件描述符中等待队列中的进程。<br>调用epoll_wait实际上就是在epoll文件描述符的等待队列中插入该线程。<br></code></pre></td></tr></table></figure><h5 id="阿里存储基础技术二面中有说到网卡收到数据后的一系列操作，其中有下面这个操作："><a href="#阿里存储基础技术二面中有说到网卡收到数据后的一系列操作，其中有下面这个操作：" class="headerlink" title="阿里存储基础技术二面中有说到网卡收到数据后的一系列操作，其中有下面这个操作："></a>阿里存储基础技术二面中有说到网卡收到数据后的一系列操作，其中有下面这个操作：</h5><p>网卡硬中断后ksoftirqd调度了软中断，执行中断处理函数时，其中提到<code>调用的是第三层ip协议处理程序，因为以太网头在前面初始化sk_buffer的时候被移除了；ip协议处理程序匹配ip目的地、检验和、移除ip协议头、路由查询、组片分片；然后调用第四层的tcp协议处理程序，由于我们在应用层创建socket绑定端口后会在内核中为该套接字分配读写缓冲区，所以四层处理程序将这个sk_buffer数据结构放到套接字读缓冲区；然后触发了该套接字的可读事件；</code></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式-代码示意</title>
    <link href="/2021/07/08/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/"/>
    <url>/2021/07/08/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="观察者模式-代码示意"><a href="#观察者模式-代码示意" class="headerlink" title="观察者模式-代码示意"></a>观察者模式-代码示意</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IBaseSubject</span>&#123;</span><br>protect:<br><br>std::list&lt;IBaseObserver*&gt; observers;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">IBaseSubject</span>() &#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(IBaseObserver* pObserver)</span></span>&#123;<br>observers-&gt;<span class="hljs-built_in">push_back</span>(pObserver);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(IBaseObserver* pObserver)</span></span>&#123;<br>observers-&gt;<span class="hljs-built_in">remove</span>(pObserver);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObserver</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLSubjectImpl</span>:</span> <span class="hljs-keyword">public</span> IBaseSubject&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CLSubjectImpl</span>() &#123; &#125;<br>~<span class="hljs-built_in">CLSubjectImpl</span>()&#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notifyObserver</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> pob : observers) pob-&gt;<span class="hljs-built_in">response</span>();<br>&#125;<br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IBaseObserver</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">IBaseObserver</span>() &#123; &#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">response</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLObserverImplA</span>:</span> <span class="hljs-keyword">public</span> IBaseObserver&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CLObserverImplA</span>() &#123; &#125;<br>~<span class="hljs-built_in">CLObserverImplA</span>()&#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">response</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">doSomething</span>();<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLObserverImplB</span>:</span> <span class="hljs-keyword">public</span> IBaseObserver&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CLObserverImplB</span>() &#123; &#125;<br>    ~<span class="hljs-built_in">CLObserverImplB</span>()&#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">response</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">doSomething</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    IBaseSubject* pSubject = <span class="hljs-keyword">new</span> CLSubjectImpl;<br><br>    IBaseObserver* pobA = <span class="hljs-keyword">new</span> CLObserverImplA;<br>    IBaseObserver* pobB = <span class="hljs-keyword">new</span> CLObserverImplB;<br><br>    pSubject-&gt;<span class="hljs-built_in">addObserver</span>(pobA);<br>    pSubject-&gt;<span class="hljs-built_in">addObserver</span>(pobB);<br><br><br>    pSubject-&gt;<span class="hljs-built_in">notifyObserver</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式-代码示意</title>
    <link href="/2021/07/08/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/"/>
    <url>/2021/07/08/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="策略模式-代码示意"><a href="#策略模式-代码示意" class="headerlink" title="策略模式-代码示意"></a>策略模式-代码示意</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IBaseStrategy</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">IBaseStrategy</span>() &#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">strategyMethod</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLStrategyImplA</span>:</span> <span class="hljs-keyword">public</span> IBaseStrategy&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">CLStrategyImplA</span>() &#123; &#125;<br>~<span class="hljs-built_in">CLStrategyImplA</span>()&#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">strategyMethod</span><span class="hljs-params">()</span></span>&#123;<br><br>...<br><br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLStrategyImplB</span>:</span> <span class="hljs-keyword">public</span> IBaseStrategy&#123;<br><span class="hljs-keyword">public</span>:<br><br>        <span class="hljs-built_in">CLStrategyImplB</span>() &#123; &#125;<br>        ~<span class="hljs-built_in">CLStrategyImplB</span>()&#123; &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">strategyMethod</span><span class="hljs-params">()</span></span>&#123;<br><br>...<br><br>        &#125;<br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLContext</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>IBaseStrategy* pStrategy;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CLContext</span>(): <span class="hljs-built_in">pStrategy</span>(<span class="hljs-literal">nullptr</span>)&#123; &#125;<br>~<span class="hljs-built_in">CLContext</span>() &#123; &#125;<br><br><span class="hljs-function">IBaseStrategy* <span class="hljs-title">getStrategy</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> pStrategy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setStrategy</span><span class="hljs-params">(IBaseStrategy* strategy)</span></span>&#123;<br>pStrategy = strategy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">strategyMethod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">assert</span>(pStrategy);<br>pStrategy-&gt;<span class="hljs-built_in">strategyMethod</span>();<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>        CLContext* pContext = <span class="hljs-keyword">new</span> CLContext;<br>        IBaseStrategy* pStrategy = <span class="hljs-keyword">new</span> CLStrategyImplA;<br>        pContext-&gt;<span class="hljs-built_in">setStrategy</span>(pStrategy);<br>        pContext-&gt;<span class="hljs-built_in">strategyMethod</span>();<br><br><br>        pStrategy = <span class="hljs-keyword">new</span> CLStrategyImplB;<br>        pContext-&gt;<span class="hljs-built_in">setStrategy</span>(pStrategy);<br>        pContext-&gt;<span class="hljs-built_in">strategyMethod</span>();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板方法模式-代码示意</title>
    <link href="/2021/07/08/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/"/>
    <url>/2021/07/08/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="模板方法模式-代码示意"><a href="#模板方法模式-代码示意" class="headerlink" title="模板方法模式-代码示意"></a>模板方法模式-代码示意</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ITempalte</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ITemplate</span>()&#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">templateMethod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">abstractMethod1</span>();<br><span class="hljs-built_in">hookMethod1</span>();<br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">hookMethod2</span>() &amp;&amp; abstractMethod2)&#123;<br><span class="hljs-built_in">specificMethod</span>();<br>&#125;<br><br><span class="hljs-built_in">abstractMethod3</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">specificMethod</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">doSomething</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hookMethod1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">doSomething</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">hookMethod2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">doSomething</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">abstractMethod1</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">abstractMethod2</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">abstractMethod3</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLTemplateImpl</span> :</span> <span class="hljs-keyword">public</span> ITemplate&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CLTemplateImpl</span>() &#123; &#125;<br>~<span class="hljs-built_in">CLTemplateImpl</span>()&#123; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">abstractMethod1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">doSomething</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">abstractMethod2</span><span class="hljs-params">()</span></span>&#123;<br>                <span class="hljs-built_in">doSomething</span>();<br>        &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">abstractMethod1</span><span class="hljs-params">()</span></span>&#123;<br>                <span class="hljs-built_in">doSomething</span>();<br>        &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hookMethod2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ITemplate* p = <span class="hljs-keyword">new</span> CLTemplateImpl;<br>p-&gt;<span class="hljs-built_in">templateMethod</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>在现实世界中，许多对象并不是独立存在的，其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变。例如，某种商品的物价上涨时会导致部分商家高兴，而消费者伤心；还有，当我们开车到交叉路口时，遇到红灯会停，遇到绿灯会行。这样的例子还有很多，例如，股票价格与股民、微信公众号与微信用户、气象局的天气预报与听众、小偷与警察等。</p><p>在软件世界也是这样，例如，Excel 中的数据与折线图、饼状图、柱状图之间的关系；MVC 模式中的模型与视图的关系；事件模型中的事件源与事件处理者。所有这些，如果用观察者模式来实现就非常方便。<br>观察者（Observer）模式的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>主要优点：<br>1、降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。<br>2、目标与观察者之间建立了一套触发机制。</p><p>主要缺点：<br>1、目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。<br>2、当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</p><hr><h3 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h3><p>实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用，否则将使两者之间紧密耦合起来，这违反了面向对象的设计原则。<br>观察者模式的主要角色如下。<br>1、抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。<br>2、具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。<br>3、抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。<br>4、具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</p><hr><h3 id="模式的应用场景"><a href="#模式的应用场景" class="headerlink" title="模式的应用场景"></a>模式的应用场景</h3><p>在软件系统中，当系统一方行为依赖另一方行为的变动时，可使用观察者模式松耦合联动双方，使得一方的变动可以通知到感兴趣的另一方对象，从而让另一方对象对此做出响应。</p><p>通过前面的分析可知观察者模式适合以下几种情形:<br>1、对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。<br>2、当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。<br>3、实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。<br>4、多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。</p><hr><h3 id="模式的扩展"><a href="#模式的扩展" class="headerlink" title="模式的扩展"></a>模式的扩展</h3><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p><ol><li>Observable类<br>Observable 类是抽象目标类，它有一个 Vector 向量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。<br>void addObserver(Observer o) 方法：用于将新的观察者对象添加到向量中。<br>void notifyObservers(Object arg) 方法：调用向量中的所有观察者对象的 update() 方法，通知它们数据发生改变。通常越晚加入向量的观察者越先得到通知。<br>void setChange() 方法：用来设置一个 boolean 类型的内部标志位，注明目标对象发生了变化。当它为真时，notifyObservers() 才会通知观察者。</li><li>Observer 接口<br>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 void update(Observable o,Object arg) 方法，进行相应的工作。</li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。</p><p>在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。</p><p>如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。<br>策略模式的定义与特点<br>策略（Strategy）模式的定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>主要优点：<br>1、多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if…else 语句、switch…case 语句。<br>2、策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。<br>3、策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。<br>4、策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。<br>5、策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</p><p>主要缺点：<br>1、客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。<br>2、策略模式造成很多的策略类，增加维护难度。</p><hr><h3 id="策略模式的结构"><a href="#策略模式的结构" class="headerlink" title="策略模式的结构"></a>策略模式的结构</h3><p>策略模式是准备一组算法，并将这组算法封装到一系列的策略类里面，作为一个抽象策略类的子类。策略模式的重心不是如何实现算法，而是如何组织这些算法，从而让程序结构更加灵活，具有更好的维护性和扩展性，现在我们来分析其基本结构和实现方法。</p><p>策略模式的主要角色如下。<br>1、抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。<br>2、具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。<br>3、环境（Context）类：持有一个策略类的引用，最终给客户端调用。</p><hr><h3 id="策略模式的应用场景"><a href="#策略模式的应用场景" class="headerlink" title="策略模式的应用场景"></a>策略模式的应用场景</h3><p>策略模式在很多地方用到，如 Java SE 中的容器布局管理就是一个典型的实例，Java SE 中的每个容器都存在多种布局供用户选择。在程序设计中，通常在以下几种情况中使用策略模式较多。<br>1、一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。<br>2、一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。<br>3、系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。<br>4、系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。<br>5、多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</p><hr><h3 id="策略模式的扩展"><a href="#策略模式的扩展" class="headerlink" title="策略模式的扩展"></a>策略模式的扩展</h3><p>在一个使用策略模式的系统中，当存在的策略很多时，客户端管理所有策略算法将变得很复杂，如果在环境类中使用策略工厂模式来管理这些策略类将大大减少客户端的工作复杂度。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-模板方法模式</title>
    <link href="/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/07/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p><p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p><p>这样的例子在生活中还有很多，例如，一个人每天会起床、吃饭、做事、睡觉等，其中“做事”的内容每天可能不同。我们把这些规定了流程或格式的实例定义成模板，允许使用者根据自己的需求去更新它，例如，简历模板、论文模板、Word 中模板文件等。</p><p>模板方法模式将解决以上类似的问题。<br>模板方法（Template Method）模式的定义如下：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>主要优点：<br>1、它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。<br>2、它在父类中提取了公共的部分代码，便于代码复用。<br>3、部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</p><p>主要缺点。<br>1、对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。<br>2、父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。<br>3、由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。</p><hr><h3 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h3><p>模板方法模式需要注意抽象类与具体子类之间的协作。它用到了虚函数的多态性技术以及“不用调用我，让我来调用你”的反向控制技术。<br>模板方法模式包含以下主要角色。<br>1、抽象类/抽象模板（Abstract Class）<br>抽象模板类，负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。这些方法的定义如下。</p><p>1.1、模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p><p>1.2、基本方法：是整个算法中的一个步骤，包含以下几种类型。<br>抽象方法：在抽象类中声明，由具体子类实现。<br>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。<br>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>2、具体子类/具体实现（Concrete Class）<br>具体实现类，实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。</p><hr><h3 id="模式的应用场景"><a href="#模式的应用场景" class="headerlink" title="模式的应用场景"></a>模式的应用场景</h3><p>模板方法模式通常适用于以下场景。<br>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。<br>当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展。</p><hr><h3 id="模式的扩展"><a href="#模式的扩展" class="headerlink" title="模式的扩展"></a>模式的扩展</h3><p>在模板方法模式中，基本方法包含：抽象方法、具体方法和钩子方法，正确使用“钩子方法”可以使得子类控制父类的行为。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memcpy内存重叠</title>
    <link href="/2021/07/08/memcpy%E5%86%85%E5%AD%98%E9%87%8D%E5%8F%A0/"/>
    <url>/2021/07/08/memcpy%E5%86%85%E5%AD%98%E9%87%8D%E5%8F%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="memcpy-strcpy-内存重叠"><a href="#memcpy-strcpy-内存重叠" class="headerlink" title="memcpy/strcpy 内存重叠"></a>memcpy/strcpy 内存重叠</h2><p>因为memcpy，strcpy这两个函数没有对内存重叠进行处理。使用这两个函数的时候程序员必须要保证源地址与目标地址内存不重叠，或者直接使用memmove函数进行内存复制。</p><hr><p>strcpy和memcpy很多版本的核心代码是使用while加上dst++=src++;完成，所以没有对内存的重叠进行处理。</p><p>为什么使用memcpy程序只是等不到正确的结果，而使用strcpy程序还会崩溃？<br>原因很简单: memcpy有一个长度参数n，只拷贝n个字节就结束了。而strcpy是根据判断源字串中的’\0’字符，若发生重叠则可能会覆盖掉’\0’字符导致程序出错。</p><p>内存重叠区域：<br>1、完全重叠<br>无影响，能正常执行相应复制代码。<br>2、目的地址在源内存区域之前，且复制区域存在重叠<br>能正常复制，但会改变源内存区域内容。<br>3、目的地址在源内存区域中间<br>不能正常复制，在复制源的重叠内存区域前已经改变了源内存内容。<br>解决方案：反向复制，转化为第二种内存重叠情况</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么栈由高地址向低地址扩展</title>
    <link href="/2021/07/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%A0%88%E7%94%B1%E9%AB%98%E5%9C%B0%E5%9D%80%E5%90%91%E4%BD%8E%E5%9C%B0%E5%9D%80%E6%89%A9%E5%B1%95/"/>
    <url>/2021/07/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%A0%88%E7%94%B1%E9%AB%98%E5%9C%B0%E5%9D%80%E5%90%91%E4%BD%8E%E5%9C%B0%E5%9D%80%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么栈由高地址向低地址扩展"><a href="#为什么栈由高地址向低地址扩展" class="headerlink" title="为什么栈由高地址向低地址扩展"></a>为什么栈由高地址向低地址扩展</h2><p>很久以前，intel计算机内存区域就分了代码区域和栈区域的。    程序计数器(PC)的缺省指向0地址，计算机开机后从程序计数器指向的地址开始执行程序，每执行完一条指令后，程序计数器自动加1。因此很自然的，代码段从低地址区间开始加载，向高地址区间扩展；为了避免栈空间和代码段冲突，最大利用地址空间，这又很自然的，我们会选择把栈底设置在最高地址0xffffffff，然后让栈空间向下增长。</p><p>这样一来，这种设计在早期的计算机中具有微弱优势。</p><hr><p>而由于现代程序的下列特征，导致现代计算机内存布局问题中不会去限制单个栈的增长方向。<br>1、使用线性虚拟地址，进程空间为4G或者更高<br>2、现代程序写法，栈的大小1M左右已经足够使用。编译器一般都直接限制栈的大小<br>3、多线程导致有多个栈，所以堆-栈的两端分割模式是不合适的，每个栈应当有界</p><hr><p>Intel规定栈由高地址向低地址扩展。<br>ARM汇编里可以指定栈由高地址向低地址扩展还是由低地址向高地址扩展。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式六大原则(转载)</title>
    <link href="/2021/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BD%AC%E8%BD%BD/"/>
    <url>/2021/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BD%AC%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><hr><h3 id="总原则：开闭原则（Open-Close-Principle）"><a href="#总原则：开闭原则（Open-Close-Principle）" class="headerlink" title="总原则：开闭原则（Open Close Principle）"></a>总原则：开闭原则（Open Close Principle）</h3><hr><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p><hr><h3 id="1、单一职责原则"><a href="#1、单一职责原则" class="headerlink" title="1、单一职责原则"></a>1、单一职责原则</h3><hr><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p><hr><h3 id="2、里氏替换原则（Liskov-Substitution-Principle）"><a href="#2、里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏替换原则（Liskov Substitution Principle）"></a>2、里氏替换原则（Liskov Substitution Principle）</h3><hr><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><hr><p>里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><hr><h3 id="3、依赖倒置原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒置原则（Dependence Inversion Principle）"></a>3、依赖倒置原则（Dependence Inversion Principle）</h3><hr><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><hr><p>(高层模块不依赖[编译时依赖]于低层模块，二者都应该依赖于抽象)<br>(抽象不依赖于实现细节，实现细节应该依赖抽象)</p><hr><h3 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h3><hr><p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><hr><h3 id="5、迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#5、迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="5、迪米特法则（最少知道原则）（Demeter Principle）"></a>5、迪米特法则（最少知道原则）（Demeter Principle）</h3><hr><p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><hr><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><hr><h3 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h3><hr><p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
